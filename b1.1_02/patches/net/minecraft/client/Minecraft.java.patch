--- net/minecraft/client/Minecraft.java
+++ net/minecraft/client/Minecraft.java
@@ -1,1299 +1,1199 @@
 package net.minecraft.client;
 
-import java.awt.BorderLayout;
-import java.awt.Canvas;
-import java.awt.Color;
-import java.awt.Component;
-import java.awt.Dimension;
-import java.awt.Frame;
-import java.awt.Graphics;
-import java.io.File;
-import net.minecraft.src.AxisAlignedBB;
-import net.minecraft.src.Block;
-import net.minecraft.src.EffectRenderer;
-import net.minecraft.src.EntityClientPlayerMP;
-import net.minecraft.src.EntityPlayer;
-import net.minecraft.src.EntityPlayerSP;
-import net.minecraft.src.EntityRenderer;
-import net.minecraft.src.EnumOS2;
-import net.minecraft.src.EnumOSMappingHelper;
-import net.minecraft.src.EnumOptions;
-import net.minecraft.src.FontRenderer;
-import net.minecraft.src.GLAllocation;
-import net.minecraft.src.GameSettings;
-import net.minecraft.src.GameWindowListener;
-import net.minecraft.src.GuiChat;
-import net.minecraft.src.GuiConflictWarning;
-import net.minecraft.src.GuiConnecting;
-import net.minecraft.src.GuiGameOver;
-import net.minecraft.src.GuiIngame;
-import net.minecraft.src.GuiIngameMenu;
-import net.minecraft.src.GuiInventory;
-import net.minecraft.src.GuiMainMenu;
-import net.minecraft.src.GuiScreen;
-import net.minecraft.src.GuiUnused;
-import net.minecraft.src.ItemRenderer;
-import net.minecraft.src.ItemStack;
-import net.minecraft.src.LoadingScreenRenderer;
-import net.minecraft.src.MathHelper;
-import net.minecraft.src.MinecraftError;
-import net.minecraft.src.MinecraftException;
-import net.minecraft.src.MinecraftImpl;
-import net.minecraft.src.ModelBiped;
-import net.minecraft.src.MouseHelper;
-import net.minecraft.src.MovementInputFromOptions;
-import net.minecraft.src.MovingObjectPosition;
-import net.minecraft.src.NetClientHandler;
-import net.minecraft.src.OpenGlCapsChecker;
-import net.minecraft.src.PlayerController;
-import net.minecraft.src.PlayerControllerTest;
-import net.minecraft.src.RenderEngine;
-import net.minecraft.src.RenderGlobal;
-import net.minecraft.src.RenderManager;
-import net.minecraft.src.ScaledResolution;
-import net.minecraft.src.ScreenShotHelper;
-import net.minecraft.src.Session;
-import net.minecraft.src.SoundManager;
-import net.minecraft.src.Teleporter;
-import net.minecraft.src.Tessellator;
-import net.minecraft.src.TextureCompassFX;
-import net.minecraft.src.TextureFlamesFX;
-import net.minecraft.src.TextureLavaFX;
-import net.minecraft.src.TextureLavaFlowFX;
-import net.minecraft.src.TexturePackList;
-import net.minecraft.src.TexturePortalFX;
-import net.minecraft.src.TextureWatchFX;
-import net.minecraft.src.TextureWaterFX;
-import net.minecraft.src.TexureWaterFlowFX;
-import net.minecraft.src.ThreadDownloadResources;
-import net.minecraft.src.ThreadSleepForever;
-import net.minecraft.src.Timer;
-import net.minecraft.src.UnexpectedThrowable;
-import net.minecraft.src.Vec3D;
-import net.minecraft.src.World;
-import net.minecraft.src.WorldProvider;
-import net.minecraft.src.WorldProviderHell;
-import net.minecraft.src.WorldRenderer;
+import cc.noxiuam.titanic.Ref;
+import cc.noxiuam.titanic.bridge.type.MinecraftBridge;
+import cc.noxiuam.titanic.Titanic;
+import cc.noxiuam.titanic.event.impl.mouse.ClickEvent;
+import cc.noxiuam.titanic.event.impl.world.TickEvent;
+import cc.noxiuam.titanic.event.impl.gui.DebugDrawEvent;
+import cc.noxiuam.titanic.event.impl.keyboard.KeyboardEvent;
+import cc.noxiuam.titanic.event.impl.mouse.ScrollEvent;
+import cc.noxiuam.titanic.event.impl.world.player.PlayerWorldChangeEvent;
+import net.minecraft.src.*;
 import org.lwjgl.LWJGLException;
 import org.lwjgl.input.Controllers;
 import org.lwjgl.input.Keyboard;
 import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.Display;
-import org.lwjgl.opengl.DisplayMode;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.util.glu.GLU;
 
-public abstract class Minecraft implements Runnable {
+import java.awt.*;
+import java.io.File;
+
+public abstract class Minecraft implements Runnable, MinecraftBridge {
+
+    public static long frameTimes[] = new long[512];
+    public static long tickTimes[] = new long[512];
+    public static int numRecordedFrameTimes = 0;
+    private static File minecraftDir = null;
     public PlayerController playerController;
-    private boolean a = false;
     public int displayWidth;
     public int displayHeight;
-    private OpenGlCapsChecker glCapabilities;
-    private Timer timer = new Timer(20.0F);
     public World theWorld;
     public RenderGlobal renderGlobal;
     public EntityPlayerSP thePlayer;
     public EffectRenderer effectRenderer;
-    public Session session = null;
+    public Session session;
     public String minecraftUri;
     public Canvas mcCanvas;
-    public boolean field_6317_l = true;
-    public volatile boolean isWorldLoaded = false;
+    public boolean field_6317_l;
+    public volatile boolean isWorldLoaded;
     public RenderEngine renderEngine;
     public FontRenderer fontRenderer;
-    public GuiScreen currentScreen = null;
-    public LoadingScreenRenderer loadingScreen = new LoadingScreenRenderer(this);
-    public EntityRenderer entityRenderer = new EntityRenderer(this);
-    private ThreadDownloadResources downloadResourcesThread;
-    private int ticksRan = 0;
-    private int field_6282_S = 0;
-    private int field_9236_T;
-    private int field_9235_U;
-    public String field_6310_s = null;
-    public int field_6309_t = 0;
+    public GuiScreen currentScreen;
+    public LoadingScreenRenderer loadingScreen;
+    public EntityRenderer entityRenderer;
+    public String field_6310_s;
+    public int field_6309_t;
     public GuiIngame ingameGUI;
-    public boolean field_6307_v = false;
-    public ModelBiped unusedModelBiped = new ModelBiped(0.0F);
-    public MovingObjectPosition objectMouseOver = null;
+    public boolean field_6307_v;
+    public ModelBiped unusedModelBiped;
+    public MovingObjectPosition objectMouseOver;
     public GameSettings gameSettings;
-    protected MinecraftApplet mcApplet;
-    public SoundManager sndManager = new SoundManager();
+    public SoundManager sndManager;
     public MouseHelper mouseHelper;
     public TexturePackList texturePackList;
     public File mcDataDir;
-    public static long[] frameTimes = new long[512];
-    public static long[] tickTimes = new long[512];
-    public static int numRecordedFrameTimes = 0;
+    public volatile boolean running;
+    public String debug;
+    public boolean field_6289_L;
+    public boolean isFancyGraphics;
+    protected MinecraftApplet mcApplet;
+    public boolean isTakingScreenshot;
+    long prevFrameTime;
+    long systemTime;
+    private boolean mainFrame;
+    private OpenGlCapsChecker glCapabilities;
+    private Timer timer;
+    private ThreadDownloadResources downloadResourcesThread;
+    private int ticksRan;
+    private int field_6282_S;
+    private int field_9236_T;
+    private int field_9235_U;
     private String serverName;
     private int serverPort;
-    private TextureWaterFX textureWaterFX = new TextureWaterFX();
-    private TextureLavaFX textureLavaFX = new TextureLavaFX();
-    private static File minecraftDir = null;
-    public volatile boolean running = true;
-    public String debug = "";
-    boolean isTakingScreenshot = false;
-    long prevFrameTime = -1L;
-    public boolean field_6289_L = false;
-    private int field_6302_aa = 0;
-    public boolean isFancyGraphics = false;
-    long systemTime = System.currentTimeMillis();
-    private int field_6300_ab = 0;
-
-    public Minecraft(Component var1, Canvas var2, MinecraftApplet var3, int var4, int var5, boolean var6) {
-        this.field_9235_U = var5;
-        this.a = var6;
-        this.mcApplet = var3;
+    private TextureWaterFX textureWaterFX;
+    private TextureLavaFX textureLavaFX;
+    private int field_6302_aa;
+    private int field_6300_ab;
+    public Minecraft(Component component, Canvas canvas, MinecraftApplet minecraftapplet, int i, int j, boolean flag) {
+        mainFrame = false;
+        timer = new Timer(20F);
+        session = null;
+        field_6317_l = true;
+        isWorldLoaded = false;
+        currentScreen = null;
+        loadingScreen = new LoadingScreenRenderer(this);
+        entityRenderer = new EntityRenderer(this);
+        ticksRan = 0;
+        field_6282_S = 0;
+        field_6310_s = null;
+        field_6309_t = 0;
+        field_6307_v = false;
+        unusedModelBiped = new ModelBiped(0.0F);
+        objectMouseOver = null;
+        sndManager = new SoundManager();
+        textureWaterFX = new TextureWaterFX();
+        textureLavaFX = new TextureLavaFX();
+        running = true;
+        debug = "";
+        isTakingScreenshot = false;
+        prevFrameTime = -1L;
+        field_6289_L = false;
+        field_6302_aa = 0;
+        isFancyGraphics = false;
+        systemTime = System.currentTimeMillis();
+        field_6300_ab = 0;
+        field_9235_U = j;
+        mainFrame = flag;
+        mcApplet = minecraftapplet;
         new ThreadSleepForever(this, "Timer hack thread");
-        this.mcCanvas = var2;
-        this.displayWidth = var4;
-        this.displayHeight = var5;
-        this.a = var6;
-    }
-
-    public abstract void displayUnexpectedThrowable(UnexpectedThrowable var1);
-
-    public void setServer(String var1, int var2) {
-        this.serverName = var1;
-        this.serverPort = var2;
+        mcCanvas = canvas;
+        displayWidth = i;
+        displayHeight = j;
+        mainFrame = flag;
+    }
+
+    public static File getMinecraftDir() {
+        if (minecraftDir == null) {
+            minecraftDir = getAppDir("minecraft");
+        }
+        return minecraftDir;
+    }
+
+    public static File getAppDir(String s) {
+        String s1 = System.getProperty("user.home", ".");
+        File file;
+        switch (EnumOSMappingHelper.field_1585_a[getOs().ordinal()]) {
+            case 1: // '\001'
+            case 2: // '\002'
+                file = new File(s1, (new StringBuilder()).append('.').append(s).append('/').toString());
+                break;
+
+            case 3: // '\003'
+                String s2 = System.getenv("APPDATA");
+                if (s2 != null) {
+                    file = new File(s2, (new StringBuilder()).append(".").append(s).append('/').toString());
+                } else {
+                    file = new File(s1, (new StringBuilder()).append('.').append(s).append('/').toString());
+                }
+                break;
+
+            case 4: // '\004'
+                file = new File(s1, (new StringBuilder()).append("Library/Application Support/").append(s).toString());
+                break;
+
+            default:
+                file = new File(s1, (new StringBuilder()).append(s).append('/').toString());
+                break;
+        }
+        if (!file.exists() && !file.mkdirs()) {
+            throw new RuntimeException((new StringBuilder()).append("The working directory could not be created: ").append(file).toString());
+        } else {
+            return file;
+        }
+    }
+
+    private static EnumOS2 getOs() {
+        String s = System.getProperty("os.name").toLowerCase();
+        if (s.contains("win")) {
+            return EnumOS2.windows;
+        }
+        if (s.contains("mac")) {
+            return EnumOS2.macos;
+        }
+        if (s.contains("solaris")) {
+            return EnumOS2.solaris;
+        }
+        if (s.contains("sunos")) {
+            return EnumOS2.solaris;
+        }
+        if (s.contains("linux")) {
+            return EnumOS2.linux;
+        }
+        if (s.contains("unix")) {
+            return EnumOS2.linux;
+        } else {
+            return EnumOS2.unknown;
+        }
+    }
+
+    public static void func_6269_a(String s, String s1) {
+        startMainThread(s, s1, null);
+    }
+
+    public static void startMainThread(String s, String s1, String s2) {
+        boolean flag = false;
+        String s3 = s;
+        Frame frame = new Frame("Minecraft");
+        Canvas canvas = new Canvas();
+        frame.setLayout(new BorderLayout());
+        frame.add(canvas, "Center");
+        canvas.setPreferredSize(new Dimension(854, 480));
+        frame.pack();
+        frame.setLocationRelativeTo(null);
+        MinecraftImpl minecraftimpl = new MinecraftImpl(frame, canvas, null, 854, 480, flag, frame);
+        Thread thread = new Thread(minecraftimpl, "Minecraft main thread");
+        thread.setPriority(10);
+        minecraftimpl.minecraftUri = "www.minecraft.net";
+        if (s3 != null && s1 != null) {
+            minecraftimpl.session = new Session(s3, s1);
+        } else {
+            minecraftimpl.session = new Session((new StringBuilder()).append("Player").append(System.currentTimeMillis() % 1000L).toString(), "");
+        }
+        if (s2 != null) {
+            String as[] = s2.split(":");
+            minecraftimpl.setServer(as[0], Integer.parseInt(as[1]));
+        }
+        frame.setVisible(true);
+        frame.addWindowListener(new GameWindowListener(minecraftimpl, thread));
+        thread.start();
+    }
+
+    public static void main(String args[]) {
+        String s = (new StringBuilder()).append("Player").append(System.currentTimeMillis() % 1000L).toString();
+        if (args.length > 0) {
+            s = args[0];
+        }
+        String s1 = "-";
+        if (args.length > 1) {
+            s1 = args[1];
+        }
+        func_6269_a(s, s1);
+    }
+
+    public abstract void displayUnexpectedThrowable(UnexpectedThrowable unexpectedthrowable);
+
+    public void setServer(String s, int i) {
+        serverName = s;
+        serverPort = i;
     }
 
     public void startGame() throws LWJGLException {
-        if(this.mcCanvas != null) {
-            Graphics var1 = this.mcCanvas.getGraphics();
-            if(var1 != null) {
-                var1.setColor(Color.BLACK);
-                var1.fillRect(0, 0, this.displayWidth, this.displayHeight);
-                var1.dispose();
+        if (mcCanvas != null) {
+            Graphics g = mcCanvas.getGraphics();
+            if (g != null) {
+                g.setColor(Color.BLACK);
+                g.fillRect(0, 0, displayWidth, displayHeight);
+                g.dispose();
             }
-
-            Display.setParent(this.mcCanvas);
-        } else if(this.a) {
+            Display.setParent(mcCanvas);
+        } else if (mainFrame) {
             Display.setFullscreen(true);
-            this.displayWidth = Display.getDisplayMode().getWidth();
-            this.displayHeight = Display.getDisplayMode().getHeight();
-            if(this.displayWidth <= 0) {
-                this.displayWidth = 1;
+            displayWidth = Display.getDisplayMode().getWidth();
+            displayHeight = Display.getDisplayMode().getHeight();
+            if (displayWidth <= 0) {
+                displayWidth = 1;
             }
-
-            if(this.displayHeight <= 0) {
-                this.displayHeight = 1;
+            if (displayHeight <= 0) {
+                displayHeight = 1;
             }
         } else {
-            Display.setDisplayMode(new DisplayMode(this.displayWidth, this.displayHeight));
+            Display.setDisplayMode(new org.lwjgl.opengl.DisplayMode(displayWidth, displayHeight));
         }
-
         Display.setTitle("Minecraft Minecraft Beta 1.1_02");
-
         try {
             Display.create();
-        } catch (LWJGLException var6) {
-            var6.printStackTrace();
-
+        } catch (LWJGLException lwjglexception) {
+            lwjglexception.printStackTrace();
             try {
                 Thread.sleep(1000L);
-            } catch (InterruptedException var5) {
+            } catch (InterruptedException interruptedexception) {
             }
-
             Display.create();
         }
-
         RenderManager.instance.field_4236_f = new ItemRenderer(this);
-        this.mcDataDir = getMinecraftDir();
-        this.gameSettings = new GameSettings(this, this.mcDataDir);
-        this.texturePackList = new TexturePackList(this, this.mcDataDir);
-        this.renderEngine = new RenderEngine(this.texturePackList, this.gameSettings);
-        this.fontRenderer = new FontRenderer(this.gameSettings, "/font/default.png", this.renderEngine);
-        this.loadScreen();
+        mcDataDir = getMinecraftDir();
+        gameSettings = new GameSettings(this, mcDataDir);
+        texturePackList = new TexturePackList(this, mcDataDir);
+        renderEngine = new RenderEngine(texturePackList, gameSettings);
+        fontRenderer = new FontRenderer(gameSettings, "/font/default.png", renderEngine);
+        loadScreen();
         Keyboard.create();
         Mouse.create();
-        this.mouseHelper = new MouseHelper(this.mcCanvas);
-
+        mouseHelper = new MouseHelper(mcCanvas);
         try {
             Controllers.create();
-        } catch (Exception var4) {
-            var4.printStackTrace();
+        } catch (Exception exception) {
+            //exception.printStackTrace();
         }
-
-        this.checkGLError("Pre startup");
-        GL11.glEnable(GL11.GL_TEXTURE_2D);
-        GL11.glShadeModel(GL11.GL_SMOOTH);
+        new Titanic(this);
+        checkGLError("Pre startup");
+        GL11.glEnable(3553);
+        GL11.glShadeModel(7425);
         GL11.glClearDepth(1.0D);
-        GL11.glEnable(GL11.GL_DEPTH_TEST);
-        GL11.glDepthFunc(GL11.GL_LEQUAL);
-        GL11.glEnable(GL11.GL_ALPHA_TEST);
-        GL11.glAlphaFunc(GL11.GL_GREATER, 0.1F);
-        GL11.glCullFace(GL11.GL_BACK);
-        GL11.glMatrixMode(GL11.GL_PROJECTION);
+        GL11.glEnable(2929);
+        GL11.glDepthFunc(515);
+        GL11.glEnable(3008);
+        GL11.glAlphaFunc(516, 0.1F);
+        GL11.glCullFace(1029);
+        GL11.glMatrixMode(5889);
         GL11.glLoadIdentity();
-        GL11.glMatrixMode(GL11.GL_MODELVIEW);
-        this.checkGLError("Startup");
-        this.glCapabilities = new OpenGlCapsChecker();
-        this.sndManager.loadSoundSettings(this.gameSettings);
-        this.renderEngine.registerTextureFX(this.textureLavaFX);
-        this.renderEngine.registerTextureFX(this.textureWaterFX);
-        this.renderEngine.registerTextureFX(new TexturePortalFX());
-        this.renderEngine.registerTextureFX(new TextureCompassFX(this));
-        this.renderEngine.registerTextureFX(new TextureWatchFX(this));
-        this.renderEngine.registerTextureFX(new TexureWaterFlowFX());
-        this.renderEngine.registerTextureFX(new TextureLavaFlowFX());
-        this.renderEngine.registerTextureFX(new TextureFlamesFX(0));
-        this.renderEngine.registerTextureFX(new TextureFlamesFX(1));
-        this.renderGlobal = new RenderGlobal(this, this.renderEngine);
-        GL11.glViewport(0, 0, this.displayWidth, this.displayHeight);
-        this.effectRenderer = new EffectRenderer(this.theWorld, this.renderEngine);
-
+        GL11.glMatrixMode(5888);
+        checkGLError("Startup");
+        glCapabilities = new OpenGlCapsChecker();
+        sndManager.loadSoundSettings(gameSettings);
+        renderEngine.registerTextureFX(textureLavaFX);
+        renderEngine.registerTextureFX(textureWaterFX);
+        renderEngine.registerTextureFX(new TexturePortalFX());
+        renderEngine.registerTextureFX(new TextureCompassFX(this));
+        renderEngine.registerTextureFX(new TextureWatchFX(this));
+        renderEngine.registerTextureFX(new TexureWaterFlowFX());
+        renderEngine.registerTextureFX(new TextureLavaFlowFX());
+        renderEngine.registerTextureFX(new TextureFlamesFX(0));
+        renderEngine.registerTextureFX(new TextureFlamesFX(1));
+        renderGlobal = new RenderGlobal(this, renderEngine);
+        GL11.glViewport(0, 0, displayWidth, displayHeight);
+        effectRenderer = new EffectRenderer(theWorld, renderEngine);
         try {
-            this.downloadResourcesThread = new ThreadDownloadResources(this.mcDataDir, this);
-            this.downloadResourcesThread.start();
-        } catch (Exception var3) {
+            downloadResourcesThread = new ThreadDownloadResources(mcDataDir, this);
+            downloadResourcesThread.start();
+        } catch (Exception exception1) {
         }
-
-        this.checkGLError("Post startup");
-        this.ingameGUI = new GuiIngame(this);
-        if(this.serverName != null) {
-            this.displayGuiScreen(new GuiConnecting(this, this.serverName, this.serverPort));
+        checkGLError("Post startup");
+        ingameGUI = new GuiIngame(this);
+        if (serverName != null) {
+            displayGuiScreen(new GuiConnecting(this, serverName, serverPort));
         } else {
-            this.displayGuiScreen(new GuiMainMenu());
+            displayGuiScreen(new GuiMainMenu());
         }
-
     }
 
     private void loadScreen() throws LWJGLException {
-        ScaledResolution var1 = new ScaledResolution(this.displayWidth, this.displayHeight);
-        int var2 = var1.getScaledWidth();
-        int var3 = var1.getScaledHeight();
-        GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT | GL11.GL_COLOR_BUFFER_BIT);
-        GL11.glMatrixMode(GL11.GL_PROJECTION);
-        GL11.glLoadIdentity();
-        GL11.glOrtho(0.0D, (double)var2, (double)var3, 0.0D, 1000.0D, 3000.0D);
-        GL11.glMatrixMode(GL11.GL_MODELVIEW);
-        GL11.glLoadIdentity();
-        GL11.glTranslatef(0.0F, 0.0F, -2000.0F);
-        GL11.glViewport(0, 0, this.displayWidth, this.displayHeight);
+        ScaledResolution scaledresolution = new ScaledResolution(displayWidth, displayHeight);
+        int i = scaledresolution.getScaledWidth();
+        int j = scaledresolution.getScaledHeight();
+        GL11.glClear(16640);
+        GL11.glMatrixMode(5889);
+        GL11.glLoadIdentity();
+        GL11.glOrtho(0.0D, i, j, 0.0D, 1000D, 3000D);
+        GL11.glMatrixMode(5888);
+        GL11.glLoadIdentity();
+        GL11.glTranslatef(0.0F, 0.0F, -2000F);
+        GL11.glViewport(0, 0, displayWidth, displayHeight);
         GL11.glClearColor(0.0F, 0.0F, 0.0F, 0.0F);
-        Tessellator var4 = Tessellator.instance;
-        GL11.glDisable(GL11.GL_LIGHTING);
-        GL11.glEnable(GL11.GL_TEXTURE_2D);
-        GL11.glDisable(GL11.GL_FOG);
-        GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/title/mojang.png"));
-        var4.startDrawingQuads();
-        var4.setColorOpaque_I(16777215);
-        var4.addVertexWithUV(0.0D, (double)this.displayHeight, 0.0D, 0.0D, 0.0D);
-        var4.addVertexWithUV((double)this.displayWidth, (double)this.displayHeight, 0.0D, 0.0D, 0.0D);
-        var4.addVertexWithUV((double)this.displayWidth, 0.0D, 0.0D, 0.0D, 0.0D);
-        var4.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
-        var4.draw();
-        short var5 = 256;
-        short var6 = 256;
+        Tessellator tessellator = Tessellator.instance;
+        GL11.glDisable(2896);
+        GL11.glEnable(3553);
+        GL11.glDisable(2912);
+        GL11.glBindTexture(3553, renderEngine.getTexture("/title/mojang.png"));
+        tessellator.startDrawingQuads();
+        tessellator.setColorOpaque_I(0xffffff);
+        tessellator.addVertexWithUV(0.0D, displayHeight, 0.0D, 0.0D, 0.0D);
+        tessellator.addVertexWithUV(displayWidth, displayHeight, 0.0D, 0.0D, 0.0D);
+        tessellator.addVertexWithUV(displayWidth, 0.0D, 0.0D, 0.0D, 0.0D);
+        tessellator.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
+        tessellator.draw();
+        char c = '\u0100';
+        char c1 = '\u0100';
         GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-        var4.setColorOpaque_I(16777215);
-        this.func_6274_a((this.displayWidth / 2 - var5) / 2, (this.displayHeight / 2 - var6) / 2, 0, 0, var5, var6);
-        GL11.glDisable(GL11.GL_LIGHTING);
-        GL11.glDisable(GL11.GL_FOG);
-        GL11.glEnable(GL11.GL_ALPHA_TEST);
-        GL11.glAlphaFunc(GL11.GL_GREATER, 0.1F);
+        tessellator.setColorOpaque_I(0xffffff);
+        func_6274_a((displayWidth / 2 - c) / 2, (displayHeight / 2 - c1) / 2, 0, 0, c, c1);
+        GL11.glDisable(2896);
+        GL11.glDisable(2912);
+        GL11.glEnable(3008);
+        GL11.glAlphaFunc(516, 0.1F);
         Display.swapBuffers();
     }
 
-    public void func_6274_a(int var1, int var2, int var3, int var4, int var5, int var6) {
-        float var7 = 0.00390625F;
-        float var8 = 0.00390625F;
-        Tessellator var9 = Tessellator.instance;
-        var9.startDrawingQuads();
-        var9.addVertexWithUV((double)(var1 + 0), (double)(var2 + var6), 0.0D, (double)((float)(var3 + 0) * var7), (double)((float)(var4 + var6) * var8));
-        var9.addVertexWithUV((double)(var1 + var5), (double)(var2 + var6), 0.0D, (double)((float)(var3 + var5) * var7), (double)((float)(var4 + var6) * var8));
-        var9.addVertexWithUV((double)(var1 + var5), (double)(var2 + 0), 0.0D, (double)((float)(var3 + var5) * var7), (double)((float)(var4 + 0) * var8));
-        var9.addVertexWithUV((double)(var1 + 0), (double)(var2 + 0), 0.0D, (double)((float)(var3 + 0) * var7), (double)((float)(var4 + 0) * var8));
-        var9.draw();
-    }
-
-    public static File getMinecraftDir() {
-        if(minecraftDir == null) {
-            minecraftDir = getAppDir("minecraft");
-        }
-
-        return minecraftDir;
-    }
-
-    public static File getAppDir(String var0) {
-        String var1 = System.getProperty("user.home", ".");
-        File var2;
-        switch(EnumOSMappingHelper.field_1585_a[getOs().ordinal()]) {
-        case 1:
-        case 2:
-            var2 = new File(var1, '.' + var0 + '/');
-            break;
-        case 3:
-            String var3 = System.getenv("APPDATA");
-            if(var3 != null) {
-                var2 = new File(var3, "." + var0 + '/');
-            } else {
-                var2 = new File(var1, '.' + var0 + '/');
-            }
-            break;
-        case 4:
-            var2 = new File(var1, "Library/Application Support/" + var0);
-            break;
-        default:
-            var2 = new File(var1, var0 + '/');
-        }
-
-        if(!var2.exists() && !var2.mkdirs()) {
-            throw new RuntimeException("The working directory could not be created: " + var2);
+    public void func_6274_a(int i, int j, int k, int l, int i1, int j1) {
+        float f = 0.00390625F;
+        float f1 = 0.00390625F;
+        Tessellator tessellator = Tessellator.instance;
+        tessellator.startDrawingQuads();
+        tessellator.addVertexWithUV(i + 0, j + j1, 0.0D, (float) (k + 0) * f, (float) (l + j1) * f1);
+        tessellator.addVertexWithUV(i + i1, j + j1, 0.0D, (float) (k + i1) * f, (float) (l + j1) * f1);
+        tessellator.addVertexWithUV(i + i1, j + 0, 0.0D, (float) (k + i1) * f, (float) (l + 0) * f1);
+        tessellator.addVertexWithUV(i + 0, j + 0, 0.0D, (float) (k + 0) * f, (float) (l + 0) * f1);
+        tessellator.draw();
+    }
+
+    public void displayGuiScreen(GuiScreen guiscreen) {
+        if (currentScreen instanceof GuiUnused) {
+            return;
+        }
+        if (currentScreen != null) {
+            currentScreen.onGuiClosed();
+        }
+        if (guiscreen == null && theWorld == null) {
+            guiscreen = new GuiMainMenu();
+        } else if (guiscreen == null && thePlayer.health <= 0) {
+            guiscreen = new GuiGameOver();
+        }
+        currentScreen = guiscreen;
+        if (guiscreen != null) {
+            func_6273_f();
+            ScaledResolution scaledresolution = new ScaledResolution(displayWidth, displayHeight);
+            int i = scaledresolution.getScaledWidth();
+            int j = scaledresolution.getScaledHeight();
+            guiscreen.setWorldAndResolution(this, i, j);
+            field_6307_v = false;
         } else {
-            return var2;
-        }
-    }
-
-    private static EnumOS2 getOs() {
-        String var0 = System.getProperty("os.name").toLowerCase();
-        return var0.contains("win") ? EnumOS2.c : (var0.contains("mac") ? EnumOS2.d : (var0.contains("solaris") ? EnumOS2.b : (var0.contains("sunos") ? EnumOS2.b : (var0.contains("linux") ? EnumOS2.a : (var0.contains("unix") ? EnumOS2.a : EnumOS2.e)))));
-    }
-
-    public void displayGuiScreen(GuiScreen var1) {
-        if(!(this.currentScreen instanceof GuiUnused)) {
-            if(this.currentScreen != null) {
-                this.currentScreen.onGuiClosed();
-            }
-
-            if(var1 == null && this.theWorld == null) {
-                var1 = new GuiMainMenu();
-            } else if(var1 == null && this.thePlayer.health <= 0) {
-                var1 = new GuiGameOver();
-            }
-
-            this.currentScreen = (GuiScreen)var1;
-            if(var1 != null) {
-                this.func_6273_f();
-                ScaledResolution var2 = new ScaledResolution(this.displayWidth, this.displayHeight);
-                int var3 = var2.getScaledWidth();
-                int var4 = var2.getScaledHeight();
-                ((GuiScreen)var1).setWorldAndResolution(this, var3, var4);
-                this.field_6307_v = false;
-            } else {
-                this.func_6259_e();
-            }
-
-        }
-    }
-
-    private void checkGLError(String var1) {
-        int var2 = GL11.glGetError();
-        if(var2 != 0) {
-            String var3 = GLU.gluErrorString(var2);
+            func_6259_e();
+        }
+    }
+
+    private void checkGLError(String s) {
+        int i = GL11.glGetError();
+        if (i != 0) {
+            String s1 = GLU.gluErrorString(i);
             System.out.println("########## GL ERROR ##########");
-            System.out.println("@ " + var1);
-            System.out.println(var2 + ": " + var3);
+            System.out.println((new StringBuilder()).append("@ ").append(s).toString());
+            System.out.println((new StringBuilder()).append(i).append(": ").append(s1).toString());
             System.exit(0);
         }
-
     }
 
     public void shutdownMinecraftApplet() {
-        if(this.mcApplet != null) {
-            this.mcApplet.clearApplet();
+        if (mcApplet != null) {
+            mcApplet.clearApplet();
         }
-
         try {
-            if(this.downloadResourcesThread != null) {
-                this.downloadResourcesThread.closeMinecraft();
+            if (downloadResourcesThread != null) {
+                downloadResourcesThread.closeMinecraft();
             }
-        } catch (Exception var8) {
+        } catch (Exception exception) {
         }
-
         try {
             System.out.println("Stopping!");
-            this.func_6261_a((World)null);
-
+            func_6261_a(null);
             try {
                 GLAllocation.deleteTexturesAndDisplayLists();
-            } catch (Exception var6) {
+            } catch (Exception exception1) {
             }
-
-            this.sndManager.closeMinecraft();
+            sndManager.closeMinecraft();
             Mouse.destroy();
             Keyboard.destroy();
         } finally {
             Display.destroy();
         }
-
         System.gc();
     }
 
     public void run() {
-        this.running = true;
-
+        running = true;
         try {
-            this.startGame();
-        } catch (Exception var15) {
-            var15.printStackTrace();
-            this.displayUnexpectedThrowable(new UnexpectedThrowable("Failed to start game", var15));
+            startGame();
+        } catch (Exception exception) {
+            exception.printStackTrace();
+            displayUnexpectedThrowable(new UnexpectedThrowable("Failed to start game", exception));
             return;
         }
-
         try {
-            try {
-                long var1 = System.currentTimeMillis();
-                int var3 = 0;
-
-                while(this.running && (this.mcApplet == null || this.mcApplet.isActive())) {
-                    AxisAlignedBB.clearBoundingBoxPool();
-                    Vec3D.initialize();
-                    if(this.mcCanvas == null && Display.isCloseRequested()) {
-                        this.shutdown();
-                    }
-
-                    if(this.isWorldLoaded && this.theWorld != null) {
-                        float var4 = this.timer.renderPartialTicks;
-                        this.timer.updateTimer();
-                        this.timer.renderPartialTicks = var4;
-                    } else {
-                        this.timer.updateTimer();
-                    }
-
-                    long var19 = System.nanoTime();
-
-                    for(int var6 = 0; var6 < this.timer.elapsedTicks; ++var6) {
-                        ++this.ticksRan;
-
-                        try {
-                            this.runTick();
-                        } catch (MinecraftException var14) {
-                            this.theWorld = null;
-                            this.func_6261_a((World)null);
-                            this.displayGuiScreen(new GuiConflictWarning());
-                        }
-                    }
-
-                    long var20 = System.nanoTime() - var19;
-                    this.checkGLError("Pre render");
-                    this.sndManager.func_338_a(this.thePlayer, this.timer.renderPartialTicks);
-                    GL11.glEnable(GL11.GL_TEXTURE_2D);
-                    if(this.theWorld != null && !this.theWorld.multiplayerWorld) {
-                        while(this.theWorld.func_6465_g()) {
-                        }
-                    }
-
-                    if(this.theWorld != null && this.theWorld.multiplayerWorld) {
-                        this.theWorld.func_6465_g();
-                    }
-
-                    if(this.gameSettings.limitFramerate) {
-                        Thread.sleep(5L);
-                    }
-
-                    if(!Keyboard.isKeyDown(Keyboard.KEY_F7)) {
-                        Display.update();
-                    }
-
-                    if(!this.field_6307_v) {
-                        if(this.playerController != null) {
-                            this.playerController.setPartialTime(this.timer.renderPartialTicks);
-                        }
-
-                        this.entityRenderer.func_4136_b(this.timer.renderPartialTicks);
-                    }
-
-                    if(!Display.isActive()) {
-                        if(this.a) {
-                            this.toggleFullscreen();
-                        }
-
-                        Thread.sleep(10L);
-                    }
-
-                    if(Keyboard.isKeyDown(Keyboard.KEY_F3)) {
-                        this.displayDebugInfo(var20);
-                    } else {
-                        this.prevFrameTime = System.nanoTime();
-                    }
-
-                    Thread.yield();
-                    if(Keyboard.isKeyDown(Keyboard.KEY_F7)) {
-                        Display.update();
-                    }
-
-                    this.screenshotListener();
-                    if(this.mcCanvas != null && !this.a && (this.mcCanvas.getWidth() != this.displayWidth || this.mcCanvas.getHeight() != this.displayHeight)) {
-                        this.displayWidth = this.mcCanvas.getWidth();
-                        this.displayHeight = this.mcCanvas.getHeight();
-                        if(this.displayWidth <= 0) {
-                            this.displayWidth = 1;
-                        }
-
-                        if(this.displayHeight <= 0) {
-                            this.displayHeight = 1;
-                        }
-
-                        this.resize(this.displayWidth, this.displayHeight);
-                    }
-
-                    this.checkGLError("Post render");
-                    ++var3;
-
-                    for(this.isWorldLoaded = !this.isMultiplayerWorld() && this.currentScreen != null && this.currentScreen.doesGuiPauseGame(); System.currentTimeMillis() >= var1 + 1000L; var3 = 0) {
-                        this.debug = var3 + " fps, " + WorldRenderer.chunksUpdated + " chunk updates";
-                        WorldRenderer.chunksUpdated = 0;
-                        var1 += 1000L;
-                    }
-                }
-            } catch (MinecraftError var16) {
-            } catch (Throwable var17) {
-                this.theWorld = null;
-                var17.printStackTrace();
-                this.displayUnexpectedThrowable(new UnexpectedThrowable("Unexpected error", var17));
+            long l = System.currentTimeMillis();
+            int i = 0;
+            while (running && (mcApplet == null || mcApplet.isActive())) {
+                AxisAlignedBB.clearBoundingBoxPool();
+                Vec3D.initialize();
+                if (mcCanvas == null && Display.isCloseRequested()) {
+                    shutdown();
+                }
+                if (isWorldLoaded && theWorld != null) {
+                    float f = timer.renderPartialTicks;
+                    timer.updateTimer();
+                    timer.renderPartialTicks = f;
+                } else {
+                    timer.updateTimer();
+                }
+                long l1 = System.nanoTime();
+                for (int j = 0; j < timer.elapsedTicks; j++) {
+                    ticksRan++;
+                    try {
+                        runTick();
+                        continue;
+                    } catch (MinecraftException minecraftexception) {
+                        theWorld = null;
+                    }
+                    func_6261_a(null);
+                    displayGuiScreen(new GuiConflictWarning());
+                }
+
+                long l2 = System.nanoTime() - l1;
+                checkGLError("Pre render");
+                sndManager.func_338_a(thePlayer, timer.renderPartialTicks);
+                GL11.glEnable(3553);
+                if (theWorld != null && !theWorld.multiplayerWorld) {
+                    while (theWorld.func_6465_g()) ;
+                }
+                if (theWorld != null && theWorld.multiplayerWorld) {
+                    theWorld.func_6465_g();
+                }
+                if (gameSettings.limitFramerate) {
+                    Thread.sleep(5L);
+                }
+                if (!Keyboard.isKeyDown(65)) {
+                    Display.update();
+                }
+                if (!field_6307_v) {
+                    if (playerController != null) {
+                        playerController.setPartialTime(timer.renderPartialTicks);
+                    }
+                    entityRenderer.func_4136_b(timer.renderPartialTicks);
+                }
+                if (!Display.isActive()) {
+                    if (mainFrame) {
+                        toggleFullscreen();
+                    }
+                    Thread.sleep(10L);
+                }
+
+                DebugDrawEvent debugDrawEvent = new DebugDrawEvent();
+                Ref.getEventManager().handleEvent(debugDrawEvent);
+
+                if (Keyboard.isKeyDown(61) || debugDrawEvent.isCancelled()) {
+                    displayDebugInfo(l2);
+                } else {
+                    prevFrameTime = System.nanoTime();
+                }
+                Thread.yield();
+                if (Keyboard.isKeyDown(65)) {
+                    Display.update();
+                }
+
+                if (!Ref.getModuleManager().getScreenshotModule().enabled()) {
+                    screenshotListener();
+                }
+
+                if (mcCanvas != null && !mainFrame && (mcCanvas.getWidth() != displayWidth || mcCanvas.getHeight() != displayHeight)) {
+                    displayWidth = mcCanvas.getWidth();
+                    displayHeight = mcCanvas.getHeight();
+                    if (displayWidth <= 0) {
+                        displayWidth = 1;
+                    }
+                    if (displayHeight <= 0) {
+                        displayHeight = 1;
+                    }
+                    resize(displayWidth, displayHeight);
+                }
+                checkGLError("Post render");
+                i++;
+                isWorldLoaded = !isMultiplayerWorld() && currentScreen != null && currentScreen.doesGuiPauseGame();
+                while (System.currentTimeMillis() >= l + 1000L) {
+                    debug = (new StringBuilder()).append(i).append(" fps, ").append(WorldRenderer.chunksUpdated).append(" chunk updates").toString();
+                    WorldRenderer.chunksUpdated = 0;
+                    l += 1000L;
+                    i = 0;
+                }
             }
-
+        } catch (MinecraftError minecrafterror) {
+        } catch (Throwable throwable) {
+            theWorld = null;
+            throwable.printStackTrace();
+            displayUnexpectedThrowable(new UnexpectedThrowable("Unexpected error", throwable));
         } finally {
         }
     }
 
     private void screenshotListener() {
-        if(Keyboard.isKeyDown(Keyboard.KEY_F2)) {
-            if(!this.isTakingScreenshot) {
-                if(Keyboard.isKeyDown(Keyboard.KEY_F1)) {
-                    this.ingameGUI.addChatMessage(ScreenShotHelper.saveScreenshot(minecraftDir, this.displayWidth, this.displayHeight));
+        if (Keyboard.isKeyDown(60)) {
+            if (!isTakingScreenshot) {
+                if (Keyboard.isKeyDown(59)) {
+                    ingameGUI.addChatMessage(ScreenShotHelper.saveScreenshot(minecraftDir, displayWidth, displayHeight));
                 }
-
-                this.isTakingScreenshot = true;
+                isTakingScreenshot = true;
             }
         } else {
-            this.isTakingScreenshot = false;
+            isTakingScreenshot = false;
         }
-
     }
 
-    private void displayDebugInfo(long var1) {
-        long var3 = 16666666L;
-        if(this.prevFrameTime == -1L) {
-            this.prevFrameTime = System.nanoTime();
+    private void displayDebugInfo(long l) {
+        long l1 = 0xfe502aL;
+        if (prevFrameTime == -1L) {
+            prevFrameTime = System.nanoTime();
         }
-
-        long var5 = System.nanoTime();
-        tickTimes[numRecordedFrameTimes & frameTimes.length - 1] = var1;
-        frameTimes[numRecordedFrameTimes++ & frameTimes.length - 1] = var5 - this.prevFrameTime;
-        this.prevFrameTime = var5;
-        GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
-        GL11.glMatrixMode(GL11.GL_PROJECTION);
-        GL11.glLoadIdentity();
-        GL11.glOrtho(0.0D, (double)this.displayWidth, (double)this.displayHeight, 0.0D, 1000.0D, 3000.0D);
-        GL11.glMatrixMode(GL11.GL_MODELVIEW);
-        GL11.glLoadIdentity();
-        GL11.glTranslatef(0.0F, 0.0F, -2000.0F);
+        long l2 = System.nanoTime();
+        tickTimes[numRecordedFrameTimes & frameTimes.length - 1] = l;
+        frameTimes[numRecordedFrameTimes++ & frameTimes.length - 1] = l2 - prevFrameTime;
+        prevFrameTime = l2;
+        GL11.glClear(256);
+        GL11.glMatrixMode(5889);
+        GL11.glLoadIdentity();
+        GL11.glOrtho(0.0D, displayWidth, displayHeight, 0.0D, 1000D, 3000D);
+        GL11.glMatrixMode(5888);
+        GL11.glLoadIdentity();
+        GL11.glTranslatef(0.0F, 0.0F, -2000F);
         GL11.glLineWidth(1.0F);
-        GL11.glDisable(GL11.GL_TEXTURE_2D);
-        Tessellator var7 = Tessellator.instance;
-        var7.startDrawing(7);
-        int var8 = (int)(var3 / 200000L);
-        var7.setColorOpaque_I(536870912);
-        var7.addVertex(0.0D, (double)(this.displayHeight - var8), 0.0D);
-        var7.addVertex(0.0D, (double)this.displayHeight, 0.0D);
-        var7.addVertex((double)frameTimes.length, (double)this.displayHeight, 0.0D);
-        var7.addVertex((double)frameTimes.length, (double)(this.displayHeight - var8), 0.0D);
-        var7.setColorOpaque_I(538968064);
-        var7.addVertex(0.0D, (double)(this.displayHeight - var8 * 2), 0.0D);
-        var7.addVertex(0.0D, (double)(this.displayHeight - var8), 0.0D);
-        var7.addVertex((double)frameTimes.length, (double)(this.displayHeight - var8), 0.0D);
-        var7.addVertex((double)frameTimes.length, (double)(this.displayHeight - var8 * 2), 0.0D);
-        var7.draw();
-        long var9 = 0L;
-
-        int var11;
-        for(var11 = 0; var11 < frameTimes.length; ++var11) {
-            var9 += frameTimes[var11];
+        GL11.glDisable(3553);
+        Tessellator tessellator = Tessellator.instance;
+        tessellator.startDrawing(7);
+        int i = (int) (l1 / 0x30d40L);
+        tessellator.setColorOpaque_I(0x20000000);
+        tessellator.addVertex(0.0D, displayHeight - i, 0.0D);
+        tessellator.addVertex(0.0D, displayHeight, 0.0D);
+        tessellator.addVertex(frameTimes.length, displayHeight, 0.0D);
+        tessellator.addVertex(frameTimes.length, displayHeight - i, 0.0D);
+        tessellator.setColorOpaque_I(0x20200000);
+        tessellator.addVertex(0.0D, displayHeight - i * 2, 0.0D);
+        tessellator.addVertex(0.0D, displayHeight - i, 0.0D);
+        tessellator.addVertex(frameTimes.length, displayHeight - i, 0.0D);
+        tessellator.addVertex(frameTimes.length, displayHeight - i * 2, 0.0D);
+        tessellator.draw();
+        long l3 = 0L;
+        for (int j = 0; j < frameTimes.length; j++) {
+            l3 += frameTimes[j];
         }
 
-        var11 = (int)(var9 / 200000L / (long)frameTimes.length);
-        var7.startDrawing(7);
-        var7.setColorOpaque_I(541065216);
-        var7.addVertex(0.0D, (double)(this.displayHeight - var11), 0.0D);
-        var7.addVertex(0.0D, (double)this.displayHeight, 0.0D);
-        var7.addVertex((double)frameTimes.length, (double)this.displayHeight, 0.0D);
-        var7.addVertex((double)frameTimes.length, (double)(this.displayHeight - var11), 0.0D);
-        var7.draw();
-        var7.startDrawing(1);
-
-        for(int var12 = 0; var12 < frameTimes.length; ++var12) {
-            int var13 = (var12 - numRecordedFrameTimes & frameTimes.length - 1) * 255 / frameTimes.length;
-            int var14 = var13 * var13 / 255;
-            var14 = var14 * var14 / 255;
-            int var15 = var14 * var14 / 255;
-            var15 = var15 * var15 / 255;
-            if(frameTimes[var12] > var3) {
-                var7.setColorOpaque_I(-16777216 + var14 * 65536);
+        int k = (int) (l3 / 0x30d40L / (long) frameTimes.length);
+        tessellator.startDrawing(7);
+        tessellator.setColorOpaque_I(0x20400000);
+        tessellator.addVertex(0.0D, displayHeight - k, 0.0D);
+        tessellator.addVertex(0.0D, displayHeight, 0.0D);
+        tessellator.addVertex(frameTimes.length, displayHeight, 0.0D);
+        tessellator.addVertex(frameTimes.length, displayHeight - k, 0.0D);
+        tessellator.draw();
+        tessellator.startDrawing(1);
+        for (int i1 = 0; i1 < frameTimes.length; i1++) {
+            int j1 = ((i1 - numRecordedFrameTimes & frameTimes.length - 1) * 255) / frameTimes.length;
+            int k1 = (j1 * j1) / 255;
+            k1 = (k1 * k1) / 255;
+            int i2 = (k1 * k1) / 255;
+            i2 = (i2 * i2) / 255;
+            if (frameTimes[i1] > l1) {
+                tessellator.setColorOpaque_I(0xff000000 + k1 * 0x10000);
             } else {
-                var7.setColorOpaque_I(-16777216 + var14 * 256);
+                tessellator.setColorOpaque_I(0xff000000 + k1 * 256);
             }
-
-            long var16 = frameTimes[var12] / 200000L;
-            long var18 = tickTimes[var12] / 200000L;
-            var7.addVertex((double)((float)var12 + 0.5F), (double)((float)((long)this.displayHeight - var16) + 0.5F), 0.0D);
-            var7.addVertex((double)((float)var12 + 0.5F), (double)((float)this.displayHeight + 0.5F), 0.0D);
-            var7.setColorOpaque_I(-16777216 + var14 * 65536 + var14 * 256 + var14 * 1);
-            var7.addVertex((double)((float)var12 + 0.5F), (double)((float)((long)this.displayHeight - var16) + 0.5F), 0.0D);
-            var7.addVertex((double)((float)var12 + 0.5F), (double)((float)((long)this.displayHeight - (var16 - var18)) + 0.5F), 0.0D);
+            long l4 = frameTimes[i1] / 0x30d40L;
+            long l5 = tickTimes[i1] / 0x30d40L;
+            tessellator.addVertex((float) i1 + 0.5F, (float) ((long) displayHeight - l4) + 0.5F, 0.0D);
+            tessellator.addVertex((float) i1 + 0.5F, (float) displayHeight + 0.5F, 0.0D);
+            tessellator.setColorOpaque_I(0xff000000 + k1 * 0x10000 + k1 * 256 + k1 * 1);
+            tessellator.addVertex((float) i1 + 0.5F, (float) ((long) displayHeight - l4) + 0.5F, 0.0D);
+            tessellator.addVertex((float) i1 + 0.5F, (float) ((long) displayHeight - (l4 - l5)) + 0.5F, 0.0D);
         }
 
-        var7.draw();
-        GL11.glEnable(GL11.GL_TEXTURE_2D);
+        tessellator.draw();
+        GL11.glEnable(3553);
     }
 
     public void shutdown() {
-        this.running = false;
+        running = false;
     }
 
     public void func_6259_e() {
-        if(Display.isActive()) {
-            if(!this.field_6289_L) {
-                this.field_6289_L = true;
-                this.mouseHelper.func_774_a();
-                this.displayGuiScreen((GuiScreen)null);
-                this.field_6302_aa = this.ticksRan + 10000;
-            }
+        if (!Display.isActive()) {
+            return;
+        }
+        if (field_6289_L) {
+            return;
+        } else {
+            field_6289_L = true;
+            mouseHelper.func_774_a();
+            displayGuiScreen(null);
+            field_6302_aa = ticksRan + 10000;
+            return;
         }
     }
 
     public void func_6273_f() {
-        if(this.field_6289_L) {
-            if(this.thePlayer != null) {
-                this.thePlayer.resetPlayerKeyState();
-            }
-
-            this.field_6289_L = false;
-            this.mouseHelper.func_773_b();
-        }
+        if (!field_6289_L) {
+            return;
+        }
+        if (thePlayer != null) {
+            thePlayer.resetPlayerKeyState();
+        }
+        field_6289_L = false;
+        mouseHelper.func_773_b();
     }
 
     public void func_6252_g() {
-        if(this.currentScreen == null) {
-            this.displayGuiScreen(new GuiIngameMenu());
-        }
-    }
-
-    private void func_6254_a(int var1, boolean var2) {
-        if(!this.playerController.field_1064_b) {
-            if(var1 != 0 || this.field_6282_S <= 0) {
-                if(var2 && this.objectMouseOver != null && this.objectMouseOver.typeOfHit == 0 && var1 == 0) {
-                    int var3 = this.objectMouseOver.blockX;
-                    int var4 = this.objectMouseOver.blockY;
-                    int var5 = this.objectMouseOver.blockZ;
-                    this.playerController.sendBlockRemoving(var3, var4, var5, this.objectMouseOver.sideHit);
-                    this.effectRenderer.func_1191_a(var3, var4, var5, this.objectMouseOver.sideHit);
-                } else {
-                    this.playerController.func_6468_a();
-                }
-
-            }
-        }
-    }
-
-    private void clickMouse(int var1) {
-        if(var1 != 0 || this.field_6282_S <= 0) {
-            if(var1 == 0) {
-                this.thePlayer.swingItem();
-            }
-
-            boolean var2 = true;
-            if(this.objectMouseOver == null) {
-                if(var1 == 0 && !(this.playerController instanceof PlayerControllerTest)) {
-                    this.field_6282_S = 10;
-                }
-            } else if(this.objectMouseOver.typeOfHit == 1) {
-                if(var1 == 0) {
-                    this.playerController.func_6472_b(this.thePlayer, this.objectMouseOver.entityHit);
-                }
-
-                if(var1 == 1) {
-                    this.playerController.func_6475_a(this.thePlayer, this.objectMouseOver.entityHit);
-                }
-            } else if(this.objectMouseOver.typeOfHit == 0) {
-                int var3 = this.objectMouseOver.blockX;
-                int var4 = this.objectMouseOver.blockY;
-                int var5 = this.objectMouseOver.blockZ;
-                int var6 = this.objectMouseOver.sideHit;
-                Block var7 = Block.blocksList[this.theWorld.getBlockId(var3, var4, var5)];
-                if(var1 == 0) {
-                    this.theWorld.onBlockHit(var3, var4, var5, this.objectMouseOver.sideHit);
-                    if(var7 != Block.bedrock || this.thePlayer.field_9371_f >= 100) {
-                        this.playerController.clickBlock(var3, var4, var5, this.objectMouseOver.sideHit);
-                    }
-                } else {
-                    ItemStack var8 = this.thePlayer.inventory.getCurrentItem();
-                    int var9 = var8 != null ? var8.stackSize : 0;
-                    if(this.playerController.sendPlaceBlock(this.thePlayer, this.theWorld, var8, var3, var4, var5, var6)) {
-                        var2 = false;
-                        this.thePlayer.swingItem();
-                    }
-
-                    if(var8 == null) {
-                        return;
-                    }
-
-                    if(var8.stackSize == 0) {
-                        this.thePlayer.inventory.mainInventory[this.thePlayer.inventory.currentItem] = null;
-                    } else if(var8.stackSize != var9) {
-                        this.entityRenderer.itemRenderer.func_9449_b();
-                    }
-                }
-            }
-
-            if(var2 && var1 == 1) {
-                ItemStack var10 = this.thePlayer.inventory.getCurrentItem();
-                if(var10 != null && this.playerController.sendUseItem(this.thePlayer, this.theWorld, var10)) {
-                    this.entityRenderer.itemRenderer.func_9450_c();
-                }
-            }
-
+        if (currentScreen != null) {
+            return;
+        } else {
+            displayGuiScreen(new GuiIngameMenu());
+            return;
+        }
+    }
+
+    private void func_6254_a(int i, boolean flag) {
+        if (playerController.field_1064_b) {
+            return;
+        }
+        if (i == 0 && field_6282_S > 0) {
+            return;
+        }
+        if (flag && objectMouseOver != null && objectMouseOver.typeOfHit == 0 && i == 0) {
+            int j = objectMouseOver.blockX;
+            int k = objectMouseOver.blockY;
+            int l = objectMouseOver.blockZ;
+            playerController.sendBlockRemoving(j, k, l, objectMouseOver.sideHit);
+            effectRenderer.func_1191_a(j, k, l, objectMouseOver.sideHit);
+        } else {
+            playerController.func_6468_a();
+        }
+    }
+
+    private void clickMouse(int i) {
+        if (i == 0 && field_6282_S > 0) {
+            return;
+        }
+        if (i == 0) {
+            thePlayer.swingItem();
+        }
+        boolean flag = true;
+        if (objectMouseOver == null) {
+            if (i == 0 && !(playerController instanceof PlayerControllerTest)) {
+                field_6282_S = 10;
+            }
+        } else if (objectMouseOver.typeOfHit == 1) {
+            if (i == 0) {
+                playerController.func_6472_b(thePlayer, objectMouseOver.entityHit);
+            }
+            if (i == 1) {
+                playerController.func_6475_a(thePlayer, objectMouseOver.entityHit);
+            }
+        } else if (objectMouseOver.typeOfHit == 0) {
+            int j = objectMouseOver.blockX;
+            int k = objectMouseOver.blockY;
+            int l = objectMouseOver.blockZ;
+            int i1 = objectMouseOver.sideHit;
+            Block block = Block.blocksList[theWorld.getBlockId(j, k, l)];
+            if (i == 0) {
+                theWorld.onBlockHit(j, k, l, objectMouseOver.sideHit);
+                if (block != Block.bedrock || thePlayer.field_9371_f >= 100) {
+                    playerController.clickBlock(j, k, l, objectMouseOver.sideHit);
+                }
+            } else {
+                ItemStack itemstack1 = thePlayer.inventory.getCurrentItem();
+                int j1 = itemstack1 == null ? 0 : itemstack1.stackSize;
+                if (playerController.sendPlaceBlock(thePlayer, theWorld, itemstack1, j, k, l, i1)) {
+                    flag = false;
+                    thePlayer.swingItem();
+                }
+                if (itemstack1 == null) {
+                    return;
+                }
+                if (itemstack1.stackSize == 0) {
+                    thePlayer.inventory.mainInventory[thePlayer.inventory.currentItem] = null;
+                } else if (itemstack1.stackSize != j1) {
+                    entityRenderer.itemRenderer.func_9449_b();
+                }
+            }
+        }
+        if (flag && i == 1) {
+            ItemStack itemstack = thePlayer.inventory.getCurrentItem();
+            if (itemstack != null && playerController.sendUseItem(thePlayer, theWorld, itemstack)) {
+                entityRenderer.itemRenderer.func_9450_c();
+            }
         }
     }
 
     public void toggleFullscreen() {
         try {
-            this.a = !this.a;
+            mainFrame = !mainFrame;
             System.out.println("Toggle fullscreen!");
-            if(this.a) {
+            if (mainFrame) {
                 Display.setDisplayMode(Display.getDesktopDisplayMode());
-                this.displayWidth = Display.getDisplayMode().getWidth();
-                this.displayHeight = Display.getDisplayMode().getHeight();
-                if(this.displayWidth <= 0) {
-                    this.displayWidth = 1;
+                displayWidth = Display.getDisplayMode().getWidth();
+                displayHeight = Display.getDisplayMode().getHeight();
+                if (displayWidth <= 0) {
+                    displayWidth = 1;
                 }
-
-                if(this.displayHeight <= 0) {
-                    this.displayHeight = 1;
+                if (displayHeight <= 0) {
+                    displayHeight = 1;
                 }
             } else {
-                if(this.mcCanvas != null) {
-                    this.displayWidth = this.mcCanvas.getWidth();
-                    this.displayHeight = this.mcCanvas.getHeight();
+                if (mcCanvas != null) {
+                    displayWidth = mcCanvas.getWidth();
+                    displayHeight = mcCanvas.getHeight();
                 } else {
-                    this.displayWidth = this.field_9236_T;
-                    this.displayHeight = this.field_9235_U;
-                }
-
-                if(this.displayWidth <= 0) {
-                    this.displayWidth = 1;
-                }
-
-                if(this.displayHeight <= 0) {
-                    this.displayHeight = 1;
-                }
-
-                Display.setDisplayMode(new DisplayMode(this.field_9236_T, this.field_9235_U));
+                    displayWidth = field_9236_T;
+                    displayHeight = field_9235_U;
+                }
+                if (displayWidth <= 0) {
+                    displayWidth = 1;
+                }
+                if (displayHeight <= 0) {
+                    displayHeight = 1;
+                }
+                Display.setDisplayMode(new org.lwjgl.opengl.DisplayMode(field_9236_T, field_9235_U));
             }
-
-            this.func_6273_f();
-            Display.setFullscreen(this.a);
+            func_6273_f();
+            Display.setFullscreen(mainFrame);
             Display.update();
             Thread.sleep(1000L);
-            if(this.a) {
-                this.func_6259_e();
-            }
-
-            if(this.currentScreen != null) {
-                this.func_6273_f();
-                this.resize(this.displayWidth, this.displayHeight);
-            }
-
-            System.out.println("Size: " + this.displayWidth + ", " + this.displayHeight);
-        } catch (Exception var2) {
-            var2.printStackTrace();
+            if (mainFrame) {
+                func_6259_e();
+            }
+            if (currentScreen != null) {
+                func_6273_f();
+                resize(displayWidth, displayHeight);
+            }
+            System.out.println((new StringBuilder()).append("Size: ").append(displayWidth).append(", ").append(displayHeight).toString());
+        } catch (Exception exception) {
+            exception.printStackTrace();
         }
-
     }
 
-    private void resize(int var1, int var2) {
-        if(var1 <= 0) {
-            var1 = 1;
-        }
-
-        if(var2 <= 0) {
-            var2 = 1;
-        }
-
-        this.displayWidth = var1;
-        this.displayHeight = var2;
-        if(this.currentScreen != null) {
-            ScaledResolution var3 = new ScaledResolution(var1, var2);
-            int var4 = var3.getScaledWidth();
-            int var5 = var3.getScaledHeight();
-            this.currentScreen.setWorldAndResolution(this, var4, var5);
-        }
-
+    private void resize(int i, int j) {
+        if (i <= 0) {
+            i = 1;
+        }
+        if (j <= 0) {
+            j = 1;
+        }
+        displayWidth = i;
+        displayHeight = j;
+        if (currentScreen != null) {
+            ScaledResolution scaledresolution = new ScaledResolution(i, j);
+            int k = scaledresolution.getScaledWidth();
+            int l = scaledresolution.getScaledHeight();
+            currentScreen.setWorldAndResolution(this, k, l);
+        }
     }
 
     private void clickMiddleMouseButton() {
-        if(this.objectMouseOver != null) {
-            int var1 = this.theWorld.getBlockId(this.objectMouseOver.blockX, this.objectMouseOver.blockY, this.objectMouseOver.blockZ);
-            if(var1 == Block.grass.blockID) {
-                var1 = Block.dirt.blockID;
-            }
-
-            if(var1 == Block.stairDouble.blockID) {
-                var1 = Block.stairSingle.blockID;
-            }
-
-            if(var1 == Block.bedrock.blockID) {
-                var1 = Block.stone.blockID;
-            }
-
-            this.thePlayer.inventory.setCurrentItem(var1, this.playerController instanceof PlayerControllerTest);
+        if (objectMouseOver != null) {
+            int i = theWorld.getBlockId(objectMouseOver.blockX, objectMouseOver.blockY, objectMouseOver.blockZ);
+            if (i == Block.grass.blockID) {
+                i = Block.dirt.blockID;
+            }
+            if (i == Block.stairDouble.blockID) {
+                i = Block.stairSingle.blockID;
+            }
+            if (i == Block.bedrock.blockID) {
+                i = Block.stone.blockID;
+            }
+            thePlayer.inventory.setCurrentItem(i, playerController instanceof PlayerControllerTest);
         }
-
     }
 
     public void runTick() {
-        this.ingameGUI.func_555_a();
-        this.entityRenderer.getMouseOver(1.0F);
-        if(this.thePlayer != null) {
-            this.thePlayer.func_6420_o();
-        }
-
-        if(!this.isWorldLoaded && this.theWorld != null) {
-            this.playerController.updateController();
-        }
-
-        GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/terrain.png"));
-        if(!this.isWorldLoaded) {
-            this.renderEngine.func_1067_a();
-        }
-
-        if(this.currentScreen == null && this.thePlayer != null && this.thePlayer.health <= 0) {
-            this.displayGuiScreen((GuiScreen)null);
-        }
-
-        if(this.currentScreen != null) {
-            this.field_6302_aa = this.ticksRan + 10000;
-        }
-
-        if(this.currentScreen != null) {
-            this.currentScreen.handleInput();
-            if(this.currentScreen != null) {
-                this.currentScreen.updateScreen();
-            }
-        }
-
-        if(this.currentScreen == null || this.currentScreen.field_948_f) {
-            label238:
-            while(true) {
-                while(true) {
-                    while(true) {
-                        long var1;
-                        do {
-                            if(!Mouse.next()) {
-                                if(this.field_6282_S > 0) {
-                                    --this.field_6282_S;
-                                }
-
-                                while(true) {
-                                    while(true) {
-                                        do {
-                                            if(!Keyboard.next()) {
-                                                if(this.currentScreen == null) {
-                                                    if(Mouse.isButtonDown(0) && (float)(this.ticksRan - this.field_6302_aa) >= this.timer.ticksPerSecond / 4.0F && this.field_6289_L) {
-                                                        this.clickMouse(0);
-                                                        this.field_6302_aa = this.ticksRan;
-                                                    }
-
-                                                    if(Mouse.isButtonDown(1) && (float)(this.ticksRan - this.field_6302_aa) >= this.timer.ticksPerSecond / 4.0F && this.field_6289_L) {
-                                                        this.clickMouse(1);
-                                                        this.field_6302_aa = this.ticksRan;
-                                                    }
-                                                }
-
-                                                this.func_6254_a(0, this.currentScreen == null && Mouse.isButtonDown(0) && this.field_6289_L);
-                                                break label238;
-                                            }
-
-                                            this.thePlayer.handleKeyPress(Keyboard.getEventKey(), Keyboard.getEventKeyState());
-                                        } while(!Keyboard.getEventKeyState());
-
-                                        if(Keyboard.getEventKey() == Keyboard.KEY_F11) {
-                                            this.toggleFullscreen();
-                                        } else {
-                                            if(this.currentScreen != null) {
-                                                this.currentScreen.handleKeyboardInput();
-                                            } else {
-                                                if(Keyboard.getEventKey() == Keyboard.KEY_ESCAPE) {
-                                                    this.func_6252_g();
-                                                }
-
-                                                if(Keyboard.getEventKey() == Keyboard.KEY_S && Keyboard.isKeyDown(Keyboard.KEY_F3)) {
-                                                    this.forceReload();
-                                                }
-
-                                                if(Keyboard.getEventKey() == Keyboard.KEY_F5) {
-                                                    this.gameSettings.thirdPersonView = !this.gameSettings.thirdPersonView;
-                                                }
-
-                                                if(Keyboard.getEventKey() == this.gameSettings.keyBindInventory.keyCode) {
-                                                    this.displayGuiScreen(new GuiInventory(this.thePlayer));
-                                                }
-
-                                                if(Keyboard.getEventKey() == this.gameSettings.keyBindDrop.keyCode) {
-                                                    this.thePlayer.func_20060_w();
-                                                }
-
-                                                if(this.isMultiplayerWorld() && Keyboard.getEventKey() == this.gameSettings.keyBindChat.keyCode) {
-                                                    this.displayGuiScreen(new GuiChat());
-                                                }
-                                            }
-
-                                            for(int var4 = 0; var4 < 9; ++var4) {
-                                                if(Keyboard.getEventKey() == Keyboard.KEY_1 + var4) {
-                                                    this.thePlayer.inventory.currentItem = var4;
-                                                }
-                                            }
-
-                                            if(Keyboard.getEventKey() == this.gameSettings.keyBindToggleFog.keyCode) {
-                                                this.gameSettings.setOptionValue(EnumOptions.RENDER_DISTANCE, !Keyboard.isKeyDown(Keyboard.KEY_LSHIFT) && !Keyboard.isKeyDown(Keyboard.KEY_RSHIFT) ? 1 : -1);
-                                            }
-                                        }
-                                    }
-                                }
-                            }
-
-                            var1 = System.currentTimeMillis() - this.systemTime;
-                        } while(var1 > 200L);
-
-                        int var3 = Mouse.getEventDWheel();
-                        if(var3 != 0) {
-                            this.thePlayer.inventory.changeCurrentItem(var3);
-                        }
-
-                        if(this.currentScreen == null) {
-                            if(!this.field_6289_L && Mouse.getEventButtonState()) {
-                                this.func_6259_e();
-                            } else {
-                                if(Mouse.getEventButton() == 0 && Mouse.getEventButtonState()) {
-                                    this.clickMouse(0);
-                                    this.field_6302_aa = this.ticksRan;
-                                }
-
-                                if(Mouse.getEventButton() == 1 && Mouse.getEventButtonState()) {
-                                    this.clickMouse(1);
-                                    this.field_6302_aa = this.ticksRan;
-                                }
-
-                                if(Mouse.getEventButton() == 2 && Mouse.getEventButtonState()) {
-                                    this.clickMiddleMouseButton();
-                                }
-                            }
-                        } else if(this.currentScreen != null) {
-                            this.currentScreen.handleMouseInput();
-                        }
-                    }
-                }
-            }
-        }
-
-        if(this.theWorld != null) {
-            if(this.thePlayer != null) {
-                ++this.field_6300_ab;
-                if(this.field_6300_ab == 30) {
-                    this.field_6300_ab = 0;
-                    this.theWorld.func_705_f(this.thePlayer);
-                }
-            }
-
-            this.theWorld.difficultySetting = this.gameSettings.difficulty;
-            if(this.theWorld.multiplayerWorld) {
-                this.theWorld.difficultySetting = 3;
-            }
-
-            if(!this.isWorldLoaded) {
-                this.entityRenderer.func_911_a();
-            }
-
-            if(!this.isWorldLoaded) {
-                this.renderGlobal.func_945_d();
-            }
-
-            if(!this.isWorldLoaded) {
-                this.theWorld.func_633_c();
-            }
-
-            if(!this.isWorldLoaded || this.isMultiplayerWorld()) {
-                this.theWorld.tick();
-            }
-
-            if(!this.isWorldLoaded && this.theWorld != null) {
-                this.theWorld.randomDisplayUpdates(MathHelper.floor_double(this.thePlayer.posX), MathHelper.floor_double(this.thePlayer.posY), MathHelper.floor_double(this.thePlayer.posZ));
-            }
-
-            if(!this.isWorldLoaded) {
-                this.effectRenderer.func_1193_a();
-            }
-        }
-
-        this.systemTime = System.currentTimeMillis();
+        ingameGUI.func_555_a();
+        entityRenderer.getMouseOver(1.0F);
+        if (thePlayer != null) {
+            thePlayer.func_6420_o();
+        }
+        if (!isWorldLoaded && theWorld != null) {
+            playerController.updateController();
+        }
+        GL11.glBindTexture(3553, renderEngine.getTexture("/terrain.png"));
+        if (!isWorldLoaded) {
+            renderEngine.func_1067_a();
+        }
+        if (currentScreen == null && thePlayer != null && thePlayer.health <= 0) {
+            displayGuiScreen(null);
+        }
+
+        TickEvent tickEvent = new TickEvent();
+        Ref.getEventManager().handleEvent(tickEvent);
+
+        if (currentScreen != null) {
+            field_6302_aa = ticksRan + 10000;
+        }
+        if (currentScreen != null) {
+            currentScreen.handleInput();
+            if (currentScreen != null) {
+                currentScreen.updateScreen();
+            }
+        }
+        if (currentScreen == null || currentScreen.field_948_f) {
+            do {
+                if (!Mouse.next()) {
+                    break;
+                }
+                long l = System.currentTimeMillis() - systemTime;
+                if (l <= 200L) {
+                    int j = Mouse.getEventDWheel();
+                    if (j != 0) {
+                        ScrollEvent event = new ScrollEvent(j);
+                        Ref.getEventManager().handleEvent(event);
+
+                        if (!event.isCancelled()) {
+                            thePlayer.inventory.changeCurrentItem(j);
+                        }
+                    }
+                    if (currentScreen == null) {
+                        if (!field_6289_L && Mouse.getEventButtonState()) {
+                            func_6259_e();
+                        } else {
+                            if (Mouse.getEventButton() == 0 && Mouse.getEventButtonState()) {
+                                clickMouse(0);
+                                field_6302_aa = ticksRan;
+                            }
+                            if (Mouse.getEventButton() == 1 && Mouse.getEventButtonState()) {
+                                clickMouse(1);
+                                field_6302_aa = ticksRan;
+                            }
+                            if (Mouse.getEventButton() == 2 && Mouse.getEventButtonState()) {
+                                clickMiddleMouseButton();
+                            }
+                        }
+
+                        if (Mouse.getEventButtonState()) {
+                            ClickEvent clickEvent = new ClickEvent(Mouse.getEventButton());
+                            Ref.getEventManager().handleEvent(clickEvent);
+                        }
+                    } else if (currentScreen != null) {
+                        currentScreen.handleMouseInput();
+                    }
+                }
+            } while (true);
+            if (field_6282_S > 0) {
+                field_6282_S--;
+            }
+            do {
+                if (!Keyboard.next()) {
+                    break;
+                }
+                thePlayer.handleKeyPress(Keyboard.getEventKey(), Keyboard.getEventKeyState());
+                if (Keyboard.getEventKeyState()) {
+                    if (Keyboard.getEventKey() == 87) {
+                        toggleFullscreen();
+                    } else {
+                        if (currentScreen != null) {
+                            currentScreen.handleKeyboardInput();
+                        } else {
+                            if (Keyboard.getEventKey() == 1) {
+                                func_6252_g();
+                            }
+                            if (Keyboard.getEventKey() == 31 && Keyboard.isKeyDown(61)) {
+                                forceReload();
+                            }
+
+                            KeyboardEvent event = new KeyboardEvent(Keyboard.getEventKey());
+                            Ref.getEventManager().handleEvent(event);
+
+                            if (Keyboard.getEventKey() == 63 && !event.isCancelled()) {
+                                gameSettings.thirdPersonView = !gameSettings.thirdPersonView;
+                            }
+                            if (Keyboard.getEventKey() == gameSettings.keyBindInventory.keyCode) {
+                                displayGuiScreen(new GuiInventory(thePlayer));
+                            }
+                            if (Keyboard.getEventKey() == gameSettings.keyBindDrop.keyCode) {
+                                thePlayer.func_20060_w();
+                            }
+                            if (isMultiplayerWorld() && Keyboard.getEventKey() == gameSettings.keyBindChat.keyCode) {
+                                displayGuiScreen(new GuiChat(false));
+                            }
+                        }
+                        for (int i = 0; i < 9; i++) {
+                            if (Keyboard.getEventKey() == 2 + i) {
+                                thePlayer.inventory.currentItem = i;
+                            }
+                        }
+
+                        if (Keyboard.getEventKey() == gameSettings.keyBindToggleFog.keyCode) {
+                            gameSettings.setOptionValue(EnumOptions.RENDER_DISTANCE, !Keyboard.isKeyDown(42) && !Keyboard.isKeyDown(54) ? 1 : -1);
+                        }
+                    }
+                }
+            } while (true);
+            if (currentScreen == null) {
+                if (Mouse.isButtonDown(0) && (float) (ticksRan - field_6302_aa) >= timer.ticksPerSecond / 4F && field_6289_L) {
+                    clickMouse(0);
+                    field_6302_aa = ticksRan;
+                }
+                if (Mouse.isButtonDown(1) && (float) (ticksRan - field_6302_aa) >= timer.ticksPerSecond / 4F && field_6289_L) {
+                    clickMouse(1);
+                    field_6302_aa = ticksRan;
+                }
+            }
+            func_6254_a(0, currentScreen == null && Mouse.isButtonDown(0) && field_6289_L);
+        }
+        if (theWorld != null) {
+            if (thePlayer != null) {
+                field_6300_ab++;
+                if (field_6300_ab == 30) {
+                    field_6300_ab = 0;
+                    theWorld.func_705_f(thePlayer);
+                }
+            }
+            theWorld.difficultySetting = gameSettings.difficulty;
+            if (theWorld.multiplayerWorld) {
+                theWorld.difficultySetting = 3;
+            }
+            if (!isWorldLoaded) {
+                entityRenderer.func_911_a();
+            }
+            if (!isWorldLoaded) {
+                renderGlobal.func_945_d();
+            }
+            if (!isWorldLoaded) {
+                theWorld.func_633_c();
+            }
+            if (!isWorldLoaded || isMultiplayerWorld()) {
+                theWorld.tick();
+            }
+            if (!isWorldLoaded && theWorld != null) {
+                theWorld.randomDisplayUpdates(MathHelper.floor_double(thePlayer.posX), MathHelper.floor_double(thePlayer.posY), MathHelper.floor_double(thePlayer.posZ));
+            }
+            if (!isWorldLoaded) {
+                effectRenderer.func_1193_a();
+            }
+        }
+        systemTime = System.currentTimeMillis();
     }
 
     private void forceReload() {
         System.out.println("FORCING RELOAD!");
-        this.sndManager = new SoundManager();
-        this.sndManager.loadSoundSettings(this.gameSettings);
-        this.downloadResourcesThread.reloadResources();
+        sndManager = new SoundManager();
+        sndManager.loadSoundSettings(gameSettings);
+        downloadResourcesThread.reloadResources();
     }
 
     public boolean isMultiplayerWorld() {
-        return this.theWorld != null && this.theWorld.multiplayerWorld;
+        return theWorld != null && theWorld.multiplayerWorld;
     }
 
-    public void func_6247_b(String var1) {
-        this.func_6261_a((World)null);
+    public void func_6247_b(String s) {
+        func_6261_a(null);
         System.gc();
-        World var2 = new World(new File(getMinecraftDir(), "saves"), var1);
-        if(var2.field_1033_r) {
-            this.func_6263_a(var2, "Generating level");
+        World world = new World(new File(getMinecraftDir(), "saves"), s);
+        if (world.field_1033_r) {
+            func_6263_a(world, "Generating level");
         } else {
-            this.func_6263_a(var2, "Loading level");
+            func_6263_a(world, "Loading level");
         }
-
     }
 
     public void usePortal() {
-        if(this.thePlayer.dimension == -1) {
-            this.thePlayer.dimension = 0;
-        } else {
-            this.thePlayer.dimension = -1;
-        }
-
-        this.theWorld.setEntityDead(this.thePlayer);
-        this.thePlayer.isDead = false;
-        double var1 = this.thePlayer.posX;
-        double var3 = this.thePlayer.posZ;
-        double var5 = 8.0D;
-        World var7;
-        if(this.thePlayer.dimension == -1) {
-            var1 /= var5;
-            var3 /= var5;
-            this.thePlayer.setLocationAndAngles(var1, this.thePlayer.posY, var3, this.thePlayer.rotationYaw, this.thePlayer.rotationPitch);
-            this.theWorld.updateEntityWithOptionalForce(this.thePlayer, false);
-            var7 = new World(this.theWorld, new WorldProviderHell());
-            this.changeWorld(var7, "Entering the Nether", this.thePlayer);
-        } else {
-            var1 *= var5;
-            var3 *= var5;
-            this.thePlayer.setLocationAndAngles(var1, this.thePlayer.posY, var3, this.thePlayer.rotationYaw, this.thePlayer.rotationPitch);
-            this.theWorld.updateEntityWithOptionalForce(this.thePlayer, false);
-            var7 = new World(this.theWorld, new WorldProvider());
-            this.changeWorld(var7, "Leaving the Nether", this.thePlayer);
-        }
-
-        this.thePlayer.worldObj = this.theWorld;
-        this.thePlayer.setLocationAndAngles(var1, this.thePlayer.posY, var3, this.thePlayer.rotationYaw, this.thePlayer.rotationPitch);
-        this.theWorld.updateEntityWithOptionalForce(this.thePlayer, false);
-        (new Teleporter()).func_4107_a(this.theWorld, this.thePlayer);
-    }
-
-    public void func_6261_a(World var1) {
-        this.func_6263_a(var1, "");
-    }
-
-    public void func_6263_a(World var1, String var2) {
-        this.changeWorld(var1, var2, (EntityPlayer)null);
-    }
-
-    public void changeWorld(World var1, String var2, EntityPlayer var3) {
-        this.loadingScreen.printText(var2);
-        this.loadingScreen.displayLoadingString("");
-        this.sndManager.func_331_a((String)null, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
-        if(this.theWorld != null) {
-            this.theWorld.func_651_a(this.loadingScreen);
-        }
-
-        this.theWorld = var1;
-        System.out.println("Player is " + this.thePlayer);
-        if(var1 != null) {
-            this.playerController.func_717_a(var1);
-            if(!this.isMultiplayerWorld()) {
-                if(var3 == null) {
-                    this.thePlayer = (EntityPlayerSP)var1.func_4085_a(EntityPlayerSP.class);
-                }
-            } else if(this.thePlayer != null) {
-                this.thePlayer.preparePlayerToSpawn();
-                if(var1 != null) {
-                    var1.entityJoinedWorld(this.thePlayer);
-                }
-            }
-
-            if(!var1.multiplayerWorld) {
-                this.func_6255_d(var2);
-            }
-
-            System.out.println("Player is now " + this.thePlayer);
-            if(this.thePlayer == null) {
-                this.thePlayer = (EntityPlayerSP)this.playerController.func_4087_b(var1);
-                this.thePlayer.preparePlayerToSpawn();
-                this.playerController.flipPlayer(this.thePlayer);
-            }
-
-            this.thePlayer.movementInput = new MovementInputFromOptions(this.gameSettings);
-            if(this.renderGlobal != null) {
-                this.renderGlobal.func_946_a(var1);
-            }
-
-            if(this.effectRenderer != null) {
-                this.effectRenderer.func_1188_a(var1);
-            }
-
-            this.playerController.func_6473_b(this.thePlayer);
-            if(var3 != null) {
-                var1.func_6464_c();
-            }
-
-            var1.func_608_a(this.thePlayer);
-            if(var1.field_1033_r) {
-                var1.func_651_a(this.loadingScreen);
-            }
-        } else {
-            this.thePlayer = null;
-        }
-
+        if (thePlayer.dimension == -1) {
+            thePlayer.dimension = 0;
+        } else {
+            thePlayer.dimension = -1;
+        }
+        theWorld.setEntityDead(thePlayer);
+        thePlayer.isDead = false;
+        double d = thePlayer.posX;
+        double d1 = thePlayer.posZ;
+        double d2 = 8D;
+        if (thePlayer.dimension == -1) {
+            d /= d2;
+            d1 /= d2;
+            thePlayer.setLocationAndAngles(d, thePlayer.posY, d1, thePlayer.rotationYaw, thePlayer.rotationPitch);
+            theWorld.updateEntityWithOptionalForce(thePlayer, false);
+            World world = new World(theWorld, new WorldProviderHell());
+            changeWorld(world, "Entering the Nether", thePlayer);
+        } else {
+            d *= d2;
+            d1 *= d2;
+            thePlayer.setLocationAndAngles(d, thePlayer.posY, d1, thePlayer.rotationYaw, thePlayer.rotationPitch);
+            theWorld.updateEntityWithOptionalForce(thePlayer, false);
+            World world1 = new World(theWorld, new WorldProvider());
+            changeWorld(world1, "Leaving the Nether", thePlayer);
+        }
+        thePlayer.worldObj = theWorld;
+        thePlayer.setLocationAndAngles(d, thePlayer.posY, d1, thePlayer.rotationYaw, thePlayer.rotationPitch);
+        theWorld.updateEntityWithOptionalForce(thePlayer, false);
+        (new Teleporter()).func_4107_a(theWorld, thePlayer);
+    }
+
+    public void func_6261_a(World world) {
+        func_6263_a(world, "");
+    }
+
+    public void func_6263_a(World world, String s) {
+        changeWorld(world, s, null);
+    }
+
+    public void changeWorld(World world, String s, EntityPlayer entityplayer) {
+        PlayerWorldChangeEvent worldChangeEvent = new PlayerWorldChangeEvent(theWorld, world);
+        Ref.getEventManager().handleEvent(worldChangeEvent);
+
+        loadingScreen.printText(s);
+        loadingScreen.displayLoadingString("");
+        sndManager.func_331_a(null, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
+        if (theWorld != null) {
+            theWorld.func_651_a(loadingScreen);
+        }
+        theWorld = world;
+        System.out.println((new StringBuilder()).append("Player is ").append(thePlayer).toString());
+        if (world != null) {
+            playerController.func_717_a(world);
+            if (!isMultiplayerWorld()) {
+                if (entityplayer == null) {
+                    thePlayer = (EntityPlayerSP) world.func_4085_a(EntityPlayerSP.class);
+                }
+            } else if (thePlayer != null) {
+                thePlayer.preparePlayerToSpawn();
+                if (world != null) {
+                    world.entityJoinedWorld(thePlayer);
+                }
+            }
+            if (!world.multiplayerWorld) {
+                func_6255_d(s);
+            }
+            System.out.println((new StringBuilder()).append("Player is now ").append(thePlayer).toString());
+            if (thePlayer == null) {
+                thePlayer = (EntityPlayerSP) playerController.func_4087_b(world);
+                thePlayer.preparePlayerToSpawn();
+                playerController.flipPlayer(thePlayer);
+            }
+            thePlayer.movementInput = new MovementInputFromOptions(gameSettings);
+            if (renderGlobal != null) {
+                renderGlobal.func_946_a(world);
+            }
+            if (effectRenderer != null) {
+                effectRenderer.func_1188_a(world);
+            }
+            playerController.func_6473_b(thePlayer);
+            if (entityplayer != null) {
+                world.func_6464_c();
+            }
+            world.func_608_a(thePlayer);
+            if (world.field_1033_r) {
+                world.func_651_a(loadingScreen);
+            }
+        } else {
+            thePlayer = null;
+        }
         System.gc();
-        this.systemTime = 0L;
-    }
-
-    private void func_6255_d(String var1) {
-        this.loadingScreen.printText(var1);
-        this.loadingScreen.displayLoadingString("Building terrain");
-        short var2 = 128;
-        int var3 = 0;
-        int var4 = var2 * 2 / 16 + 1;
-        var4 *= var4;
-
-        for(int var5 = -var2; var5 <= var2; var5 += 16) {
-            int var6 = this.theWorld.spawnX;
-            int var7 = this.theWorld.spawnZ;
-            if(this.thePlayer != null) {
-                var6 = (int)this.thePlayer.posX;
-                var7 = (int)this.thePlayer.posZ;
-            }
-
-            for(int var8 = -var2; var8 <= var2; var8 += 16) {
-                this.loadingScreen.setLoadingProgress(var3++ * 100 / var4);
-                this.theWorld.getBlockId(var6 + var5, 64, var7 + var8);
-
-                while(this.theWorld.func_6465_g()) {
-                }
-            }
-        }
-
-        this.loadingScreen.displayLoadingString("Simulating world for a bit");
-        boolean var9 = true;
-        this.theWorld.func_656_j();
-    }
-
-    public void installResource(String var1, File var2) {
-        int var3 = var1.indexOf("/");
-        String var4 = var1.substring(0, var3);
-        var1 = var1.substring(var3 + 1);
-        if(var4.equalsIgnoreCase("sound")) {
-            this.sndManager.addSound(var1, var2);
-        } else if(var4.equalsIgnoreCase("newsound")) {
-            this.sndManager.addSound(var1, var2);
-        } else if(var4.equalsIgnoreCase("streaming")) {
-            this.sndManager.addStreaming(var1, var2);
-        } else if(var4.equalsIgnoreCase("music")) {
-            this.sndManager.addMusic(var1, var2);
-        } else if(var4.equalsIgnoreCase("newmusic")) {
-            this.sndManager.addMusic(var1, var2);
-        }
-
+        systemTime = 0L;
+    }
+
+    private void func_6255_d(String s) {
+        loadingScreen.printText(s);
+        loadingScreen.displayLoadingString("Building terrain");
+        char c = '\200';
+        int i = 0;
+        int j = (c * 2) / 16 + 1;
+        j *= j;
+        for (int k = -c; k <= c; k += 16) {
+            int l = theWorld.spawnX;
+            int i1 = theWorld.spawnZ;
+            if (thePlayer != null) {
+                l = (int) thePlayer.posX;
+                i1 = (int) thePlayer.posZ;
+            }
+            for (int j1 = -c; j1 <= c; j1 += 16) {
+                loadingScreen.setLoadingProgress((i++ * 100) / j);
+                theWorld.getBlockId(l + k, 64, i1 + j1);
+                while (theWorld.func_6465_g()) ;
+            }
+
+        }
+
+        loadingScreen.displayLoadingString("Simulating world for a bit");
+        j = 2000;
+        theWorld.func_656_j();
+    }
+
+    public void installResource(String s, File file) {
+        int i = s.indexOf("/");
+        String s1 = s.substring(0, i);
+        s = s.substring(i + 1);
+        if (s1.equalsIgnoreCase("sound")) {
+            sndManager.addSound(s, file);
+        } else if (s1.equalsIgnoreCase("newsound")) {
+            sndManager.addSound(s, file);
+        } else if (s1.equalsIgnoreCase("streaming")) {
+            sndManager.addStreaming(s, file);
+        } else if (s1.equalsIgnoreCase("music")) {
+            sndManager.addMusic(s, file);
+        } else if (s1.equalsIgnoreCase("newmusic")) {
+            sndManager.addMusic(s, file);
+        }
     }
 
     public OpenGlCapsChecker func_6251_l() {
-        return this.glCapabilities;
+        return glCapabilities;
     }
 
     public String func_6241_m() {
-        return this.renderGlobal.func_953_b();
+        return renderGlobal.func_953_b();
     }
 
     public String func_6262_n() {
-        return this.renderGlobal.func_957_c();
+        return renderGlobal.func_957_c();
     }
 
     public String func_6245_o() {
-        return "P: " + this.effectRenderer.func_1190_b() + ". T: " + this.theWorld.func_687_d();
+        return (new StringBuilder()).append("P: ").append(effectRenderer.func_1190_b()).append(". T: ").append(theWorld.func_687_d()).toString();
     }
 
     public void respawn() {
-        if(!this.theWorld.worldProvider.func_6477_d()) {
-            this.usePortal();
-        }
-
-        this.theWorld.func_4076_b();
-        this.theWorld.func_9424_o();
-        int var1 = 0;
-        if(this.thePlayer != null) {
-            var1 = this.thePlayer.field_620_ab;
-            this.theWorld.setEntityDead(this.thePlayer);
-        }
-
-        this.thePlayer = (EntityPlayerSP)this.playerController.func_4087_b(this.theWorld);
-        this.thePlayer.preparePlayerToSpawn();
-        this.playerController.flipPlayer(this.thePlayer);
-        this.theWorld.func_608_a(this.thePlayer);
-        this.thePlayer.movementInput = new MovementInputFromOptions(this.gameSettings);
-        this.thePlayer.field_620_ab = var1;
-        this.playerController.func_6473_b(this.thePlayer);
-        this.func_6255_d("Respawning");
-        if(this.currentScreen instanceof GuiGameOver) {
-            this.displayGuiScreen((GuiScreen)null);
-        }
-
-    }
-
-    public static void func_6269_a(String var0, String var1) {
-        startMainThread(var0, var1, (String)null);
-    }
-
-    public static void startMainThread(String var0, String var1, String var2) {
-        boolean var3 = false;
-        Frame var5 = new Frame("Minecraft");
-        Canvas var6 = new Canvas();
-        var5.setLayout(new BorderLayout());
-        var5.add(var6, "Center");
-        var6.setPreferredSize(new Dimension(854, 480));
-        var5.pack();
-        var5.setLocationRelativeTo((Component)null);
-        MinecraftImpl var7 = new MinecraftImpl(var5, var6, (MinecraftApplet)null, 854, 480, var3, var5);
-        Thread var8 = new Thread(var7, "Minecraft main thread");
-        var8.setPriority(10);
-        var7.minecraftUri = "www.minecraft.net";
-        if(var0 != null && var1 != null) {
-            var7.session = new Session(var0, var1);
-        } else {
-            var7.session = new Session("Player" + System.currentTimeMillis() % 1000L, "");
-        }
-
-        if(var2 != null) {
-            String[] var9 = var2.split(":");
-            var7.setServer(var9[0], Integer.parseInt(var9[1]));
-        }
-
-        var5.setVisible(true);
-        var5.addWindowListener(new GameWindowListener(var7, var8));
-        var8.start();
+        if (!theWorld.worldProvider.func_6477_d()) {
+            usePortal();
+        }
+        theWorld.func_4076_b();
+        theWorld.func_9424_o();
+        int i = 0;
+        if (thePlayer != null) {
+            i = thePlayer.field_620_ab;
+            theWorld.setEntityDead(thePlayer);
+        }
+        thePlayer = (EntityPlayerSP) playerController.func_4087_b(theWorld);
+        thePlayer.preparePlayerToSpawn();
+        playerController.flipPlayer(thePlayer);
+        theWorld.func_608_a(thePlayer);
+        thePlayer.movementInput = new MovementInputFromOptions(gameSettings);
+        thePlayer.field_620_ab = i;
+        playerController.func_6473_b(thePlayer);
+        func_6255_d("Respawning");
+        if (currentScreen instanceof GuiGameOver) {
+            displayGuiScreen(null);
+        }
     }
 
     public NetClientHandler func_20001_q() {
-        return this.thePlayer instanceof EntityClientPlayerMP ? ((EntityClientPlayerMP)this.thePlayer).field_797_bg : null;
-    }
-
-    public static void main(String[] var0) {
-        String var1 = "Player" + System.currentTimeMillis() % 1000L;
-        if(var0.length > 0) {
-            var1 = var0[0];
-        }
-
-        String var2 = "-";
-        if(var0.length > 1) {
-            var2 = var0[1];
-        }
-
-        func_6269_a(var1, var2);
-    }
+        if (thePlayer instanceof EntityClientPlayerMP) {
+            return ((EntityClientPlayerMP) thePlayer).field_797_bg;
+        } else {
+            return null;
+        }
+    }
+
 }
