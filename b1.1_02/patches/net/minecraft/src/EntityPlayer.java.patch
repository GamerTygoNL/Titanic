--- net/minecraft/src/EntityPlayer.java
+++ net/minecraft/src/EntityPlayer.java
@@ -1,17 +1,22 @@
 package net.minecraft.src;
 
+import cc.noxiuam.titanic.Ref;
+import cc.noxiuam.titanic.client.network.profile.Profile;
+import cc.noxiuam.titanic.event.impl.world.player.OnLivingUpdateEvent;
+
 import java.util.List;
 
 public abstract class EntityPlayer extends EntityLiving {
-    public InventoryPlayer inventory = new InventoryPlayer(this);
+
+    public InventoryPlayer inventory;
     public CraftingInventoryCB field_20069_g;
     public CraftingInventoryCB field_20068_h;
-    public byte field_9371_f = 0;
-    public int score = 0;
+    public byte field_9371_f;
+    public int score;
     public float field_775_e;
     public float field_774_f;
-    public boolean isSwinging = false;
-    public int swingProgressInt = 0;
+    public boolean isSwinging;
+    public int swingProgressInt;
     public String field_771_i;
     public int dimension;
     public String field_20067_q;
@@ -21,343 +26,334 @@
     public double field_20063_u;
     public double field_20062_v;
     public double field_20061_w;
-    private int damageRemainder = 0;
-    public EntityFish fishEntity = null;
+    public EntityFish fishEntity;
+    private int damageRemainder;
 
-    public EntityPlayer(World var1) {
-        super(var1);
-        this.field_20069_g = new CraftingInventoryPlayerCB(this.inventory, !var1.multiplayerWorld);
-        this.field_20068_h = this.field_20069_g;
-        this.yOffset = 1.62F;
-        this.setLocationAndAngles((double)var1.spawnX + 0.5D, (double)(var1.spawnY + 1), (double)var1.spawnZ + 0.5D, 0.0F, 0.0F);
-        this.health = 20;
-        this.field_9351_C = "humanoid";
-        this.field_9353_B = 180.0F;
-        this.fireResistance = 20;
-        this.texture = "/mob/char.png";
+    public EntityPlayer(World world) {
+        super(world);
+        inventory = new InventoryPlayer(this);
+        field_9371_f = 0;
+        score = 0;
+        isSwinging = false;
+        swingProgressInt = 0;
+        damageRemainder = 0;
+        fishEntity = null;
+        field_20069_g = new CraftingInventoryPlayerCB(inventory, !world.multiplayerWorld);
+        field_20068_h = field_20069_g;
+        yOffset = 1.62F;
+        setLocationAndAngles((double) world.spawnX + 0.5D, world.spawnY + 1, (double) world.spawnZ + 0.5D, 0.0F, 0.0F);
+        health = 20;
+        field_9351_C = "humanoid";
+        field_9353_B = 180F;
+        fireResistance = 20;
+        texture = "/mob/char.png";
     }
 
     public void onUpdate() {
         super.onUpdate();
-        if(!this.worldObj.multiplayerWorld && this.field_20068_h != null && !this.field_20068_h.func_20120_b(this)) {
-            this.func_20059_m();
-            this.field_20068_h = this.field_20069_g;
-        }
-
-        this.field_20066_r = this.field_20063_u;
-        this.field_20065_s = this.field_20062_v;
-        this.field_20064_t = this.field_20061_w;
-        double var1 = this.posX - this.field_20063_u;
-        double var3 = this.posY - this.field_20062_v;
-        double var5 = this.posZ - this.field_20061_w;
-        double var7 = 10.0D;
-        if(var1 > var7) {
-            this.field_20066_r = this.field_20063_u = this.posX;
-        }
-
-        if(var5 > var7) {
-            this.field_20064_t = this.field_20061_w = this.posZ;
-        }
-
-        if(var3 > var7) {
-            this.field_20065_s = this.field_20062_v = this.posY;
-        }
-
-        if(var1 < -var7) {
-            this.field_20066_r = this.field_20063_u = this.posX;
-        }
-
-        if(var5 < -var7) {
-            this.field_20064_t = this.field_20061_w = this.posZ;
-        }
-
-        if(var3 < -var7) {
-            this.field_20065_s = this.field_20062_v = this.posY;
-        }
-
-        this.field_20063_u += var1 * 0.25D;
-        this.field_20061_w += var5 * 0.25D;
-        this.field_20062_v += var3 * 0.25D;
+        if (!worldObj.multiplayerWorld && field_20068_h != null && !field_20068_h.func_20120_b(this)) {
+            func_20059_m();
+            field_20068_h = field_20069_g;
+        }
+        field_20066_r = field_20063_u;
+        field_20065_s = field_20062_v;
+        field_20064_t = field_20061_w;
+        double d = posX - field_20063_u;
+        double d1 = posY - field_20062_v;
+        double d2 = posZ - field_20061_w;
+        double d3 = 10D;
+        if (d > d3) {
+            field_20066_r = field_20063_u = posX;
+        }
+        if (d2 > d3) {
+            field_20064_t = field_20061_w = posZ;
+        }
+        if (d1 > d3) {
+            field_20065_s = field_20062_v = posY;
+        }
+        if (d < -d3) {
+            field_20066_r = field_20063_u = posX;
+        }
+        if (d2 < -d3) {
+            field_20064_t = field_20061_w = posZ;
+        }
+        if (d1 < -d3) {
+            field_20065_s = field_20062_v = posY;
+        }
+        field_20063_u += d * 0.25D;
+        field_20061_w += d2 * 0.25D;
+        field_20062_v += d1 * 0.25D;
     }
 
     protected void func_20059_m() {
-        this.field_20068_h = this.field_20069_g;
+        field_20068_h = field_20069_g;
     }
 
     public void func_20046_s() {
-        this.field_20067_q = "http://www.minecraft.net/cloak/get.jsp?user=" + this.field_771_i;
-        this.skinUrl = this.field_20067_q;
+        //field_20067_q = (new StringBuilder()).append("http://www.minecraft.net/cloak/get.jsp?user=").append(field_771_i).toString();
+        skinUrl = field_20067_q;
     }
 
     public void func_350_p() {
         super.func_350_p();
-        this.field_775_e = this.field_774_f;
-        this.field_774_f = 0.0F;
+        field_775_e = field_774_f;
+        field_774_f = 0.0F;
     }
 
     public void preparePlayerToSpawn() {
-        this.yOffset = 1.62F;
-        this.setSize(0.6F, 1.8F);
+        yOffset = 1.62F;
+        setSize(0.6F, 1.8F);
         super.preparePlayerToSpawn();
-        this.health = 20;
-        this.deathTime = 0;
+        health = 20;
+        deathTime = 0;
     }
 
     protected void updatePlayerActionState() {
-        if(this.isSwinging) {
-            ++this.swingProgressInt;
-            if(this.swingProgressInt == 8) {
-                this.swingProgressInt = 0;
-                this.isSwinging = false;
+        if (isSwinging) {
+            swingProgressInt++;
+            if (swingProgressInt == 8) {
+                swingProgressInt = 0;
+                isSwinging = false;
             }
         } else {
-            this.swingProgressInt = 0;
+            swingProgressInt = 0;
         }
-
-        this.swingProgress = (float)this.swingProgressInt / 8.0F;
+        swingProgress = (float) swingProgressInt / 8F;
     }
 
     public void onLivingUpdate() {
-        if(this.worldObj.difficultySetting == 0 && this.health < 20 && this.ticksExisted % 20 * 12 == 0) {
-            this.heal(1);
-        }
+        OnLivingUpdateEvent event = new OnLivingUpdateEvent(this);
+        Ref.getEventManager().handleEvent(event);
 
-        this.inventory.decrementAnimations();
-        this.field_775_e = this.field_774_f;
+        if (worldObj.difficultySetting == 0 && health < 20 && (ticksExisted % 20) * 12 == 0) {
+            heal(1);
+        }
+        inventory.decrementAnimations();
+        field_775_e = field_774_f;
         super.onLivingUpdate();
-        float var1 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
-        float var2 = (float)Math.atan(-this.motionY * (double)0.2F) * 15.0F;
-        if(var1 > 0.1F) {
-            var1 = 0.1F;
-        }
-
-        if(!this.onGround || this.health <= 0) {
-            var1 = 0.0F;
-        }
-
-        if(this.onGround || this.health <= 0) {
-            var2 = 0.0F;
-        }
-
-        this.field_774_f += (var1 - this.field_774_f) * 0.4F;
-        this.field_9328_R += (var2 - this.field_9328_R) * 0.8F;
-        if(this.health > 0) {
-            List var3 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand(1.0D, 0.0D, 1.0D));
-            if(var3 != null) {
-                for(int var4 = 0; var4 < var3.size(); ++var4) {
-                    Entity var5 = (Entity)var3.get(var4);
-                    if(!var5.isDead) {
-                        this.func_451_h(var5);
+        float f = MathHelper.sqrt_double(motionX * motionX + motionZ * motionZ);
+        float f1 = (float) Math.atan(-motionY * 0.20000000298023224D) * 15F;
+        if (f > 0.1F) {
+            f = 0.1F;
+        }
+        if (!onGround || health <= 0) {
+            f = 0.0F;
+        }
+        if (onGround || health <= 0) {
+            f1 = 0.0F;
+        }
+        field_774_f += (f - field_774_f) * 0.4F;
+        field_9328_R += (f1 - field_9328_R) * 0.8F;
+        if (health > 0) {
+            List list = worldObj.getEntitiesWithinAABBExcludingEntity(this, boundingBox.expand(1.0D, 0.0D, 1.0D));
+            if (list != null) {
+                for (int i = 0; i < list.size(); i++) {
+                    Entity entity = (Entity) list.get(i);
+                    if (!entity.isDead) {
+                        func_451_h(entity);
                     }
                 }
+
             }
         }
-
     }
 
-    private void func_451_h(Entity var1) {
-        var1.onCollideWithPlayer(this);
+    private void func_451_h(Entity entity) {
+        entity.onCollideWithPlayer(this);
     }
 
     public int getScore() {
-        return this.score;
+        return score;
     }
 
-    public void onDeath(Entity var1) {
-        super.onDeath(var1);
-        this.setSize(0.2F, 0.2F);
-        this.setPosition(this.posX, this.posY, this.posZ);
-        this.motionY = (double)0.1F;
-        if(this.field_771_i.equals("Notch")) {
-            this.dropPlayerItemWithRandomChoice(new ItemStack(Item.appleRed, 1), true);
+    public void onDeath(Entity entity) {
+        super.onDeath(entity);
+        setSize(0.2F, 0.2F);
+        setPosition(posX, posY, posZ);
+        motionY = 0.10000000149011612D;
+        if (field_771_i.equals("Notch")) {
+            dropPlayerItemWithRandomChoice(new ItemStack(Item.appleRed, 1), true);
         }
-
-        this.inventory.dropAllItems();
-        if(var1 != null) {
-            this.motionX = (double)(-MathHelper.cos((this.attackedAtYaw + this.rotationYaw) * (float)Math.PI / 180.0F) * 0.1F);
-            this.motionZ = (double)(-MathHelper.sin((this.attackedAtYaw + this.rotationYaw) * (float)Math.PI / 180.0F) * 0.1F);
+        inventory.dropAllItems();
+        if (entity != null) {
+            motionX = -MathHelper.cos(((attackedAtYaw + rotationYaw) * 3.141593F) / 180F) * 0.1F;
+            motionZ = -MathHelper.sin(((attackedAtYaw + rotationYaw) * 3.141593F) / 180F) * 0.1F;
         } else {
-            this.motionX = this.motionZ = 0.0D;
+            motionX = motionZ = 0.0D;
         }
-
-        this.yOffset = 0.1F;
+        yOffset = 0.1F;
     }
 
-    public void addToPlayerScore(Entity var1, int var2) {
-        this.score += var2;
+    public void addToPlayerScore(Entity entity, int i) {
+        score += i;
     }
 
     public void func_20060_w() {
-        this.dropPlayerItemWithRandomChoice(this.inventory.decrStackSize(this.inventory.currentItem, 1), false);
-    }
-
-    public void dropPlayerItem(ItemStack var1) {
-        this.dropPlayerItemWithRandomChoice(var1, false);
-    }
-
-    public void dropPlayerItemWithRandomChoice(ItemStack var1, boolean var2) {
-        if(var1 != null) {
-            EntityItem var3 = new EntityItem(this.worldObj, this.posX, this.posY - (double)0.3F + (double)this.func_373_s(), this.posZ, var1);
-            var3.delayBeforeCanPickup = 40;
-            float var4 = 0.1F;
-            float var5;
-            if(var2) {
-                var5 = this.rand.nextFloat() * 0.5F;
-                float var6 = this.rand.nextFloat() * (float)Math.PI * 2.0F;
-                var3.motionX = (double)(-MathHelper.sin(var6) * var5);
-                var3.motionZ = (double)(MathHelper.cos(var6) * var5);
-                var3.motionY = (double)0.2F;
-            } else {
-                var4 = 0.3F;
-                var3.motionX = (double)(-MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * var4);
-                var3.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * var4);
-                var3.motionY = (double)(-MathHelper.sin(this.rotationPitch / 180.0F * (float)Math.PI) * var4 + 0.1F);
-                var4 = 0.02F;
-                var5 = this.rand.nextFloat() * (float)Math.PI * 2.0F;
-                var4 *= this.rand.nextFloat();
-                var3.motionX += Math.cos((double)var5) * (double)var4;
-                var3.motionY += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
-                var3.motionZ += Math.sin((double)var5) * (double)var4;
-            }
-
-            this.joinEntityItemWithWorld(var3);
-        }
-    }
-
-    protected void joinEntityItemWithWorld(EntityItem var1) {
-        this.worldObj.entityJoinedWorld(var1);
-    }
-
-    public float getCurrentPlayerStrVsBlock(Block var1) {
-        float var2 = this.inventory.getStrVsBlock(var1);
-        if(this.isInsideOfMaterial(Material.water)) {
-            var2 /= 5.0F;
-        }
-
-        if(!this.onGround) {
-            var2 /= 5.0F;
-        }
-
-        return var2;
-    }
-
-    public boolean canHarvestBlock(Block var1) {
-        return this.inventory.canHarvestBlock(var1);
-    }
-
-    public void readEntityFromNBT(NBTTagCompound var1) {
-        super.readEntityFromNBT(var1);
-        NBTTagList var2 = var1.getTagList("Inventory");
-        this.inventory.readFromNBT(var2);
-        this.dimension = var1.getInteger("Dimension");
-    }
-
-    public void writeEntityToNBT(NBTTagCompound var1) {
-        super.writeEntityToNBT(var1);
-        var1.setTag("Inventory", this.inventory.writeToNBT(new NBTTagList()));
-        var1.setInteger("Dimension", this.dimension);
-    }
-
-    public void displayGUIChest(IInventory var1) {
-    }
-
-    public void displayWorkbenchGUI(int var1, int var2, int var3) {
-    }
-
-    public void onItemPickup(Entity var1, int var2) {
+        dropPlayerItemWithRandomChoice(inventory.decrStackSize(inventory.currentItem, 1), false);
+    }
+
+    public void dropPlayerItem(ItemStack itemstack) {
+        dropPlayerItemWithRandomChoice(itemstack, false);
+    }
+
+    public void dropPlayerItemWithRandomChoice(ItemStack itemstack, boolean flag) {
+        if (itemstack == null) {
+            return;
+        }
+        EntityItem entityitem = new EntityItem(worldObj, posX, (posY - 0.30000001192092896D) + (double) func_373_s(), posZ, itemstack);
+        entityitem.delayBeforeCanPickup = 40;
+        float f = 0.1F;
+        if (flag) {
+            float f2 = rand.nextFloat() * 0.5F;
+            float f4 = rand.nextFloat() * 3.141593F * 2.0F;
+            entityitem.motionX = -MathHelper.sin(f4) * f2;
+            entityitem.motionZ = MathHelper.cos(f4) * f2;
+            entityitem.motionY = 0.20000000298023224D;
+        } else {
+            float f1 = 0.3F;
+            entityitem.motionX = -MathHelper.sin((rotationYaw / 180F) * 3.141593F) * MathHelper.cos((rotationPitch / 180F) * 3.141593F) * f1;
+            entityitem.motionZ = MathHelper.cos((rotationYaw / 180F) * 3.141593F) * MathHelper.cos((rotationPitch / 180F) * 3.141593F) * f1;
+            entityitem.motionY = -MathHelper.sin((rotationPitch / 180F) * 3.141593F) * f1 + 0.1F;
+            f1 = 0.02F;
+            float f3 = rand.nextFloat() * 3.141593F * 2.0F;
+            f1 *= rand.nextFloat();
+            entityitem.motionX += Math.cos(f3) * (double) f1;
+            entityitem.motionY += (rand.nextFloat() - rand.nextFloat()) * 0.1F;
+            entityitem.motionZ += Math.sin(f3) * (double) f1;
+        }
+        joinEntityItemWithWorld(entityitem);
+    }
+
+    protected void joinEntityItemWithWorld(EntityItem entityitem) {
+        worldObj.entityJoinedWorld(entityitem);
+    }
+
+    public float getCurrentPlayerStrVsBlock(Block block) {
+        float f = inventory.getStrVsBlock(block);
+        if (isInsideOfMaterial(Material.water)) {
+            f /= 5F;
+        }
+        if (!onGround) {
+            f /= 5F;
+        }
+        return f;
+    }
+
+    public boolean canHarvestBlock(Block block) {
+        return inventory.canHarvestBlock(block);
+    }
+
+    public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+        super.readEntityFromNBT(nbttagcompound);
+        NBTTagList nbttaglist = nbttagcompound.getTagList("Inventory");
+        inventory.readFromNBT(nbttaglist);
+        dimension = nbttagcompound.getInteger("Dimension");
+    }
+
+    public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+        super.writeEntityToNBT(nbttagcompound);
+        nbttagcompound.setTag("Inventory", inventory.writeToNBT(new NBTTagList()));
+        nbttagcompound.setInteger("Dimension", dimension);
+    }
+
+    public void displayGUIChest(IInventory iinventory) {
+    }
+
+    public void displayWorkbenchGUI(int i, int j, int k) {
+    }
+
+    public void onItemPickup(Entity entity, int i) {
     }
 
     public float func_373_s() {
         return 0.12F;
     }
 
-    public boolean attackEntityFrom(Entity var1, int var2) {
-        this.field_9344_ag = 0;
-        if(this.health <= 0) {
+    public boolean attackEntityFrom(Entity entity, int i) {
+        field_9344_ag = 0;
+        if (health <= 0) {
+            return false;
+        }
+        if ((entity instanceof EntityMobs) || (entity instanceof EntityArrow)) {
+            if (worldObj.difficultySetting == 0) {
+                i = 0;
+            }
+            if (worldObj.difficultySetting == 1) {
+                i = i / 3 + 1;
+            }
+            if (worldObj.difficultySetting == 3) {
+                i = (i * 3) / 2;
+            }
+        }
+        if (i == 0) {
             return false;
         } else {
-            if(var1 instanceof EntityMobs || var1 instanceof EntityArrow) {
-                if(this.worldObj.difficultySetting == 0) {
-                    var2 = 0;
-                }
-
-                if(this.worldObj.difficultySetting == 1) {
-                    var2 = var2 / 3 + 1;
-                }
-
-                if(this.worldObj.difficultySetting == 3) {
-                    var2 = var2 * 3 / 2;
-                }
-            }
-
-            return var2 == 0 ? false : super.attackEntityFrom(var1, var2);
+            return super.attackEntityFrom(entity, i);
         }
     }
 
-    protected void damageEntity(int var1) {
-        int var2 = 25 - this.inventory.getTotalArmorValue();
-        int var3 = var1 * var2 + this.damageRemainder;
-        this.inventory.damageArmor(var1);
-        var1 = var3 / 25;
-        this.damageRemainder = var3 % 25;
-        super.damageEntity(var1);
-    }
-
-    public void displayGUIFurnace(TileEntityFurnace var1) {
-    }
-
-    public void displayGUIEditSign(TileEntitySign var1) {
-    }
-
-    public void useCurrentItemOnEntity(Entity var1) {
-        var1.interact(this);
+    protected void damageEntity(int i) {
+        int j = 25 - inventory.getTotalArmorValue();
+        int k = i * j + damageRemainder;
+        inventory.damageArmor(i);
+        i = k / 25;
+        damageRemainder = k % 25;
+        super.damageEntity(i);
+    }
+
+    public void displayGUIFurnace(TileEntityFurnace tileentityfurnace) {
+    }
+
+    public void displayGUIEditSign(TileEntitySign tileentitysign) {
+    }
+
+    public void useCurrentItemOnEntity(Entity entity) {
+        entity.interact(this);
     }
 
     public ItemStack getCurrentEquippedItem() {
-        return this.inventory.getCurrentItem();
+        return inventory.getCurrentItem();
     }
 
     public void destroyCurrentEquippedItem() {
-        this.inventory.setInventorySlotContents(this.inventory.currentItem, (ItemStack)null);
+        inventory.setInventorySlotContents(inventory.currentItem, null);
     }
 
     public double getYOffset() {
-        return (double)(this.yOffset - 0.5F);
+        return (double) (yOffset - 0.5F);
     }
 
     public void swingItem() {
-        this.swingProgressInt = -1;
-        this.isSwinging = true;
+        swingProgressInt = -1;
+        isSwinging = true;
     }
 
-    public void attackTargetEntityWithCurrentItem(Entity var1) {
-        int var2 = this.inventory.getDamageVsEntity(var1);
-        if(var2 > 0) {
-            var1.attackEntityFrom(this, var2);
-            ItemStack var3 = this.getCurrentEquippedItem();
-            if(var3 != null && var1 instanceof EntityLiving) {
-                var3.hitEntity((EntityLiving)var1);
-                if(var3.stackSize <= 0) {
-                    var3.func_1097_a(this);
-                    this.destroyCurrentEquippedItem();
+    public void attackTargetEntityWithCurrentItem(Entity entity) {
+        int i = inventory.getDamageVsEntity(entity);
+        if (i > 0) {
+            entity.attackEntityFrom(this, i);
+            ItemStack itemstack = getCurrentEquippedItem();
+            if (itemstack != null && (entity instanceof EntityLiving)) {
+                itemstack.hitEntity((EntityLiving) entity);
+                if (itemstack.stackSize <= 0) {
+                    itemstack.func_1097_a(this);
+                    destroyCurrentEquippedItem();
                 }
             }
         }
-
     }
 
     public void respawnPlayer() {
     }
 
-    public void func_20058_b(ItemStack var1) {
+    public void func_20058_b(ItemStack itemstack) {
     }
 
     public void setEntityDead() {
         super.setEntityDead();
-        this.field_20069_g.onCraftGuiClosed(this);
-        if(this.field_20068_h != null) {
-            this.field_20068_h.onCraftGuiClosed(this);
+        field_20069_g.onCraftGuiClosed(this);
+        if (field_20068_h != null) {
+            field_20068_h.onCraftGuiClosed(this);
         }
-
     }
 }
