--- net/minecraft/src/BlockFlower.java
+++ net/minecraft/src/BlockFlower.java
@@ -3,44 +3,44 @@
 import java.util.Random;
 
 public class BlockFlower extends Block {
-    protected BlockFlower(int var1, int var2) {
-        super(var1, Material.plants);
-        this.blockIndexInTexture = var2;
-        this.setTickOnLoad(true);
-        float var3 = 0.2F;
-        this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, var3 * 3.0F, 0.5F + var3);
-    }
-
-    public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-        return this.canThisPlantGrowOnThisBlockID(var1.getBlockId(var2, var3 - 1, var4));
-    }
-
-    protected boolean canThisPlantGrowOnThisBlockID(int var1) {
-        return var1 == Block.grass.blockID || var1 == Block.dirt.blockID || var1 == Block.tilledField.blockID;
-    }
-
-    public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-        super.onNeighborBlockChange(var1, var2, var3, var4, var5);
-        this.func_268_h(var1, var2, var3, var4);
-    }
-
-    public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-        this.func_268_h(var1, var2, var3, var4);
-    }
-
-    protected final void func_268_h(World var1, int var2, int var3, int var4) {
-        if(!this.canBlockStay(var1, var2, var3, var4)) {
-            this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-            var1.setBlockWithNotify(var2, var3, var4, 0);
+
+    protected BlockFlower(int i, int j) {
+        super(i, Material.plants);
+        blockIndexInTexture = j;
+        setTickOnLoad(true);
+        float f = 0.2F;
+        setBlockBounds(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, f * 3F, 0.5F + f);
+    }
+
+    public boolean canPlaceBlockAt(World world, int i, int j, int k) {
+        return canThisPlantGrowOnThisBlockID(world.getBlockId(i, j - 1, k));
+    }
+
+    protected boolean canThisPlantGrowOnThisBlockID(int i) {
+        return i == Block.grass.blockID || i == Block.dirt.blockID || i == Block.tilledField.blockID;
+    }
+
+    public void onNeighborBlockChange(World world, int i, int j, int k, int l) {
+        super.onNeighborBlockChange(world, i, j, k, l);
+        func_268_h(world, i, j, k);
+    }
+
+    public void updateTick(World world, int i, int j, int k, Random random) {
+        func_268_h(world, i, j, k);
+    }
+
+    protected final void func_268_h(World world, int i, int j, int k) {
+        if (!canBlockStay(world, i, j, k)) {
+            dropBlockAsItem(world, i, j, k, world.getBlockMetadata(i, j, k));
+            world.setBlockWithNotify(i, j, k, 0);
         }
-
-    }
-
-    public boolean canBlockStay(World var1, int var2, int var3, int var4) {
-        return (var1.getBlockLightValue(var2, var3, var4) >= 8 || var1.canBlockSeeTheSky(var2, var3, var4)) && this.canThisPlantGrowOnThisBlockID(var1.getBlockId(var2, var3 - 1, var4));
-    }
-
-    public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+    }
+
+    public boolean canBlockStay(World world, int i, int j, int k) {
+        return (world.getBlockLightValue(i, j, k) >= 8 || world.canBlockSeeTheSky(i, j, k)) && canThisPlantGrowOnThisBlockID(world.getBlockId(i, j - 1, k));
+    }
+
+    public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int i, int j, int k) {
         return null;
     }
 
