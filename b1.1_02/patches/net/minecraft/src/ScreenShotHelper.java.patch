--- net/minecraft/src/ScreenShotHelper.java
+++ net/minecraft/src/ScreenShotHelper.java
@@ -1,66 +1,70 @@
 package net.minecraft.src;
 
+import cc.noxiuam.titanic.Ref;
+import cc.noxiuam.titanic.event.impl.SuccessfulScreenshotEvent;
+import org.lwjgl.BufferUtils;
+import org.lwjgl.opengl.GL11;
+
+import javax.imageio.ImageIO;
 import java.awt.image.BufferedImage;
 import java.io.File;
 import java.nio.ByteBuffer;
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.Date;
-import javax.imageio.ImageIO;
-import org.lwjgl.BufferUtils;
-import org.lwjgl.opengl.GL11;
 
 public class ScreenShotHelper {
+
     private static DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss");
     private static ByteBuffer buffer;
-    private static byte[] pixelData;
-    private static int[] imageData;
+    private static byte pixelData[];
+    private static int imageData[];
+    public ScreenShotHelper() {
+    }
 
-    public static String saveScreenshot(File var0, int var1, int var2) {
+    public static String saveScreenshot(File file, int i, int j) {
         try {
-            File var3 = new File(var0, "screenshots");
-            var3.mkdir();
-            if(buffer == null || buffer.capacity() < var1 * var2 * 3) {
-                buffer = BufferUtils.createByteBuffer(var1 * var2 * 3);
-                pixelData = new byte[var1 * var2 * 3];
-                imageData = new int[var1 * var2];
-            }
-
-            GL11.glPixelStorei(GL11.GL_PACK_ALIGNMENT, 1);
-            GL11.glPixelStorei(GL11.GL_UNPACK_ALIGNMENT, 1);
-            buffer.clear();
-            GL11.glReadPixels(0, 0, var1, var2, GL11.GL_RGB, GL11.GL_UNSIGNED_BYTE, (ByteBuffer)buffer);
-            buffer.clear();
-            String var4 = "" + dateFormat.format(new Date());
-            int var6 = 1;
-
-            while(true) {
-                File var5 = new File(var3, var4 + (var6 == 1 ? "" : "_" + var6) + ".png");
-                if(!var5.exists()) {
-                    buffer.get(pixelData);
-
-                    for(int var7 = 0; var7 < var1; ++var7) {
-                        for(int var8 = 0; var8 < var2; ++var8) {
-                            int var9 = var7 + (var2 - var8 - 1) * var1;
-                            int var10 = pixelData[var9 * 3 + 0] & 255;
-                            int var11 = pixelData[var9 * 3 + 1] & 255;
-                            int var12 = pixelData[var9 * 3 + 2] & 255;
-                            int var13 = -16777216 | var10 << 16 | var11 << 8 | var12;
-                            imageData[var7 + var8 * var1] = var13;
-                        }
-                    }
-
-                    BufferedImage var15 = new BufferedImage(var1, var2, 1);
-                    var15.setRGB(0, 0, var1, var2, imageData, 0, var1);
-                    ImageIO.write(var15, "png", var5);
-                    return "Saved screenshot as " + var5.getName();
+            File file1 = new File(file, "screenshots");
+            file1.mkdir();
+            if (buffer == null || buffer.capacity() < i * j * 3) {
+                buffer = BufferUtils.createByteBuffer(i * j * 3);
+                pixelData = new byte[i * j * 3];
+                imageData = new int[i * j];
+            }
+            GL11.glPixelStorei(3333 /*GL_PACK_ALIGNMENT*/, 1);
+            GL11.glPixelStorei(3317 /*GL_UNPACK_ALIGNMENT*/, 1);
+            buffer.clear();
+            GL11.glReadPixels(0, 0, i, j, 6407 /*GL_RGB*/, 5121 /*GL_UNSIGNED_BYTE*/, buffer);
+            buffer.clear();
+            String s = (new StringBuilder()).append("").append(dateFormat.format(new Date())).toString();
+            File file2;
+            for (int k = 1; (file2 = new File(file1, (new StringBuilder()).append(s).append(k != 1 ? (new StringBuilder()).append("_").append(k).toString() : "").append(".png").toString())).exists(); k++) {
+            }
+            buffer.get(pixelData);
+            for (int l = 0; l < i; l++) {
+                for (int i1 = 0; i1 < j; i1++) {
+                    int j1 = l + (j - i1 - 1) * i;
+                    int k1 = pixelData[j1 * 3 + 0] & 0xff;
+                    int l1 = pixelData[j1 * 3 + 1] & 0xff;
+                    int i2 = pixelData[j1 * 3 + 2] & 0xff;
+                    int j2 = 0xff000000 | k1 << 16 | l1 << 8 | i2;
+                    imageData[l + i1 * i] = j2;
                 }
 
-                ++var6;
             }
-        } catch (Exception var14) {
-            var14.printStackTrace();
-            return "Failed to save: " + var14;
+
+            BufferedImage bufferedimage = new BufferedImage(i, j, 1);
+            bufferedimage.setRGB(0, 0, i, j, imageData, 0, i);
+            ImageIO.write(bufferedimage, "png", file2);
+
+            SuccessfulScreenshotEvent event = new SuccessfulScreenshotEvent(file2.getName());
+            Ref.getEventManager().handleEvent(event);
+
+            return (new StringBuilder()).append("Saved screenshot as ").append(file2.getName()).toString();
+        } catch (Exception exception) {
+            exception.printStackTrace();
+            return (new StringBuilder()).append("Failed to save: ").append(exception).toString();
         }
     }
+
 }
