--- net/minecraft/src/EntityFish.java
+++ net/minecraft/src/EntityFish.java
@@ -3,17 +3,18 @@
 import java.util.List;
 
 public class EntityFish extends Entity {
+
+    public int field_4098_a;
+    public EntityPlayer field_4097_b;
+    public Entity field_4096_c;
     private int field_4095_d;
     private int field_4094_e;
     private int field_4093_f;
     private int field_4092_g;
     private boolean field_4091_h;
-    public int field_4098_a;
-    public EntityPlayer field_4097_b;
     private int field_4090_i;
     private int field_4089_j;
     private int field_4088_k;
-    public Entity field_4096_c;
     private int field_6388_l;
     private double field_6387_m;
     private double field_6386_n;
@@ -23,307 +24,279 @@
     private double velocityX;
     private double velocityY;
     private double velocityZ;
-
-    public EntityFish(World var1) {
-        super(var1);
-        this.field_4095_d = -1;
-        this.field_4094_e = -1;
-        this.field_4093_f = -1;
-        this.field_4092_g = 0;
-        this.field_4091_h = false;
-        this.field_4098_a = 0;
-        this.field_4089_j = 0;
-        this.field_4088_k = 0;
-        this.field_4096_c = null;
-        this.setSize(0.25F, 0.25F);
-    }
-
-    public boolean isInRangeToRenderDist(double var1) {
-        double var3 = this.boundingBox.getAverageEdgeLength() * 4.0D;
-        var3 *= 64.0D;
-        return var1 < var3 * var3;
-    }
-
-    public EntityFish(World var1, double var2, double var4, double var6) {
-        this(var1);
-        this.setPosition(var2, var4, var6);
-    }
-
-    public EntityFish(World var1, EntityPlayer var2) {
-        super(var1);
-        this.field_4095_d = -1;
-        this.field_4094_e = -1;
-        this.field_4093_f = -1;
-        this.field_4092_g = 0;
-        this.field_4091_h = false;
-        this.field_4098_a = 0;
-        this.field_4089_j = 0;
-        this.field_4088_k = 0;
-        this.field_4096_c = null;
-        this.field_4097_b = var2;
-        this.field_4097_b.fishEntity = this;
-        this.setSize(0.25F, 0.25F);
-        this.setLocationAndAngles(var2.posX, var2.posY + 1.62D - (double)var2.yOffset, var2.posZ, var2.rotationYaw, var2.rotationPitch);
-        this.posX -= (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
-        this.posY -= (double)0.1F;
-        this.posZ -= (double)(MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
-        this.setPosition(this.posX, this.posY, this.posZ);
-        this.yOffset = 0.0F;
-        float var3 = 0.4F;
-        this.motionX = (double)(-MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * var3);
-        this.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * var3);
-        this.motionY = (double)(-MathHelper.sin(this.rotationPitch / 180.0F * (float)Math.PI) * var3);
-        this.func_4042_a(this.motionX, this.motionY, this.motionZ, 1.5F, 1.0F);
-    }
-
-    public void func_4042_a(double var1, double var3, double var5, float var7, float var8) {
-        float var9 = MathHelper.sqrt_double(var1 * var1 + var3 * var3 + var5 * var5);
-        var1 /= (double)var9;
-        var3 /= (double)var9;
-        var5 /= (double)var9;
-        var1 += this.rand.nextGaussian() * (double)0.0075F * (double)var8;
-        var3 += this.rand.nextGaussian() * (double)0.0075F * (double)var8;
-        var5 += this.rand.nextGaussian() * (double)0.0075F * (double)var8;
-        var1 *= (double)var7;
-        var3 *= (double)var7;
-        var5 *= (double)var7;
-        this.motionX = var1;
-        this.motionY = var3;
-        this.motionZ = var5;
-        float var10 = MathHelper.sqrt_double(var1 * var1 + var5 * var5);
-        this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(var1, var5) * 180.0D / (double)((float)Math.PI));
-        this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(var3, (double)var10) * 180.0D / (double)((float)Math.PI));
-        this.field_4090_i = 0;
-    }
-
-    public void setPositionAndRotation2(double var1, double var3, double var5, float var7, float var8, int var9) {
-        this.field_6387_m = var1;
-        this.field_6386_n = var3;
-        this.field_6385_o = var5;
-        this.field_6384_p = (double)var7;
-        this.field_6383_q = (double)var8;
-        this.field_6388_l = var9;
-        this.motionX = this.velocityX;
-        this.motionY = this.velocityY;
-        this.motionZ = this.velocityZ;
-    }
-
-    public void setVelocity(double var1, double var3, double var5) {
-        this.velocityX = this.motionX = var1;
-        this.velocityY = this.motionY = var3;
-        this.velocityZ = this.motionZ = var5;
+    public EntityFish(World world) {
+        super(world);
+        field_4095_d = -1;
+        field_4094_e = -1;
+        field_4093_f = -1;
+        field_4092_g = 0;
+        field_4091_h = false;
+        field_4098_a = 0;
+        field_4089_j = 0;
+        field_4088_k = 0;
+        field_4096_c = null;
+        setSize(0.25F, 0.25F);
+    }
+    public EntityFish(World world, double d, double d1, double d2) {
+        this(world);
+        setPosition(d, d1, d2);
+    }
+    public EntityFish(World world, EntityPlayer entityplayer) {
+        super(world);
+        field_4095_d = -1;
+        field_4094_e = -1;
+        field_4093_f = -1;
+        field_4092_g = 0;
+        field_4091_h = false;
+        field_4098_a = 0;
+        field_4089_j = 0;
+        field_4088_k = 0;
+        field_4096_c = null;
+        field_4097_b = entityplayer;
+        field_4097_b.fishEntity = this;
+        setSize(0.25F, 0.25F);
+        setLocationAndAngles(entityplayer.posX, (entityplayer.posY + 1.6200000000000001D) - (double) entityplayer.yOffset, entityplayer.posZ, entityplayer.rotationYaw, entityplayer.rotationPitch);
+        posX -= MathHelper.cos((rotationYaw / 180F) * 3.141593F) * 0.16F;
+        posY -= 0.10000000149011612D;
+        posZ -= MathHelper.sin((rotationYaw / 180F) * 3.141593F) * 0.16F;
+        setPosition(posX, posY, posZ);
+        yOffset = 0.0F;
+        float f = 0.4F;
+        motionX = -MathHelper.sin((rotationYaw / 180F) * 3.141593F) * MathHelper.cos((rotationPitch / 180F) * 3.141593F) * f;
+        motionZ = MathHelper.cos((rotationYaw / 180F) * 3.141593F) * MathHelper.cos((rotationPitch / 180F) * 3.141593F) * f;
+        motionY = -MathHelper.sin((rotationPitch / 180F) * 3.141593F) * f;
+        func_4042_a(motionX, motionY, motionZ, 1.5F, 1.0F);
+    }
+
+    public boolean isInRangeToRenderDist(double d) {
+        double d1 = boundingBox.getAverageEdgeLength() * 4D;
+        d1 *= 64D;
+        return d < d1 * d1;
+    }
+
+    public void func_4042_a(double d, double d1, double d2, float f,
+                            float f1) {
+        float f2 = MathHelper.sqrt_double(d * d + d1 * d1 + d2 * d2);
+        d /= f2;
+        d1 /= f2;
+        d2 /= f2;
+        d += rand.nextGaussian() * 0.0074999998323619366D * (double) f1;
+        d1 += rand.nextGaussian() * 0.0074999998323619366D * (double) f1;
+        d2 += rand.nextGaussian() * 0.0074999998323619366D * (double) f1;
+        d *= f;
+        d1 *= f;
+        d2 *= f;
+        motionX = d;
+        motionY = d1;
+        motionZ = d2;
+        float f3 = MathHelper.sqrt_double(d * d + d2 * d2);
+        prevRotationYaw = rotationYaw = (float) ((Math.atan2(d, d2) * 180D) / 3.1415927410125732D);
+        prevRotationPitch = rotationPitch = (float) ((Math.atan2(d1, f3) * 180D) / 3.1415927410125732D);
+        field_4090_i = 0;
+    }
+
+    public void setPositionAndRotation2(double d, double d1, double d2, float f,
+                                        float f1, int i) {
+        field_6387_m = d;
+        field_6386_n = d1;
+        field_6385_o = d2;
+        field_6384_p = f;
+        field_6383_q = f1;
+        field_6388_l = i;
+        motionX = velocityX;
+        motionY = velocityY;
+        motionZ = velocityZ;
+    }
+
+    public void setVelocity(double d, double d1, double d2) {
+        velocityX = motionX = d;
+        velocityY = motionY = d1;
+        velocityZ = motionZ = d2;
     }
 
     public void onUpdate() {
         super.onUpdate();
-        if(this.field_6388_l > 0) {
-            double var21 = this.posX + (this.field_6387_m - this.posX) / (double)this.field_6388_l;
-            double var22 = this.posY + (this.field_6386_n - this.posY) / (double)this.field_6388_l;
-            double var23 = this.posZ + (this.field_6385_o - this.posZ) / (double)this.field_6388_l;
-
-            double var7;
-            for(var7 = this.field_6384_p - (double)this.rotationYaw; var7 < -180.0D; var7 += 360.0D) {
-            }
-
-            while(var7 >= 180.0D) {
-                var7 -= 360.0D;
-            }
-
-            this.rotationYaw = (float)((double)this.rotationYaw + var7 / (double)this.field_6388_l);
-            this.rotationPitch = (float)((double)this.rotationPitch + (this.field_6383_q - (double)this.rotationPitch) / (double)this.field_6388_l);
-            --this.field_6388_l;
-            this.setPosition(var21, var22, var23);
-            this.setRotation(this.rotationYaw, this.rotationPitch);
-        } else {
-            if(!this.worldObj.multiplayerWorld) {
-                ItemStack var1 = this.field_4097_b.getCurrentEquippedItem();
-                if(this.field_4097_b.isDead || !this.field_4097_b.isEntityAlive() || var1 == null || var1.getItem() != Item.fishingRod || this.getDistanceSqToEntity(this.field_4097_b) > 1024.0D) {
-                    this.setEntityDead();
-                    this.field_4097_b.fishEntity = null;
-                    return;
-                }
-
-                if(this.field_4096_c != null) {
-                    if(!this.field_4096_c.isDead) {
-                        this.posX = this.field_4096_c.posX;
-                        this.posY = this.field_4096_c.boundingBox.minY + (double)this.field_4096_c.height * 0.8D;
-                        this.posZ = this.field_4096_c.posZ;
-                        return;
-                    }
-
-                    this.field_4096_c = null;
-                }
-            }
-
-            if(this.field_4098_a > 0) {
-                --this.field_4098_a;
-            }
-
-            if(this.field_4091_h) {
-                int var19 = this.worldObj.getBlockId(this.field_4095_d, this.field_4094_e, this.field_4093_f);
-                if(var19 == this.field_4092_g) {
-                    ++this.field_4090_i;
-                    if(this.field_4090_i == 1200) {
-                        this.setEntityDead();
-                    }
-
-                    return;
-                }
-
-                this.field_4091_h = false;
-                this.motionX *= (double)(this.rand.nextFloat() * 0.2F);
-                this.motionY *= (double)(this.rand.nextFloat() * 0.2F);
-                this.motionZ *= (double)(this.rand.nextFloat() * 0.2F);
-                this.field_4090_i = 0;
-                this.field_4089_j = 0;
-            } else {
-                ++this.field_4089_j;
-            }
-
-            Vec3D var20 = Vec3D.createVector(this.posX, this.posY, this.posZ);
-            Vec3D var2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
-            MovingObjectPosition var3 = this.worldObj.rayTraceBlocks(var20, var2);
-            var20 = Vec3D.createVector(this.posX, this.posY, this.posZ);
-            var2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
-            if(var3 != null) {
-                var2 = Vec3D.createVector(var3.hitVec.xCoord, var3.hitVec.yCoord, var3.hitVec.zCoord);
-            }
-
-            Entity var4 = null;
-            List var5 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
-            double var6 = 0.0D;
-
-            double var13;
-            for(int var8 = 0; var8 < var5.size(); ++var8) {
-                Entity var9 = (Entity)var5.get(var8);
-                if(var9.canBeCollidedWith() && (var9 != this.field_4097_b || this.field_4089_j >= 5)) {
-                    float var10 = 0.3F;
-                    AxisAlignedBB var11 = var9.boundingBox.expand((double)var10, (double)var10, (double)var10);
-                    MovingObjectPosition var12 = var11.func_1169_a(var20, var2);
-                    if(var12 != null) {
-                        var13 = var20.distanceTo(var12.hitVec);
-                        if(var13 < var6 || var6 == 0.0D) {
-                            var4 = var9;
-                            var6 = var13;
-                        }
-                    }
-                }
-            }
-
-            if(var4 != null) {
-                var3 = new MovingObjectPosition(var4);
-            }
-
-            if(var3 != null) {
-                if(var3.entityHit != null) {
-                    if(var3.entityHit.attackEntityFrom(this.field_4097_b, 0)) {
-                        this.field_4096_c = var3.entityHit;
-                    }
+        if (field_6388_l > 0) {
+            double d = posX + (field_6387_m - posX) / (double) field_6388_l;
+            double d1 = posY + (field_6386_n - posY) / (double) field_6388_l;
+            double d2 = posZ + (field_6385_o - posZ) / (double) field_6388_l;
+            double d4;
+            for (d4 = field_6384_p - (double) rotationYaw; d4 < -180D; d4 += 360D) {
+            }
+            for (; d4 >= 180D; d4 -= 360D) {
+            }
+            rotationYaw += d4 / (double) field_6388_l;
+            rotationPitch += (field_6383_q - (double) rotationPitch) / (double) field_6388_l;
+            field_6388_l--;
+            setPosition(d, d1, d2);
+            setRotation(rotationYaw, rotationPitch);
+            return;
+        }
+        if (!worldObj.multiplayerWorld) {
+            ItemStack itemstack = field_4097_b.getCurrentEquippedItem();
+            if (field_4097_b.isDead || !field_4097_b.isEntityAlive() || itemstack == null || itemstack.getItem() != Item.fishingRod || getDistanceSqToEntity(field_4097_b) > 1024D) {
+                setEntityDead();
+                field_4097_b.fishEntity = null;
+                return;
+            }
+            if (field_4096_c != null) {
+                if (field_4096_c.isDead) {
+                    field_4096_c = null;
                 } else {
-                    this.field_4091_h = true;
-                }
-            }
-
-            if(!this.field_4091_h) {
-                this.moveEntity(this.motionX, this.motionY, this.motionZ);
-                float var24 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
-                this.rotationYaw = (float)(Math.atan2(this.motionX, this.motionZ) * 180.0D / (double)((float)Math.PI));
-
-                for(this.rotationPitch = (float)(Math.atan2(this.motionY, (double)var24) * 180.0D / (double)((float)Math.PI)); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
-                }
-
-                while(this.rotationPitch - this.prevRotationPitch >= 180.0F) {
-                    this.prevRotationPitch += 360.0F;
-                }
-
-                while(this.rotationYaw - this.prevRotationYaw < -180.0F) {
-                    this.prevRotationYaw -= 360.0F;
-                }
-
-                while(this.rotationYaw - this.prevRotationYaw >= 180.0F) {
-                    this.prevRotationYaw += 360.0F;
-                }
-
-                this.rotationPitch = this.prevRotationPitch + (this.rotationPitch - this.prevRotationPitch) * 0.2F;
-                this.rotationYaw = this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * 0.2F;
-                float var25 = 0.92F;
-                if(this.onGround || this.isCollidedHorizontally) {
-                    var25 = 0.5F;
-                }
-
-                byte var26 = 5;
-                double var27 = 0.0D;
-
-                for(int var28 = 0; var28 < var26; ++var28) {
-                    double var14 = this.boundingBox.minY + (this.boundingBox.maxY - this.boundingBox.minY) * (double)(var28 + 0) / (double)var26 - 0.125D + 0.125D;
-                    double var16 = this.boundingBox.minY + (this.boundingBox.maxY - this.boundingBox.minY) * (double)(var28 + 1) / (double)var26 - 0.125D + 0.125D;
-                    AxisAlignedBB var18 = AxisAlignedBB.getBoundingBoxFromPool(this.boundingBox.minX, var14, this.boundingBox.minZ, this.boundingBox.maxX, var16, this.boundingBox.maxZ);
-                    if(this.worldObj.func_707_b(var18, Material.water)) {
-                        var27 += 1.0D / (double)var26;
-                    }
-                }
-
-                if(var27 > 0.0D) {
-                    if(this.field_4088_k > 0) {
-                        --this.field_4088_k;
-                    } else if(this.rand.nextInt(500) == 0) {
-                        this.field_4088_k = this.rand.nextInt(30) + 10;
-                        this.motionY -= (double)0.2F;
-                        this.worldObj.playSoundAtEntity(this, "random.splash", 0.25F, 1.0F + (this.rand.nextFloat() - this.rand.nextFloat()) * 0.4F);
-                        float var29 = (float)MathHelper.floor_double(this.boundingBox.minY);
-
-                        float var15;
-                        int var30;
-                        float var31;
-                        for(var30 = 0; (float)var30 < 1.0F + this.width * 20.0F; ++var30) {
-                            var15 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
-                            var31 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
-                            this.worldObj.spawnParticle("bubble", this.posX + (double)var15, (double)(var29 + 1.0F), this.posZ + (double)var31, this.motionX, this.motionY - (double)(this.rand.nextFloat() * 0.2F), this.motionZ);
-                        }
-
-                        for(var30 = 0; (float)var30 < 1.0F + this.width * 20.0F; ++var30) {
-                            var15 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
-                            var31 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
-                            this.worldObj.spawnParticle("splash", this.posX + (double)var15, (double)(var29 + 1.0F), this.posZ + (double)var31, this.motionX, this.motionY, this.motionZ);
-                        }
-                    }
-                }
-
-                if(this.field_4088_k > 0) {
-                    this.motionY -= (double)(this.rand.nextFloat() * this.rand.nextFloat() * this.rand.nextFloat()) * 0.2D;
-                }
-
-                var13 = var27 * 2.0D - 1.0D;
-                this.motionY += (double)0.04F * var13;
-                if(var27 > 0.0D) {
-                    var25 = (float)((double)var25 * 0.9D);
-                    this.motionY *= 0.8D;
-                }
-
-                this.motionX *= (double)var25;
-                this.motionY *= (double)var25;
-                this.motionZ *= (double)var25;
-                this.setPosition(this.posX, this.posY, this.posZ);
-            }
-        }
-    }
-
-    public void writeEntityToNBT(NBTTagCompound var1) {
-        var1.setShort("xTile", (short)this.field_4095_d);
-        var1.setShort("yTile", (short)this.field_4094_e);
-        var1.setShort("zTile", (short)this.field_4093_f);
-        var1.setByte("inTile", (byte)this.field_4092_g);
-        var1.setByte("shake", (byte)this.field_4098_a);
-        var1.setByte("inGround", (byte)(this.field_4091_h ? 1 : 0));
-    }
-
-    public void readEntityFromNBT(NBTTagCompound var1) {
-        this.field_4095_d = var1.getShort("xTile");
-        this.field_4094_e = var1.getShort("yTile");
-        this.field_4093_f = var1.getShort("zTile");
-        this.field_4092_g = var1.getByte("inTile") & 255;
-        this.field_4098_a = var1.getByte("shake") & 255;
-        this.field_4091_h = var1.getByte("inGround") == 1;
+                    posX = field_4096_c.posX;
+                    posY = field_4096_c.boundingBox.minY + (double) field_4096_c.height * 0.80000000000000004D;
+                    posZ = field_4096_c.posZ;
+                    return;
+                }
+            }
+        }
+        if (field_4098_a > 0) {
+            field_4098_a--;
+        }
+        if (field_4091_h) {
+            int i = worldObj.getBlockId(field_4095_d, field_4094_e, field_4093_f);
+            if (i != field_4092_g) {
+                field_4091_h = false;
+                motionX *= rand.nextFloat() * 0.2F;
+                motionY *= rand.nextFloat() * 0.2F;
+                motionZ *= rand.nextFloat() * 0.2F;
+                field_4090_i = 0;
+                field_4089_j = 0;
+            } else {
+                field_4090_i++;
+                if (field_4090_i == 1200) {
+                    setEntityDead();
+                }
+                return;
+            }
+        } else {
+            field_4089_j++;
+        }
+        Vec3D vec3d = Vec3D.createVector(posX, posY, posZ);
+        Vec3D vec3d1 = Vec3D.createVector(posX + motionX, posY + motionY, posZ + motionZ);
+        MovingObjectPosition movingobjectposition = worldObj.rayTraceBlocks(vec3d, vec3d1);
+        vec3d = Vec3D.createVector(posX, posY, posZ);
+        vec3d1 = Vec3D.createVector(posX + motionX, posY + motionY, posZ + motionZ);
+        if (movingobjectposition != null) {
+            vec3d1 = Vec3D.createVector(movingobjectposition.hitVec.xCoord, movingobjectposition.hitVec.yCoord, movingobjectposition.hitVec.zCoord);
+        }
+        Entity entity = null;
+        List list = worldObj.getEntitiesWithinAABBExcludingEntity(this, boundingBox.addCoord(motionX, motionY, motionZ).expand(1.0D, 1.0D, 1.0D));
+        double d3 = 0.0D;
+        for (int j = 0; j < list.size(); j++) {
+            Entity entity1 = (Entity) list.get(j);
+            if (!entity1.canBeCollidedWith() || entity1 == field_4097_b && field_4089_j < 5) {
+                continue;
+            }
+            float f2 = 0.3F;
+            AxisAlignedBB axisalignedbb = entity1.boundingBox.expand(f2, f2, f2);
+            MovingObjectPosition movingobjectposition1 = axisalignedbb.func_1169_a(vec3d, vec3d1);
+            if (movingobjectposition1 == null) {
+                continue;
+            }
+            double d6 = vec3d.distanceTo(movingobjectposition1.hitVec);
+            if (d6 < d3 || d3 == 0.0D) {
+                entity = entity1;
+                d3 = d6;
+            }
+        }
+
+        if (entity != null) {
+            movingobjectposition = new MovingObjectPosition(entity);
+        }
+        if (movingobjectposition != null) {
+            if (movingobjectposition.entityHit != null) {
+                if (movingobjectposition.entityHit.attackEntityFrom(field_4097_b, 0)) {
+                    field_4096_c = movingobjectposition.entityHit;
+                }
+            } else {
+                field_4091_h = true;
+            }
+        }
+        if (field_4091_h) {
+            return;
+        }
+        moveEntity(motionX, motionY, motionZ);
+        float f = MathHelper.sqrt_double(motionX * motionX + motionZ * motionZ);
+        rotationYaw = (float) ((Math.atan2(motionX, motionZ) * 180D) / 3.1415927410125732D);
+        for (rotationPitch = (float) ((Math.atan2(motionY, f) * 180D) / 3.1415927410125732D); rotationPitch - prevRotationPitch < -180F; prevRotationPitch -= 360F) {
+        }
+        for (; rotationPitch - prevRotationPitch >= 180F; prevRotationPitch += 360F) {
+        }
+        for (; rotationYaw - prevRotationYaw < -180F; prevRotationYaw -= 360F) {
+        }
+        for (; rotationYaw - prevRotationYaw >= 180F; prevRotationYaw += 360F) {
+        }
+        rotationPitch = prevRotationPitch + (rotationPitch - prevRotationPitch) * 0.2F;
+        rotationYaw = prevRotationYaw + (rotationYaw - prevRotationYaw) * 0.2F;
+        float f1 = 0.92F;
+        if (onGround || isCollidedHorizontally) {
+            f1 = 0.5F;
+        }
+        int k = 5;
+        double d5 = 0.0D;
+        for (int l = 0; l < k; l++) {
+            double d8 = ((boundingBox.minY + ((boundingBox.maxY - boundingBox.minY) * (double) (l)) / (double) k) - 0.125D) + 0.125D;
+            double d9 = ((boundingBox.minY + ((boundingBox.maxY - boundingBox.minY) * (double) (l + 1)) / (double) k) - 0.125D) + 0.125D;
+            AxisAlignedBB axisalignedbb1 = AxisAlignedBB.getBoundingBoxFromPool(boundingBox.minX, d8, boundingBox.minZ, boundingBox.maxX, d9, boundingBox.maxZ);
+            if (worldObj.func_707_b(axisalignedbb1, Material.water)) {
+                d5 += 1.0D / (double) k;
+            }
+        }
+
+        if (d5 > 0.0D) {
+            if (field_4088_k > 0) {
+                field_4088_k--;
+            } else if (rand.nextInt(500) == 0) {
+                field_4088_k = rand.nextInt(30) + 10;
+                motionY -= 0.20000000298023224D;
+                worldObj.playSoundAtEntity(this, "random.splash", 0.25F, 1.0F + (rand.nextFloat() - rand.nextFloat()) * 0.4F);
+                float f3 = MathHelper.floor_double(boundingBox.minY);
+                for (int i1 = 0; (float) i1 < 1.0F + width * 20F; i1++) {
+                    float f4 = (rand.nextFloat() * 2.0F - 1.0F) * width;
+                    float f6 = (rand.nextFloat() * 2.0F - 1.0F) * width;
+                    worldObj.spawnParticle("bubble", posX + (double) f4, f3 + 1.0F, posZ + (double) f6, motionX, motionY - (double) (rand.nextFloat() * 0.2F), motionZ);
+                }
+
+                for (int j1 = 0; (float) j1 < 1.0F + width * 20F; j1++) {
+                    float f5 = (rand.nextFloat() * 2.0F - 1.0F) * width;
+                    float f7 = (rand.nextFloat() * 2.0F - 1.0F) * width;
+                    worldObj.spawnParticle("splash", posX + (double) f5, f3 + 1.0F, posZ + (double) f7, motionX, motionY, motionZ);
+                }
+
+            }
+        }
+        if (field_4088_k > 0) {
+            motionY -= (double) (rand.nextFloat() * rand.nextFloat() * rand.nextFloat()) * 0.20000000000000001D;
+        }
+        double d7 = d5 * 2D - 1.0D;
+        motionY += 0.039999999105930328D * d7;
+        if (d5 > 0.0D) {
+            f1 = (float) ((double) f1 * 0.90000000000000002D);
+            motionY *= 0.80000000000000004D;
+        }
+        motionX *= f1;
+        motionY *= f1;
+        motionZ *= f1;
+        setPosition(posX, posY, posZ);
+    }
+
+    public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+        nbttagcompound.setShort("xTile", (short) field_4095_d);
+        nbttagcompound.setShort("yTile", (short) field_4094_e);
+        nbttagcompound.setShort("zTile", (short) field_4093_f);
+        nbttagcompound.setByte("inTile", (byte) field_4092_g);
+        nbttagcompound.setByte("shake", (byte) field_4098_a);
+        nbttagcompound.setByte("inGround", (byte) (field_4091_h ? 1 : 0));
+    }
+
+    public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+        field_4095_d = nbttagcompound.getShort("xTile");
+        field_4094_e = nbttagcompound.getShort("yTile");
+        field_4093_f = nbttagcompound.getShort("zTile");
+        field_4092_g = nbttagcompound.getByte("inTile") & 0xff;
+        field_4098_a = nbttagcompound.getByte("shake") & 0xff;
+        field_4091_h = nbttagcompound.getByte("inGround") == 1;
     }
 
     public float func_392_h_() {
@@ -331,37 +304,35 @@
     }
 
     public int func_4043_i() {
-        byte var1 = 0;
-        if(this.field_4096_c != null) {
-            double var2 = this.field_4097_b.posX - this.posX;
-            double var4 = this.field_4097_b.posY - this.posY;
-            double var6 = this.field_4097_b.posZ - this.posZ;
-            double var8 = (double)MathHelper.sqrt_double(var2 * var2 + var4 * var4 + var6 * var6);
-            double var10 = 0.1D;
-            this.field_4096_c.motionX += var2 * var10;
-            this.field_4096_c.motionY += var4 * var10 + (double)MathHelper.sqrt_double(var8) * 0.08D;
-            this.field_4096_c.motionZ += var6 * var10;
-            var1 = 3;
-        } else if(this.field_4088_k > 0) {
-            EntityItem var13 = new EntityItem(this.worldObj, this.posX, this.posY, this.posZ, new ItemStack(Item.fishRaw.shiftedIndex));
-            double var3 = this.field_4097_b.posX - this.posX;
-            double var5 = this.field_4097_b.posY - this.posY;
-            double var7 = this.field_4097_b.posZ - this.posZ;
-            double var9 = (double)MathHelper.sqrt_double(var3 * var3 + var5 * var5 + var7 * var7);
-            double var11 = 0.1D;
-            var13.motionX = var3 * var11;
-            var13.motionY = var5 * var11 + (double)MathHelper.sqrt_double(var9) * 0.08D;
-            var13.motionZ = var7 * var11;
-            this.worldObj.entityJoinedWorld(var13);
-            var1 = 1;
-        }
-
-        if(this.field_4091_h) {
-            var1 = 2;
-        }
-
-        this.setEntityDead();
-        this.field_4097_b.fishEntity = null;
-        return var1;
+        byte byte0 = 0;
+        if (field_4096_c != null) {
+            double d = field_4097_b.posX - posX;
+            double d2 = field_4097_b.posY - posY;
+            double d4 = field_4097_b.posZ - posZ;
+            double d6 = MathHelper.sqrt_double(d * d + d2 * d2 + d4 * d4);
+            double d8 = 0.10000000000000001D;
+            field_4096_c.motionX += d * d8;
+            field_4096_c.motionY += d2 * d8 + (double) MathHelper.sqrt_double(d6) * 0.080000000000000002D;
+            field_4096_c.motionZ += d4 * d8;
+            byte0 = 3;
+        } else if (field_4088_k > 0) {
+            EntityItem entityitem = new EntityItem(worldObj, posX, posY, posZ, new ItemStack(Item.fishRaw.shiftedIndex));
+            double d1 = field_4097_b.posX - posX;
+            double d3 = field_4097_b.posY - posY;
+            double d5 = field_4097_b.posZ - posZ;
+            double d7 = MathHelper.sqrt_double(d1 * d1 + d3 * d3 + d5 * d5);
+            double d9 = 0.10000000000000001D;
+            entityitem.motionX = d1 * d9;
+            entityitem.motionY = d3 * d9 + (double) MathHelper.sqrt_double(d7) * 0.080000000000000002D;
+            entityitem.motionZ = d5 * d9;
+            worldObj.entityJoinedWorld(entityitem);
+            byte0 = 1;
+        }
+        if (field_4091_h) {
+            byte0 = 2;
+        }
+        setEntityDead();
+        field_4097_b.fishEntity = null;
+        return byte0;
     }
 }
