--- net/minecraft/src/BlockLeaves.java
+++ net/minecraft/src/BlockLeaves.java
@@ -3,156 +3,142 @@
 import java.util.Random;
 
 public class BlockLeaves extends BlockLeavesBase {
+
+    int field_20017_a[];
     private int baseIndexInPNG;
-    int[] field_20017_a;
-
-    protected BlockLeaves(int var1, int var2) {
-        super(var1, var2, Material.leaves, false);
-        this.baseIndexInPNG = var2;
-        this.setTickOnLoad(true);
-    }
-
-    public int colorMultiplier(IBlockAccess var1, int var2, int var3, int var4) {
-        var1.func_4075_a().func_4069_a(var2, var4, 1, 1);
-        double var5 = var1.func_4075_a().temperature[0];
-        double var7 = var1.func_4075_a().humidity[0];
-        return ColorizerFoliage.func_4146_a(var5, var7);
-    }
-
-    public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-        byte var5 = 1;
-        int var6 = var5 + 1;
-        if(var1.checkChunksExist(var2 - var6, var3 - var6, var4 - var6, var2 + var6, var3 + var6, var4 + var6)) {
-            for(int var7 = -var5; var7 <= var5; ++var7) {
-                for(int var8 = -var5; var8 <= var5; ++var8) {
-                    for(int var9 = -var5; var9 <= var5; ++var9) {
-                        int var10 = var1.getBlockId(var2 + var7, var3 + var8, var4 + var9);
-                        if(var10 == Block.leaves.blockID) {
-                            var1.setBlockMetadata(var2 + var7, var3 + var8, var4 + var9, 7);
-                        }
-                    }
-                }
-            }
-        }
-
-    }
-
-    public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-        if(!var1.multiplayerWorld) {
-            if(var1.getBlockMetadata(var2, var3, var4) == 7) {
-                byte var6 = 4;
-                int var7 = var6 + 1;
-                byte var8 = 32;
-                int var9 = var8 * var8;
-                int var10 = var8 / 2;
-                if(this.field_20017_a == null) {
-                    this.field_20017_a = new int[var8 * var8 * var8];
-                }
-
-                int var11;
-                if(var1.checkChunksExist(var2 - var7, var3 - var7, var4 - var7, var2 + var7, var3 + var7, var4 + var7)) {
-                    var11 = -var6;
-
-                    label111:
-                    while(true) {
-                        int var12;
-                        int var13;
-                        int var14;
-                        if(var11 > var6) {
-                            var11 = 1;
-
-                            while(true) {
-                                if(var11 > 4) {
-                                    break label111;
-                                }
-
-                                for(var12 = -var6; var12 <= var6; ++var12) {
-                                    for(var13 = -var6; var13 <= var6; ++var13) {
-                                        for(var14 = -var6; var14 <= var6; ++var14) {
-                                            if(this.field_20017_a[(var12 + var10) * var9 + (var13 + var10) * var8 + var14 + var10] == var11 - 1) {
-                                                if(this.field_20017_a[(var12 + var10 - 1) * var9 + (var13 + var10) * var8 + var14 + var10] == -2) {
-                                                    this.field_20017_a[(var12 + var10 - 1) * var9 + (var13 + var10) * var8 + var14 + var10] = var11;
-                                                }
-
-                                                if(this.field_20017_a[(var12 + var10 + 1) * var9 + (var13 + var10) * var8 + var14 + var10] == -2) {
-                                                    this.field_20017_a[(var12 + var10 + 1) * var9 + (var13 + var10) * var8 + var14 + var10] = var11;
-                                                }
-
-                                                if(this.field_20017_a[(var12 + var10) * var9 + (var13 + var10 - 1) * var8 + var14 + var10] == -2) {
-                                                    this.field_20017_a[(var12 + var10) * var9 + (var13 + var10 - 1) * var8 + var14 + var10] = var11;
-                                                }
-
-                                                if(this.field_20017_a[(var12 + var10) * var9 + (var13 + var10 + 1) * var8 + var14 + var10] == -2) {
-                                                    this.field_20017_a[(var12 + var10) * var9 + (var13 + var10 + 1) * var8 + var14 + var10] = var11;
-                                                }
-
-                                                if(this.field_20017_a[(var12 + var10) * var9 + (var13 + var10) * var8 + (var14 + var10 - 1)] == -2) {
-                                                    this.field_20017_a[(var12 + var10) * var9 + (var13 + var10) * var8 + (var14 + var10 - 1)] = var11;
-                                                }
-
-                                                if(this.field_20017_a[(var12 + var10) * var9 + (var13 + var10) * var8 + var14 + var10 + 1] == -2) {
-                                                    this.field_20017_a[(var12 + var10) * var9 + (var13 + var10) * var8 + var14 + var10 + 1] = var11;
-                                                }
-                                            }
-                                        }
-                                    }
-                                }
-
-                                ++var11;
-                            }
-                        }
-
-                        for(var12 = -var6; var12 <= var6; ++var12) {
-                            for(var13 = -var6; var13 <= var6; ++var13) {
-                                var14 = var1.getBlockId(var2 + var11, var3 + var12, var4 + var13);
-                                if(var14 == Block.wood.blockID) {
-                                    this.field_20017_a[(var11 + var10) * var9 + (var12 + var10) * var8 + var13 + var10] = 0;
-                                } else if(var14 == Block.leaves.blockID) {
-                                    this.field_20017_a[(var11 + var10) * var9 + (var12 + var10) * var8 + var13 + var10] = -2;
-                                } else {
-                                    this.field_20017_a[(var11 + var10) * var9 + (var12 + var10) * var8 + var13 + var10] = -1;
-                                }
-                            }
-                        }
-
-                        ++var11;
-                    }
-                }
-
-                var11 = this.field_20017_a[var10 * var9 + var10 * var8 + var10];
-                if(var11 >= 0) {
-                    var1.setBlockMetadataWithNotify(var2, var3, var4, 0);
-                } else {
-                    this.func_6360_i(var1, var2, var3, var4);
-                }
-            }
-
-        }
-    }
-
-    private void func_6360_i(World var1, int var2, int var3, int var4) {
-        this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-        var1.setBlockWithNotify(var2, var3, var4, 0);
-    }
-
-    public int quantityDropped(Random var1) {
-        return var1.nextInt(16) == 0 ? 1 : 0;
-    }
-
-    public int idDropped(int var1, Random var2) {
+
+    protected BlockLeaves(int i, int j) {
+        super(i, j, Material.leaves, false);
+        baseIndexInPNG = j;
+        setTickOnLoad(true);
+    }
+
+    public int colorMultiplier(IBlockAccess iblockaccess, int i, int j, int k) {
+        iblockaccess.func_4075_a().func_4069_a(i, k, 1, 1);
+        double d = iblockaccess.func_4075_a().temperature[0];
+        double d1 = iblockaccess.func_4075_a().humidity[0];
+        return ColorizerFoliage.func_4146_a(d, d1);
+    }
+
+    public void func_308_h(World world, int i, int j, int k) {
+        int l = 1;
+        int i1 = l + 1;
+        if (world.checkChunksExist(i - i1, j - i1, k - i1, i + i1, j + i1, k + i1)) {
+            for (int j1 = -l; j1 <= l; j1++) {
+                for (int k1 = -l; k1 <= l; k1++) {
+                    for (int l1 = -l; l1 <= l; l1++) {
+                        int i2 = world.getBlockId(i + j1, j + k1, k + l1);
+                        if (i2 == Block.leaves.blockID) {
+                            world.setBlockMetadata(i + j1, j + k1, k + l1, 7);
+                        }
+                    }
+
+                }
+
+            }
+
+        }
+    }
+
+    public void updateTick(World world, int i, int j, int k, Random random) {
+        if (world.multiplayerWorld) {
+            return;
+        }
+        if (world.getBlockMetadata(i, j, k) == 7) {
+            byte byte0 = 4;
+            int l = byte0 + 1;
+            byte byte1 = 32;
+            int i1 = byte1 * byte1;
+            int j1 = byte1 / 2;
+            if (field_20017_a == null) {
+                field_20017_a = new int[byte1 * byte1 * byte1];
+            }
+            if (world.checkChunksExist(i - l, j - l, k - l, i + l, j + l, k + l)) {
+                for (int k1 = -byte0; k1 <= byte0; k1++) {
+                    for (int j2 = -byte0; j2 <= byte0; j2++) {
+                        for (int l2 = -byte0; l2 <= byte0; l2++) {
+                            int j3 = world.getBlockId(i + k1, j + j2, k + l2);
+                            if (j3 == Block.wood.blockID) {
+                                field_20017_a[(k1 + j1) * i1 + (j2 + j1) * byte1 + (l2 + j1)] = 0;
+                                continue;
+                            }
+                            if (j3 == Block.leaves.blockID) {
+                                field_20017_a[(k1 + j1) * i1 + (j2 + j1) * byte1 + (l2 + j1)] = -2;
+                            } else {
+                                field_20017_a[(k1 + j1) * i1 + (j2 + j1) * byte1 + (l2 + j1)] = -1;
+                            }
+                        }
+
+                    }
+
+                }
+
+                for (int l1 = 1; l1 <= 4; l1++) {
+                    for (int k2 = -byte0; k2 <= byte0; k2++) {
+                        for (int i3 = -byte0; i3 <= byte0; i3++) {
+                            for (int k3 = -byte0; k3 <= byte0; k3++) {
+                                if (field_20017_a[(k2 + j1) * i1 + (i3 + j1) * byte1 + (k3 + j1)] != l1 - 1) {
+                                    continue;
+                                }
+                                if (field_20017_a[((k2 + j1) - 1) * i1 + (i3 + j1) * byte1 + (k3 + j1)] == -2) {
+                                    field_20017_a[((k2 + j1) - 1) * i1 + (i3 + j1) * byte1 + (k3 + j1)] = l1;
+                                }
+                                if (field_20017_a[(k2 + j1 + 1) * i1 + (i3 + j1) * byte1 + (k3 + j1)] == -2) {
+                                    field_20017_a[(k2 + j1 + 1) * i1 + (i3 + j1) * byte1 + (k3 + j1)] = l1;
+                                }
+                                if (field_20017_a[(k2 + j1) * i1 + ((i3 + j1) - 1) * byte1 + (k3 + j1)] == -2) {
+                                    field_20017_a[(k2 + j1) * i1 + ((i3 + j1) - 1) * byte1 + (k3 + j1)] = l1;
+                                }
+                                if (field_20017_a[(k2 + j1) * i1 + (i3 + j1 + 1) * byte1 + (k3 + j1)] == -2) {
+                                    field_20017_a[(k2 + j1) * i1 + (i3 + j1 + 1) * byte1 + (k3 + j1)] = l1;
+                                }
+                                if (field_20017_a[(k2 + j1) * i1 + (i3 + j1) * byte1 + ((k3 + j1) - 1)] == -2) {
+                                    field_20017_a[(k2 + j1) * i1 + (i3 + j1) * byte1 + ((k3 + j1) - 1)] = l1;
+                                }
+                                if (field_20017_a[(k2 + j1) * i1 + (i3 + j1) * byte1 + (k3 + j1 + 1)] == -2) {
+                                    field_20017_a[(k2 + j1) * i1 + (i3 + j1) * byte1 + (k3 + j1 + 1)] = l1;
+                                }
+                            }
+
+                        }
+
+                    }
+
+                }
+
+            }
+            int i2 = field_20017_a[j1 * i1 + j1 * byte1 + j1];
+            if (i2 >= 0) {
+                world.setBlockMetadataWithNotify(i, j, k, 0);
+            } else {
+                func_6360_i(world, i, j, k);
+            }
+        }
+    }
+
+    private void func_6360_i(World world, int i, int j, int k) {
+        dropBlockAsItem(world, i, j, k, world.getBlockMetadata(i, j, k));
+        world.setBlockWithNotify(i, j, k, 0);
+    }
+
+    public int quantityDropped(Random random) {
+        return random.nextInt(16) != 0 ? 0 : 1;
+    }
+
+    public int idDropped(int i, Random random) {
         return Block.sapling.blockID;
     }
 
     public boolean isOpaqueCube() {
-        return !this.graphicsLevel;
-    }
-
-    public void setGraphicsLevel(boolean var1) {
-        this.graphicsLevel = var1;
-        this.blockIndexInTexture = this.baseIndexInPNG + (var1 ? 0 : 1);
-    }
-
-    public void onEntityWalking(World var1, int var2, int var3, int var4, Entity var5) {
-        super.onEntityWalking(var1, var2, var3, var4, var5);
+        return !graphicsLevel;
+    }
+
+    public void setGraphicsLevel(boolean flag) {
+        graphicsLevel = flag;
+        blockIndexInTexture = baseIndexInPNG + (flag ? 0 : 1);
+    }
+
+    public void onEntityWalking(World world, int i, int j, int k, Entity entity) {
+        super.onEntityWalking(world, i, j, k, entity);
     }
 }
