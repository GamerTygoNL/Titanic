--- net/minecraft/src/EntityCreature.java
+++ net/minecraft/src/EntityCreature.java
@@ -1,140 +1,125 @@
 package net.minecraft.src;
 
 public class EntityCreature extends EntityLiving {
-    private PathEntity pathToEntity;
+
     protected Entity playerToAttack;
-    protected boolean hasAttacked = false;
+    protected boolean hasAttacked;
+    private PathEntity pathToEntity;
 
-    public EntityCreature(World var1) {
-        super(var1);
+    public EntityCreature(World world) {
+        super(world);
+        hasAttacked = false;
     }
 
     protected void updatePlayerActionState() {
-        this.hasAttacked = false;
-        float var1 = 16.0F;
-        if(this.playerToAttack == null) {
-            this.playerToAttack = this.findPlayerToAttack();
-            if(this.playerToAttack != null) {
-                this.pathToEntity = this.worldObj.getPathToEntity(this, this.playerToAttack, var1);
-            }
-        } else if(!this.playerToAttack.isEntityAlive()) {
-            this.playerToAttack = null;
-        } else {
-            float var2 = this.playerToAttack.getDistanceToEntity(this);
-            if(this.canEntityBeSeen(this.playerToAttack)) {
-                this.attackEntity(this.playerToAttack, var2);
-            }
-        }
-
-        if(this.hasAttacked || this.playerToAttack == null || this.pathToEntity != null && this.rand.nextInt(20) != 0) {
-            if(this.pathToEntity == null && this.rand.nextInt(80) == 0 || this.rand.nextInt(80) == 0) {
-                boolean var21 = false;
-                int var3 = -1;
-                int var4 = -1;
-                int var5 = -1;
-                float var6 = -99999.0F;
-
-                for(int var7 = 0; var7 < 10; ++var7) {
-                    int var8 = MathHelper.floor_double(this.posX + (double)this.rand.nextInt(13) - 6.0D);
-                    int var9 = MathHelper.floor_double(this.posY + (double)this.rand.nextInt(7) - 3.0D);
-                    int var10 = MathHelper.floor_double(this.posZ + (double)this.rand.nextInt(13) - 6.0D);
-                    float var11 = this.getBlockPathWeight(var8, var9, var10);
-                    if(var11 > var6) {
-                        var6 = var11;
-                        var3 = var8;
-                        var4 = var9;
-                        var5 = var10;
-                        var21 = true;
-                    }
-                }
-
-                if(var21) {
-                    this.pathToEntity = this.worldObj.getEntityPathToXYZ(this, var3, var4, var5, 10.0F);
-                }
-            }
-        } else {
-            this.pathToEntity = this.worldObj.getPathToEntity(this, this.playerToAttack, var1);
-        }
-
-        int var22 = MathHelper.floor_double(this.boundingBox.minY);
-        boolean var23 = this.handleWaterMovement();
-        boolean var24 = this.handleLavaMovement();
-        this.rotationPitch = 0.0F;
-        if(this.pathToEntity != null && this.rand.nextInt(100) != 0) {
-            Vec3D var25 = this.pathToEntity.getPosition(this);
-            double var26 = (double)(this.width * 2.0F);
-
-            while(var25 != null && var25.squareDistanceTo(this.posX, var25.yCoord, this.posZ) < var26 * var26) {
-                this.pathToEntity.incrementPathIndex();
-                if(this.pathToEntity.isFinished()) {
-                    var25 = null;
-                    this.pathToEntity = null;
-                } else {
-                    var25 = this.pathToEntity.getPosition(this);
-                }
-            }
-
-            this.isJumping = false;
-            if(var25 != null) {
-                double var27 = var25.xCoord - this.posX;
-                double var28 = var25.zCoord - this.posZ;
-                double var12 = var25.yCoord - (double)var22;
-                float var14 = (float)(Math.atan2(var28, var27) * 180.0D / (double)((float)Math.PI)) - 90.0F;
-                float var15 = var14 - this.rotationYaw;
-
-                for(this.moveForward = this.moveSpeed; var15 < -180.0F; var15 += 360.0F) {
-                }
-
-                while(var15 >= 180.0F) {
-                    var15 -= 360.0F;
-                }
-
-                if(var15 > 30.0F) {
-                    var15 = 30.0F;
-                }
-
-                if(var15 < -30.0F) {
-                    var15 = -30.0F;
-                }
-
-                this.rotationYaw += var15;
-                if(this.hasAttacked && this.playerToAttack != null) {
-                    double var16 = this.playerToAttack.posX - this.posX;
-                    double var18 = this.playerToAttack.posZ - this.posZ;
-                    float var20 = this.rotationYaw;
-                    this.rotationYaw = (float)(Math.atan2(var18, var16) * 180.0D / (double)((float)Math.PI)) - 90.0F;
-                    var15 = (var20 - this.rotationYaw + 90.0F) * (float)Math.PI / 180.0F;
-                    this.moveStrafing = -MathHelper.sin(var15) * this.moveForward * 1.0F;
-                    this.moveForward = MathHelper.cos(var15) * this.moveForward * 1.0F;
-                }
-
-                if(var12 > 0.0D) {
-                    this.isJumping = true;
-                }
-            }
-
-            if(this.playerToAttack != null) {
-                this.faceEntity(this.playerToAttack, 30.0F);
-            }
-
-            if(this.isCollidedHorizontally) {
-                this.isJumping = true;
-            }
-
-            if(this.rand.nextFloat() < 0.8F && (var23 || var24)) {
-                this.isJumping = true;
-            }
-
-        } else {
+        hasAttacked = false;
+        float f = 16F;
+        if (playerToAttack == null) {
+            playerToAttack = findPlayerToAttack();
+            if (playerToAttack != null) {
+                pathToEntity = worldObj.getPathToEntity(this, playerToAttack, f);
+            }
+        } else if (!playerToAttack.isEntityAlive()) {
+            playerToAttack = null;
+        } else {
+            float f1 = playerToAttack.getDistanceToEntity(this);
+            if (canEntityBeSeen(playerToAttack)) {
+                attackEntity(playerToAttack, f1);
+            }
+        }
+        if (!hasAttacked && playerToAttack != null && (pathToEntity == null || rand.nextInt(20) == 0)) {
+            pathToEntity = worldObj.getPathToEntity(this, playerToAttack, f);
+        } else if (pathToEntity == null && rand.nextInt(80) == 0 || rand.nextInt(80) == 0) {
+            boolean flag = false;
+            int j = -1;
+            int k = -1;
+            int l = -1;
+            float f2 = -99999F;
+            for (int i1 = 0; i1 < 10; i1++) {
+                int j1 = MathHelper.floor_double((posX + (double) rand.nextInt(13)) - 6D);
+                int k1 = MathHelper.floor_double((posY + (double) rand.nextInt(7)) - 3D);
+                int l1 = MathHelper.floor_double((posZ + (double) rand.nextInt(13)) - 6D);
+                float f3 = getBlockPathWeight(j1, k1, l1);
+                if (f3 > f2) {
+                    f2 = f3;
+                    j = j1;
+                    k = k1;
+                    l = l1;
+                    flag = true;
+                }
+            }
+
+            if (flag) {
+                pathToEntity = worldObj.getEntityPathToXYZ(this, j, k, l, 10F);
+            }
+        }
+        int i = MathHelper.floor_double(boundingBox.minY);
+        boolean flag1 = handleWaterMovement();
+        boolean flag2 = handleLavaMovement();
+        rotationPitch = 0.0F;
+        if (pathToEntity == null || rand.nextInt(100) == 0) {
             super.updatePlayerActionState();
-            this.pathToEntity = null;
-        }
-    }
-
-    protected void attackEntity(Entity var1, float var2) {
-    }
-
-    protected float getBlockPathWeight(int var1, int var2, int var3) {
+            pathToEntity = null;
+            return;
+        }
+        Vec3D vec3d = pathToEntity.getPosition(this);
+        for (double d = width * 2.0F; vec3d != null && vec3d.squareDistanceTo(posX, vec3d.yCoord, posZ) < d * d; ) {
+            pathToEntity.incrementPathIndex();
+            if (pathToEntity.isFinished()) {
+                vec3d = null;
+                pathToEntity = null;
+            } else {
+                vec3d = pathToEntity.getPosition(this);
+            }
+        }
+
+        isJumping = false;
+        if (vec3d != null) {
+            double d1 = vec3d.xCoord - posX;
+            double d2 = vec3d.zCoord - posZ;
+            double d3 = vec3d.yCoord - (double) i;
+            float f4 = (float) ((Math.atan2(d2, d1) * 180D) / 3.1415927410125732D) - 90F;
+            float f5 = f4 - rotationYaw;
+            moveForward = moveSpeed;
+            for (; f5 < -180F; f5 += 360F) {
+            }
+            for (; f5 >= 180F; f5 -= 360F) {
+            }
+            if (f5 > 30F) {
+                f5 = 30F;
+            }
+            if (f5 < -30F) {
+                f5 = -30F;
+            }
+            rotationYaw += f5;
+            if (hasAttacked && playerToAttack != null) {
+                double d4 = playerToAttack.posX - posX;
+                double d5 = playerToAttack.posZ - posZ;
+                float f7 = rotationYaw;
+                rotationYaw = (float) ((Math.atan2(d5, d4) * 180D) / 3.1415927410125732D) - 90F;
+                float f6 = (((f7 - rotationYaw) + 90F) * 3.141593F) / 180F;
+                moveStrafing = -MathHelper.sin(f6) * moveForward * 1.0F;
+                moveForward = MathHelper.cos(f6) * moveForward * 1.0F;
+            }
+            if (d3 > 0.0D) {
+                isJumping = true;
+            }
+        }
+        if (playerToAttack != null) {
+            faceEntity(playerToAttack, 30F);
+        }
+        if (isCollidedHorizontally) {
+            isJumping = true;
+        }
+        if (rand.nextFloat() < 0.8F && (flag1 || flag2)) {
+            isJumping = true;
+        }
+    }
+
+    protected void attackEntity(Entity entity, float f) {
+    }
+
+    protected float getBlockPathWeight(int i, int j, int k) {
         return 0.0F;
     }
 
@@ -143,9 +128,9 @@
     }
 
     public boolean getCanSpawnHere() {
-        int var1 = MathHelper.floor_double(this.posX);
-        int var2 = MathHelper.floor_double(this.boundingBox.minY);
-        int var3 = MathHelper.floor_double(this.posZ);
-        return super.getCanSpawnHere() && this.getBlockPathWeight(var1, var2, var3) >= 0.0F;
+        int i = MathHelper.floor_double(posX);
+        int j = MathHelper.floor_double(boundingBox.minY);
+        int k = MathHelper.floor_double(posZ);
+        return super.getCanSpawnHere() && getBlockPathWeight(i, j, k) >= 0.0F;
     }
 }
