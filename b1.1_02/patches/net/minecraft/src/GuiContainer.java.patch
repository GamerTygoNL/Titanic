--- net/minecraft/src/GuiContainer.java
+++ net/minecraft/src/GuiContainer.java
@@ -1,168 +1,170 @@
 package net.minecraft.src;
 
+import cc.noxiuam.titanic.Ref;
+import cc.noxiuam.titanic.event.impl.gui.SlotChangeEvent;
 import org.lwjgl.opengl.GL11;
-import org.lwjgl.opengl.GL12;
 
 public abstract class GuiContainer extends GuiScreen {
-    private static RenderItem itemRenderer = new RenderItem();
-    protected int xSize = 176;
-    protected int ySize = 166;
+
+    private static final RenderItem itemRenderer = new RenderItem();
     public CraftingInventoryCB inventorySlots;
+    protected int xSize;
+    protected int ySize;
 
-    public GuiContainer(CraftingInventoryCB var1) {
-        this.inventorySlots = var1;
+    public GuiContainer(CraftingInventoryCB craftinginventorycb) {
+        xSize = 176;
+        ySize = 166;
+        inventorySlots = craftinginventorycb;
     }
 
     public void initGui() {
         super.initGui();
-        this.mc.thePlayer.field_20068_h = this.inventorySlots;
+        mc.thePlayer.field_20068_h = inventorySlots;
     }
 
-    public void drawScreen(int var1, int var2, float var3) {
-        this.drawDefaultBackground();
-        int var4 = (this.width - this.xSize) / 2;
-        int var5 = (this.height - this.ySize) / 2;
-        this.drawGuiContainerBackgroundLayer(var3);
+    public void drawScreen(int i, int j, float f) {
+        drawDefaultBackground();
+        int k = (width - xSize) / 2;
+        int l = (height - ySize) / 2;
+        drawGuiContainerBackgroundLayer(f);
         GL11.glPushMatrix();
-        GL11.glRotatef(180.0F, 1.0F, 0.0F, 0.0F);
+        GL11.glRotatef(180F, 1.0F, 0.0F, 0.0F);
         RenderHelper.enableStandardItemLighting();
         GL11.glPopMatrix();
         GL11.glPushMatrix();
-        GL11.glTranslatef((float)var4, (float)var5, 0.0F);
+        GL11.glTranslatef(k, l, 0.0F);
         GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-        GL11.glEnable(GL12.GL_RESCALE_NORMAL);
-        Slot var6 = null;
-
-        int var9;
-        int var10;
-        for(int var7 = 0; var7 < this.inventorySlots.field_20122_e.size(); ++var7) {
-            Slot var8 = (Slot)this.inventorySlots.field_20122_e.get(var7);
-            this.drawSlotInventory(var8);
-            if(this.func_20081_a(var8, var1, var2)) {
-                var6 = var8;
-                GL11.glDisable(GL11.GL_LIGHTING);
-                GL11.glDisable(GL11.GL_DEPTH_TEST);
-                var9 = var8.field_20006_b;
-                var10 = var8.field_20008_c;
-                this.drawGradientRect(var9, var10, var9 + 16, var10 + 16, -2130706433, -2130706433);
-                GL11.glEnable(GL11.GL_LIGHTING);
-                GL11.glEnable(GL11.GL_DEPTH_TEST);
+        GL11.glEnable(32826 /*GL_RESCALE_NORMAL_EXT*/);
+        Slot slot = null;
+        for (int i1 = 0; i1 < inventorySlots.field_20122_e.size(); i1++) {
+            Slot slot1 = (Slot) inventorySlots.field_20122_e.get(i1);
+            drawSlotInventory(slot1);
+            if (func_20081_a(slot1, i, j)) {
+                slot = slot1;
+                GL11.glDisable(2896 /*GL_LIGHTING*/);
+                GL11.glDisable(2929 /*GL_DEPTH_TEST*/);
+                int j1 = slot1.field_20006_b;
+                int l1 = slot1.field_20008_c;
+                drawGradientRect(j1, l1, j1 + 16, l1 + 16, 0x80ffffff, 0x80ffffff);
+                GL11.glEnable(2896 /*GL_LIGHTING*/);
+                GL11.glEnable(2929 /*GL_DEPTH_TEST*/);
             }
         }
 
-        InventoryPlayer var12 = this.mc.thePlayer.inventory;
-        if(var12.func_20075_i() != null) {
-            GL11.glTranslatef(0.0F, 0.0F, 32.0F);
-            itemRenderer.renderItemIntoGUI(this.fontRenderer, this.mc.renderEngine, var12.func_20075_i(), var1 - var4 - 8, var2 - var5 - 8);
-            itemRenderer.renderItemOverlayIntoGUI(this.fontRenderer, this.mc.renderEngine, var12.func_20075_i(), var1 - var4 - 8, var2 - var5 - 8);
+        InventoryPlayer inventoryplayer = mc.thePlayer.inventory;
+        if (inventoryplayer.func_20075_i() != null) {
+            GL11.glTranslatef(0.0F, 0.0F, 32F);
+            itemRenderer.renderItemIntoGUI(fontRenderer, mc.renderEngine, inventoryplayer.func_20075_i(), i - k - 8, j - l - 8);
+            itemRenderer.renderItemOverlayIntoGUI(fontRenderer, mc.renderEngine, inventoryplayer.func_20075_i(), i - k - 8, j - l - 8);
         }
-
-        GL11.glDisable(GL12.GL_RESCALE_NORMAL);
+        GL11.glDisable(32826 /*GL_RESCALE_NORMAL_EXT*/);
         RenderHelper.disableStandardItemLighting();
-        GL11.glDisable(GL11.GL_LIGHTING);
-        GL11.glDisable(GL11.GL_DEPTH_TEST);
-        this.drawGuiContainerForegroundLayer();
-        if(var12.func_20075_i() == null && var6 != null && var6.func_20005_c()) {
-            String var13 = ("" + StringTranslate.func_20162_a().func_20161_b(var6.getStack().func_20109_f())).trim();
-            if(var13.length() > 0) {
-                var9 = var1 - var4 + 12;
-                var10 = var2 - var5 - 12;
-                int var11 = this.fontRenderer.getStringWidth(var13);
-                this.drawGradientRect(var9 - 3, var10 - 3, var9 + var11 + 3, var10 + 8 + 3, -1073741824, -1073741824);
-                this.fontRenderer.drawStringWithShadow(var13, var9, var10, -1);
+        GL11.glDisable(2896 /*GL_LIGHTING*/);
+        GL11.glDisable(2929 /*GL_DEPTH_TEST*/);
+        drawGuiContainerForegroundLayer();
+        if (inventoryplayer.func_20075_i() == null && slot != null && slot.func_20005_c()) {
+            String s = StringTranslate.func_20162_a().func_20161_b(slot.getStack().func_20109_f()).trim();
+            if (s.length() > 0) {
+                int k1 = (i - k) + 12;
+                int i2 = j - l - 12;
+                int j2 = fontRenderer.getStringWidth(s);
+                drawGradientRect(k1 - 3, i2 - 3, k1 + j2 + 3, i2 + 8 + 3, 0xc0000000, 0xc0000000);
+                fontRenderer.drawStringWithShadow(s, k1, i2, -1);
             }
         }
-
-        GL11.glEnable(GL11.GL_LIGHTING);
-        GL11.glEnable(GL11.GL_DEPTH_TEST);
+        GL11.glEnable(2896 /*GL_LIGHTING*/);
+        GL11.glEnable(2929 /*GL_DEPTH_TEST*/);
         GL11.glPopMatrix();
     }
 
     protected void drawGuiContainerForegroundLayer() {
     }
 
-    protected abstract void drawGuiContainerBackgroundLayer(float var1);
+    protected abstract void drawGuiContainerBackgroundLayer(float f);
 
-    private void drawSlotInventory(Slot var1) {
-        int var2 = var1.field_20006_b;
-        int var3 = var1.field_20008_c;
-        ItemStack var4 = var1.getStack();
-        if(var4 == null) {
-            int var5 = var1.func_775_c();
-            if(var5 >= 0) {
-                GL11.glDisable(GL11.GL_LIGHTING);
-                this.mc.renderEngine.bindTexture(this.mc.renderEngine.getTexture("/gui/items.png"));
-                this.drawTexturedModalRect(var2, var3, var5 % 16 * 16, var5 / 16 * 16, 16, 16);
-                GL11.glEnable(GL11.GL_LIGHTING);
+    private void drawSlotInventory(Slot slot) {
+        int i = slot.field_20006_b;
+        int j = slot.field_20008_c;
+        ItemStack itemstack = slot.getStack();
+        if (itemstack == null) {
+            int k = slot.func_775_c();
+            if (k >= 0) {
+                GL11.glDisable(2896 /*GL_LIGHTING*/);
+                mc.renderEngine.bindTexture(mc.renderEngine.getTexture("/gui/items.png"));
+                drawTexturedModalRect(i, j, (k % 16) * 16, (k / 16) * 16, 16, 16);
+                GL11.glEnable(2896 /*GL_LIGHTING*/);
                 return;
             }
         }
-
-        itemRenderer.renderItemIntoGUI(this.fontRenderer, this.mc.renderEngine, var4, var2, var3);
-        itemRenderer.renderItemOverlayIntoGUI(this.fontRenderer, this.mc.renderEngine, var4, var2, var3);
+        itemRenderer.renderItemIntoGUI(fontRenderer, mc.renderEngine, itemstack, i, j);
+        itemRenderer.renderItemOverlayIntoGUI(fontRenderer, mc.renderEngine, itemstack, i, j);
     }
 
-    private Slot getSlotAtPosition(int var1, int var2) {
-        for(int var3 = 0; var3 < this.inventorySlots.field_20122_e.size(); ++var3) {
-            Slot var4 = (Slot)this.inventorySlots.field_20122_e.get(var3);
-            if(this.func_20081_a(var4, var1, var2)) {
-                return var4;
+    private Slot getSlotAtPosition(int i, int j) {
+        for (int k = 0; k < inventorySlots.field_20122_e.size(); k++) {
+            Slot slot = (Slot) inventorySlots.field_20122_e.get(k);
+            if (func_20081_a(slot, i, j)) {
+                return slot;
             }
         }
 
         return null;
     }
 
-    private boolean func_20081_a(Slot var1, int var2, int var3) {
-        int var4 = (this.width - this.xSize) / 2;
-        int var5 = (this.height - this.ySize) / 2;
-        var2 -= var4;
-        var3 -= var5;
-        return var2 >= var1.field_20006_b - 1 && var2 < var1.field_20006_b + 16 + 1 && var3 >= var1.field_20008_c - 1 && var3 < var1.field_20008_c + 16 + 1;
-    }
-
-    protected void mouseClicked(int var1, int var2, int var3) {
-        if(var3 == 0 || var3 == 1) {
-            Slot var4 = this.getSlotAtPosition(var1, var2);
-            int var5 = (this.width - this.xSize) / 2;
-            int var6 = (this.height - this.ySize) / 2;
-            boolean var7 = var1 < var5 || var2 < var6 || var1 >= var5 + this.xSize || var2 >= var6 + this.ySize;
-            int var8 = -1;
-            if(var4 != null) {
-                var8 = var4.field_20007_a;
-            }
-
-            if(var7) {
-                var8 = -999;
-            }
-
-            if(var8 != -1) {
-                this.mc.playerController.func_20085_a(this.inventorySlots.unusedList, var8, var3, this.mc.thePlayer);
-            }
-        }
-
-    }
-
-    protected void mouseMovedOrUp(int var1, int var2, int var3) {
-        if(var3 == 0) {
-        }
-
-    }
-
-    protected void keyTyped(char var1, int var2) {
-        if(var2 == 1 || var2 == this.mc.gameSettings.keyBindInventory.keyCode) {
-            this.mc.thePlayer.func_20059_m();
-        }
-
+    private boolean func_20081_a(Slot slot, int i, int j) {
+        int k = (width - xSize) / 2;
+        int l = (height - ySize) / 2;
+        i -= k;
+        j -= l;
+        return i >= slot.field_20006_b - 1 && i < slot.field_20006_b + 16 + 1 && j >= slot.field_20008_c - 1 && j < slot.field_20008_c + 16 + 1;
+    }
+
+    protected void mouseClicked(int i, int j, int k) {
+        if (k == 0 || k == 1) {
+            Slot slot = getSlotAtPosition(i, j);
+            int l = (width - xSize) / 2;
+            int i1 = (height - ySize) / 2;
+            boolean flag = i < l || j < i1 || i >= l + xSize || j >= i1 + ySize;
+            int j1 = -1;
+            if (slot != null) {
+                j1 = slot.field_20007_a;
+            }
+            if (flag) {
+                j1 = -999;
+            }
+            if (j1 != -1) {
+                // TODO: Redo this mod's implementation.
+                SlotChangeEvent event = new SlotChangeEvent();
+                Ref.getEventManager().handleEvent(event);
+
+                if (event.isCancelled()) {
+                    Ref.getModuleManager().getModernInventoryModule().handleClickOnSlot(j1, k, this.mc, this.inventorySlots);
+                } else {
+                    mc.playerController.func_20085_a(inventorySlots.unusedList, j1, k, mc.thePlayer);
+                }
+            }
+        }
+    }
+
+    protected void mouseMovedOrUp(int i, int j, int k) {
+        if (k != 0) ;
+    }
+
+    protected void keyTyped(char c, int i) {
+        if (i == 1 || i == mc.gameSettings.keyBindInventory.keyCode) {
+            mc.thePlayer.func_20059_m();
+        }
     }
 
     public void onGuiClosed() {
-        if(this.mc.thePlayer != null) {
-            this.mc.playerController.func_20086_a(this.inventorySlots.unusedList, this.mc.thePlayer);
+        if (mc.thePlayer == null) {
+        } else {
+            mc.playerController.func_20086_a(inventorySlots.unusedList, mc.thePlayer);
         }
     }
 
     public boolean doesGuiPauseGame() {
         return false;
     }
+
 }
