--- net/minecraft/src/WorldGenClay.java
+++ net/minecraft/src/WorldGenClay.java
@@ -3,51 +3,54 @@
 import java.util.Random;
 
 public class WorldGenClay extends WorldGenerator {
-    private int clayBlockId = Block.blockClay.blockID;
-    private int numberOfBlocks;
-
-    public WorldGenClay(int var1) {
-        this.numberOfBlocks = var1;
+
+    private final int clayBlockId;
+    private final int numberOfBlocks;
+
+    public WorldGenClay(int i) {
+        clayBlockId = Block.blockClay.blockID;
+        numberOfBlocks = i;
     }
 
-    public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-        if(var1.getBlockMaterial(var3, var4, var5) != Material.water) {
+    public boolean generate(World world, Random random, int i, int j, int k) {
+        if (world.getBlockMaterial(i, j, k) != Material.water) {
             return false;
-        } else {
-            float var6 = var2.nextFloat() * (float)Math.PI;
-            double var7 = (double)((float)(var3 + 8) + MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
-            double var9 = (double)((float)(var3 + 8) - MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
-            double var11 = (double)((float)(var5 + 8) + MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
-            double var13 = (double)((float)(var5 + 8) - MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
-            double var15 = (double)(var4 + var2.nextInt(3) + 2);
-            double var17 = (double)(var4 + var2.nextInt(3) + 2);
-
-            for(int var19 = 0; var19 <= this.numberOfBlocks; ++var19) {
-                double var20 = var7 + (var9 - var7) * (double)var19 / (double)this.numberOfBlocks;
-                double var22 = var15 + (var17 - var15) * (double)var19 / (double)this.numberOfBlocks;
-                double var24 = var11 + (var13 - var11) * (double)var19 / (double)this.numberOfBlocks;
-                double var26 = var2.nextDouble() * (double)this.numberOfBlocks / 16.0D;
-                double var28 = (double)(MathHelper.sin((float)var19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * var26 + 1.0D;
-                double var30 = (double)(MathHelper.sin((float)var19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * var26 + 1.0D;
-
-                for(int var32 = (int)(var20 - var28 / 2.0D); var32 <= (int)(var20 + var28 / 2.0D); ++var32) {
-                    for(int var33 = (int)(var22 - var30 / 2.0D); var33 <= (int)(var22 + var30 / 2.0D); ++var33) {
-                        for(int var34 = (int)(var24 - var28 / 2.0D); var34 <= (int)(var24 + var28 / 2.0D); ++var34) {
-                            double var35 = ((double)var32 + 0.5D - var20) / (var28 / 2.0D);
-                            double var37 = ((double)var33 + 0.5D - var22) / (var30 / 2.0D);
-                            double var39 = ((double)var34 + 0.5D - var24) / (var28 / 2.0D);
-                            if(var35 * var35 + var37 * var37 + var39 * var39 < 1.0D) {
-                                int var41 = var1.getBlockId(var32, var33, var34);
-                                if(var41 == Block.sand.blockID) {
-                                    var1.setBlock(var32, var33, var34, this.clayBlockId);
-                                }
-                            }
+        }
+        float f = random.nextFloat() * 3.141593F;
+        double d = (float) (i + 8) + (MathHelper.sin(f) * (float) numberOfBlocks) / 8F;
+        double d1 = (float) (i + 8) - (MathHelper.sin(f) * (float) numberOfBlocks) / 8F;
+        double d2 = (float) (k + 8) + (MathHelper.cos(f) * (float) numberOfBlocks) / 8F;
+        double d3 = (float) (k + 8) - (MathHelper.cos(f) * (float) numberOfBlocks) / 8F;
+        double d4 = j + random.nextInt(3) + 2;
+        double d5 = j + random.nextInt(3) + 2;
+        for (int l = 0; l <= numberOfBlocks; l++) {
+            double d6 = d + ((d1 - d) * (double) l) / (double) numberOfBlocks;
+            double d7 = d4 + ((d5 - d4) * (double) l) / (double) numberOfBlocks;
+            double d8 = d2 + ((d3 - d2) * (double) l) / (double) numberOfBlocks;
+            double d9 = (random.nextDouble() * (double) numberOfBlocks) / 16D;
+            double d10 = (double) (MathHelper.sin(((float) l * 3.141593F) / (float) numberOfBlocks) + 1.0F) * d9 + 1.0D;
+            double d11 = (double) (MathHelper.sin(((float) l * 3.141593F) / (float) numberOfBlocks) + 1.0F) * d9 + 1.0D;
+            for (int i1 = (int) (d6 - d10 / 2D); i1 <= (int) (d6 + d10 / 2D); i1++) {
+                for (int j1 = (int) (d7 - d11 / 2D); j1 <= (int) (d7 + d11 / 2D); j1++) {
+                    for (int k1 = (int) (d8 - d10 / 2D); k1 <= (int) (d8 + d10 / 2D); k1++) {
+                        double d12 = (((double) i1 + 0.5D) - d6) / (d10 / 2D);
+                        double d13 = (((double) j1 + 0.5D) - d7) / (d11 / 2D);
+                        double d14 = (((double) k1 + 0.5D) - d8) / (d10 / 2D);
+                        if (d12 * d12 + d13 * d13 + d14 * d14 >= 1.0D) {
+                            continue;
+                        }
+                        int l1 = world.getBlockId(i1, j1, k1);
+                        if (l1 == Block.sand.blockID) {
+                            world.setBlock(i1, j1, k1, clayBlockId);
                         }
                     }
+
                 }
+
             }
 
-            return true;
         }
+
+        return true;
     }
 }
