--- net/minecraft/src/EntityRenderer.java
+++ net/minecraft/src/EntityRenderer.java
@@ -1,420 +1,452 @@
 package net.minecraft.src;
 
-import java.nio.FloatBuffer;
-import java.util.List;
-import java.util.Random;
+import cc.noxiuam.titanic.Ref;
+import cc.noxiuam.titanic.event.impl.gui.PortalOverlayDrawEvent;
+import cc.noxiuam.titanic.event.impl.mouse.PlayerLookInputEvent;
+import cc.noxiuam.titanic.event.impl.perspective.CameraChangeEvent;
+import cc.noxiuam.titanic.event.impl.perspective.ViewBobbingSetupEvent;
+import cc.noxiuam.titanic.event.impl.world.fov.FOVUpdateEvent;
+import cc.noxiuam.titanic.event.impl.world.fov.PreFOVUpdateEvent;
 import net.minecraft.client.Minecraft;
 import org.lwjgl.input.Keyboard;
 import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.Display;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GLContext;
-import org.lwjgl.opengl.NVFogDistance;
 import org.lwjgl.util.glu.GLU;
 
+import java.nio.FloatBuffer;
+import java.util.List;
+import java.util.Random;
+
 public class EntityRenderer {
-    private Minecraft mc;
-    private float farPlaneDistance = 0.0F;
+
     public ItemRenderer itemRenderer;
-    private int field_1386_j;
-    private Entity field_1385_k = null;
-    private long field_1384_l = System.currentTimeMillis();
-    private Random random = new Random();
-    volatile int field_1394_b = 0;
-    volatile int field_1393_c = 0;
-    FloatBuffer field_1392_d = GLAllocation.createDirectFloatBuffer(16);
+    volatile int field_1394_b;
+    volatile int field_1393_c;
+    FloatBuffer field_1392_d;
     float field_4270_e;
     float field_4269_f;
     float field_4268_g;
+    private Minecraft mc;
+    private float farPlaneDistance;
+    private int field_1386_j;
+    private Entity field_1385_k;
+    private long field_1384_l;
+    private Random random;
     private float field_1382_n;
     private float field_1381_o;
 
-    public EntityRenderer(Minecraft var1) {
-        this.mc = var1;
-        this.itemRenderer = new ItemRenderer(var1);
+    public EntityRenderer(Minecraft minecraft) {
+        farPlaneDistance = 0.0F;
+        field_1385_k = null;
+        field_1384_l = System.currentTimeMillis();
+        random = new Random();
+        field_1394_b = 0;
+        field_1393_c = 0;
+        field_1392_d = GLAllocation.createDirectFloatBuffer(16);
+        mc = minecraft;
+        itemRenderer = new ItemRenderer(minecraft);
     }
 
     public void func_911_a() {
-        this.field_1382_n = this.field_1381_o;
-        float var1 = this.mc.theWorld.getLightBrightness(MathHelper.floor_double(this.mc.thePlayer.posX), MathHelper.floor_double(this.mc.thePlayer.posY), MathHelper.floor_double(this.mc.thePlayer.posZ));
-        float var2 = (float)(3 - this.mc.gameSettings.renderDistance) / 3.0F;
-        float var3 = var1 * (1.0F - var2) + var2;
-        this.field_1381_o += (var3 - this.field_1381_o) * 0.1F;
-        ++this.field_1386_j;
-        this.itemRenderer.func_895_a();
-        if(this.mc.isFancyGraphics) {
-            this.renderFancyGraphics();
-        }
-
-    }
-
-    public void getMouseOver(float var1) {
-        if(this.mc.thePlayer != null) {
-            double var2 = (double)this.mc.playerController.getBlockReachDistance();
-            this.mc.objectMouseOver = this.mc.thePlayer.rayTrace(var2, var1);
-            double var4 = var2;
-            Vec3D var6 = this.mc.thePlayer.getPosition(var1);
-            if(this.mc.objectMouseOver != null) {
-                var4 = this.mc.objectMouseOver.hitVec.distanceTo(var6);
-            }
-
-            if(this.mc.playerController instanceof PlayerControllerTest) {
-                var2 = 32.0D;
-            } else {
-                if(var4 > 3.0D) {
-                    var4 = 3.0D;
-                }
-
-                var2 = var4;
-            }
-
-            Vec3D var7 = this.mc.thePlayer.getLook(var1);
-            Vec3D var8 = var6.addVector(var7.xCoord * var2, var7.yCoord * var2, var7.zCoord * var2);
-            this.field_1385_k = null;
-            float var9 = 1.0F;
-            List var10 = this.mc.theWorld.getEntitiesWithinAABBExcludingEntity(this.mc.thePlayer, this.mc.thePlayer.boundingBox.addCoord(var7.xCoord * var2, var7.yCoord * var2, var7.zCoord * var2).expand((double)var9, (double)var9, (double)var9));
-            double var11 = 0.0D;
-
-            for(int var13 = 0; var13 < var10.size(); ++var13) {
-                Entity var14 = (Entity)var10.get(var13);
-                if(var14.canBeCollidedWith()) {
-                    float var15 = var14.func_4035_j_();
-                    AxisAlignedBB var16 = var14.boundingBox.expand((double)var15, (double)var15, (double)var15);
-                    MovingObjectPosition var17 = var16.func_1169_a(var6, var8);
-                    if(var16.isVecInside(var6)) {
-                        if(0.0D < var11 || var11 == 0.0D) {
-                            this.field_1385_k = var14;
-                            var11 = 0.0D;
-                        }
-                    } else if(var17 != null) {
-                        double var18 = var6.distanceTo(var17.hitVec);
-                        if(var18 < var11 || var11 == 0.0D) {
-                            this.field_1385_k = var14;
-                            var11 = var18;
-                        }
-                    }
-                }
-            }
-
-            if(this.field_1385_k != null && !(this.mc.playerController instanceof PlayerControllerTest)) {
-                this.mc.objectMouseOver = new MovingObjectPosition(this.field_1385_k);
-            }
-
-        }
-    }
-
-    private float func_914_d(float var1) {
-        EntityPlayerSP var2 = this.mc.thePlayer;
-        float var3 = 70.0F;
-        if(var2.isInsideOfMaterial(Material.water)) {
-            var3 = 60.0F;
-        }
-
-        if(var2.health <= 0) {
-            float var4 = (float)var2.deathTime + var1;
-            var3 /= (1.0F - 500.0F / (var4 + 500.0F)) * 2.0F + 1.0F;
-        }
-
-        return var3;
-    }
-
-    private void hurtCameraEffect(float var1) {
-        EntityPlayerSP var2 = this.mc.thePlayer;
-        float var3 = (float)var2.hurtTime - var1;
-        float var4;
-        if(var2.health <= 0) {
-            var4 = (float)var2.deathTime + var1;
-            GL11.glRotatef(40.0F - 8000.0F / (var4 + 200.0F), 0.0F, 0.0F, 1.0F);
-        }
-
-        if(var3 >= 0.0F) {
-            var3 /= (float)var2.maxHurtTime;
-            var3 = MathHelper.sin(var3 * var3 * var3 * var3 * (float)Math.PI);
-            var4 = var2.attackedAtYaw;
-            GL11.glRotatef(-var4, 0.0F, 1.0F, 0.0F);
-            GL11.glRotatef(-var3 * 14.0F, 0.0F, 0.0F, 1.0F);
-            GL11.glRotatef(var4, 0.0F, 1.0F, 0.0F);
-        }
-    }
-
-    private void setupViewBobbing(float var1) {
-        if(!this.mc.gameSettings.thirdPersonView) {
-            EntityPlayerSP var2 = this.mc.thePlayer;
-            float var3 = var2.distanceWalkedModified - var2.prevDistanceWalkedModified;
-            float var4 = var2.distanceWalkedModified + var3 * var1;
-            float var5 = var2.field_775_e + (var2.field_774_f - var2.field_775_e) * var1;
-            float var6 = var2.field_9329_Q + (var2.field_9328_R - var2.field_9329_Q) * var1;
-            GL11.glTranslatef(MathHelper.sin(var4 * (float)Math.PI) * var5 * 0.5F, -Math.abs(MathHelper.cos(var4 * (float)Math.PI) * var5), 0.0F);
-            GL11.glRotatef(MathHelper.sin(var4 * (float)Math.PI) * var5 * 3.0F, 0.0F, 0.0F, 1.0F);
-            GL11.glRotatef(Math.abs(MathHelper.cos(var4 * (float)Math.PI + 0.2F) * var5) * 5.0F, 1.0F, 0.0F, 0.0F);
-            GL11.glRotatef(var6, 1.0F, 0.0F, 0.0F);
-        }
-    }
-
-    private void orientCamera(float var1) {
-        EntityPlayerSP var2 = this.mc.thePlayer;
-        double var3 = var2.prevPosX + (var2.posX - var2.prevPosX) * (double)var1;
-        double var5 = var2.prevPosY + (var2.posY - var2.prevPosY) * (double)var1;
-        double var7 = var2.prevPosZ + (var2.posZ - var2.prevPosZ) * (double)var1;
-        if(this.mc.gameSettings.thirdPersonView) {
-            double var9 = 4.0D;
-            float var11 = var2.rotationYaw;
-            float var12 = var2.rotationPitch;
-            if(Keyboard.isKeyDown(Keyboard.KEY_F1)) {
-                var12 += 180.0F;
-                var9 += 2.0D;
-            }
-
-            double var13 = (double)(-MathHelper.sin(var11 / 180.0F * (float)Math.PI) * MathHelper.cos(var12 / 180.0F * (float)Math.PI)) * var9;
-            double var15 = (double)(MathHelper.cos(var11 / 180.0F * (float)Math.PI) * MathHelper.cos(var12 / 180.0F * (float)Math.PI)) * var9;
-            double var17 = (double)(-MathHelper.sin(var12 / 180.0F * (float)Math.PI)) * var9;
-
-            for(int var19 = 0; var19 < 8; ++var19) {
-                float var20 = (float)((var19 & 1) * 2 - 1);
-                float var21 = (float)((var19 >> 1 & 1) * 2 - 1);
-                float var22 = (float)((var19 >> 2 & 1) * 2 - 1);
-                var20 *= 0.1F;
-                var21 *= 0.1F;
-                var22 *= 0.1F;
-                MovingObjectPosition var23 = this.mc.theWorld.rayTraceBlocks(Vec3D.createVector(var3 + (double)var20, var5 + (double)var21, var7 + (double)var22), Vec3D.createVector(var3 - var13 + (double)var20 + (double)var22, var5 - var17 + (double)var21, var7 - var15 + (double)var22));
-                if(var23 != null) {
-                    double var24 = var23.hitVec.distanceTo(Vec3D.createVector(var3, var5, var7));
-                    if(var24 < var9) {
-                        var9 = var24;
-                    }
-                }
-            }
-
-            if(Keyboard.isKeyDown(Keyboard.KEY_F1)) {
-                GL11.glRotatef(180.0F, 0.0F, 1.0F, 0.0F);
-            }
-
-            GL11.glRotatef(var2.rotationPitch - var12, 1.0F, 0.0F, 0.0F);
-            GL11.glRotatef(var2.rotationYaw - var11, 0.0F, 1.0F, 0.0F);
-            GL11.glTranslatef(0.0F, 0.0F, (float)(-var9));
-            GL11.glRotatef(var11 - var2.rotationYaw, 0.0F, 1.0F, 0.0F);
-            GL11.glRotatef(var12 - var2.rotationPitch, 1.0F, 0.0F, 0.0F);
+        field_1382_n = field_1381_o;
+        float f = mc.theWorld.getLightBrightness(MathHelper.floor_double(mc.thePlayer.posX), MathHelper.floor_double(mc.thePlayer.posY), MathHelper.floor_double(mc.thePlayer.posZ));
+        float f1 = (float) (3 - mc.gameSettings.renderDistance) / 3F;
+        float f2 = f * (1.0F - f1) + f1;
+        field_1381_o += (f2 - field_1381_o) * 0.1F;
+        field_1386_j++;
+        itemRenderer.func_895_a();
+        if (mc.isFancyGraphics) {
+            renderFancyGraphics();
+        }
+    }
+
+    public void getMouseOver(float f) {
+        if (mc.thePlayer == null) {
+            return;
+        }
+        double d = mc.playerController.getBlockReachDistance();
+        mc.objectMouseOver = mc.thePlayer.rayTrace(d, f);
+        double d1 = d;
+        Vec3D vec3d = mc.thePlayer.getPosition(f);
+        if (mc.objectMouseOver != null) {
+            d1 = mc.objectMouseOver.hitVec.distanceTo(vec3d);
+        }
+        if (mc.playerController instanceof PlayerControllerTest) {
+            d1 = d = 32D;
+        } else {
+            if (d1 > 3D) {
+                d1 = 3D;
+            }
+            d = d1;
+        }
+        Vec3D vec3d1 = mc.thePlayer.getLook(f);
+        Vec3D vec3d2 = vec3d.addVector(vec3d1.xCoord * d, vec3d1.yCoord * d, vec3d1.zCoord * d);
+        field_1385_k = null;
+        float f1 = 1.0F;
+        List list = mc.theWorld.getEntitiesWithinAABBExcludingEntity(mc.thePlayer, mc.thePlayer.boundingBox.addCoord(vec3d1.xCoord * d, vec3d1.yCoord * d, vec3d1.zCoord * d).expand(f1, f1, f1));
+        double d2 = 0.0D;
+        for (int i = 0; i < list.size(); i++) {
+            Entity entity = (Entity) list.get(i);
+            if (!entity.canBeCollidedWith()) {
+                continue;
+            }
+            float f2 = entity.func_4035_j_();
+            AxisAlignedBB axisalignedbb = entity.boundingBox.expand(f2, f2, f2);
+            MovingObjectPosition movingobjectposition = axisalignedbb.func_1169_a(vec3d, vec3d2);
+            if (axisalignedbb.isVecInside(vec3d)) {
+                if (0.0D < d2 || d2 == 0.0D) {
+                    field_1385_k = entity;
+                    d2 = 0.0D;
+                }
+                continue;
+            }
+            if (movingobjectposition == null) {
+                continue;
+            }
+            double d3 = vec3d.distanceTo(movingobjectposition.hitVec);
+            if (d3 < d2 || d2 == 0.0D) {
+                field_1385_k = entity;
+                d2 = d3;
+            }
+        }
+
+        if (field_1385_k != null && !(mc.playerController instanceof PlayerControllerTest)) {
+            mc.objectMouseOver = new MovingObjectPosition(field_1385_k);
+        }
+    }
+
+    // fov
+    private float func_914_d(float f) {
+        EntityPlayerSP entityplayersp = mc.thePlayer;
+        float f1 = 70F;
+        if (entityplayersp.isInsideOfMaterial(Material.water)) {
+            f1 = 60F;
+        }
+
+        PreFOVUpdateEvent preFovUpdateEvent = new PreFOVUpdateEvent(f1);
+        Ref.getEventManager().handleEvent(preFovUpdateEvent);
+        f1 = preFovUpdateEvent.getFov();
+
+        if (((EntityPlayer) (entityplayersp)).health <= 0) {
+            float f2 = (float) ((EntityPlayer) (entityplayersp)).deathTime + f;
+            f1 /= (1.0F - 500F / (f2 + 500F)) * 2.0F + 1.0F;
+        }
+
+        FOVUpdateEvent event = new FOVUpdateEvent(f, f1);
+        Ref.getEventManager().handleEvent(event);
+        f1 = event.getFov();
+
+        return f1;
+    }
+
+    private void hurtCameraEffect(float f) {
+        EntityPlayerSP entityplayersp = mc.thePlayer;
+        float f1 = (float) ((EntityPlayer) (entityplayersp)).hurtTime - f;
+        if (((EntityPlayer) (entityplayersp)).health <= 0) {
+            float f2 = (float) ((EntityPlayer) (entityplayersp)).deathTime + f;
+            GL11.glRotatef(40F - 8000F / (f2 + 200F), 0.0F, 0.0F, 1.0F);
+        }
+        if (f1 < 0.0F) {
+            return;
+        } else {
+            f1 /= ((EntityPlayer) (entityplayersp)).maxHurtTime;
+            f1 = MathHelper.sin(f1 * f1 * f1 * f1 * 3.141593F);
+            float f3 = ((EntityPlayer) (entityplayersp)).attackedAtYaw;
+            GL11.glRotatef(-f3, 0.0F, 1.0F, 0.0F);
+            GL11.glRotatef(-f1 * 14F, 0.0F, 0.0F, 1.0F);
+            GL11.glRotatef(f3, 0.0F, 1.0F, 0.0F);
+            return;
+        }
+    }
+
+    private void setupViewBobbing(float f) {
+        ViewBobbingSetupEvent event = new ViewBobbingSetupEvent(f);
+        Ref.getEventManager().handleEvent(event);
+
+        if (event.isCancelled()) {
+            return;
+        }
+
+        if (mc.gameSettings.thirdPersonView) {
+            return;
+        } else {
+            EntityPlayerSP entityplayersp = mc.thePlayer;
+            float f1 = ((EntityPlayer) (entityplayersp)).distanceWalkedModified - ((EntityPlayer) (entityplayersp)).prevDistanceWalkedModified;
+            float f2 = ((EntityPlayer) (entityplayersp)).distanceWalkedModified + f1 * f;
+            float f3 = ((EntityPlayer) (entityplayersp)).field_775_e + (((EntityPlayer) (entityplayersp)).field_774_f - ((EntityPlayer) (entityplayersp)).field_775_e) * f;
+            float f4 = ((EntityPlayer) (entityplayersp)).field_9329_Q + (((EntityPlayer) (entityplayersp)).field_9328_R - ((EntityPlayer) (entityplayersp)).field_9329_Q) * f;
+            GL11.glTranslatef(MathHelper.sin(f2 * 3.141593F) * f3 * 0.5F, -Math.abs(MathHelper.cos(f2 * 3.141593F) * f3), 0.0F);
+            GL11.glRotatef(MathHelper.sin(f2 * 3.141593F) * f3 * 3F, 0.0F, 0.0F, 1.0F);
+            GL11.glRotatef(Math.abs(MathHelper.cos(f2 * 3.141593F + 0.2F) * f3) * 5F, 1.0F, 0.0F, 0.0F);
+            GL11.glRotatef(f4, 1.0F, 0.0F, 0.0F);
+            return;
+        }
+    }
+
+    private void orientCamera(float f) {
+        EntityPlayerSP entityplayersp = mc.thePlayer;
+        double d = ((EntityPlayer) (entityplayersp)).prevPosX + (((EntityPlayer) (entityplayersp)).posX - ((EntityPlayer) (entityplayersp)).prevPosX) * (double) f;
+        double d1 = ((EntityPlayer) (entityplayersp)).prevPosY + (((EntityPlayer) (entityplayersp)).posY - ((EntityPlayer) (entityplayersp)).prevPosY) * (double) f;
+        double d2 = ((EntityPlayer) (entityplayersp)).prevPosZ + (((EntityPlayer) (entityplayersp)).posZ - ((EntityPlayer) (entityplayersp)).prevPosZ) * (double) f;
+        if (mc.gameSettings.thirdPersonView) {
+            double d3 = 4D;
+            float f1 = ((EntityPlayer) (entityplayersp)).rotationYaw;
+            float f2 = ((EntityPlayer) (entityplayersp)).rotationPitch;
+            if (Keyboard.isKeyDown(59)) {
+                f2 += 180F;
+                d3 += 2D;
+            }
+
+            CameraChangeEvent event = new CameraChangeEvent(f2);
+            Ref.getEventManager().handleEvent(event);
+
+            if (event.isCancelled()) {
+                f2 = event.getF2();
+            }
+
+            double d4 = (double) (-MathHelper.sin((f1 / 180F) * 3.141593F) * MathHelper.cos((f2 / 180F) * 3.141593F)) * d3;
+            double d5 = (double) (MathHelper.cos((f1 / 180F) * 3.141593F) * MathHelper.cos((f2 / 180F) * 3.141593F)) * d3;
+            double d6 = (double) (-MathHelper.sin((f2 / 180F) * 3.141593F)) * d3;
+            for (int i = 0; i < 8; i++) {
+                float f3 = (i & 1) * 2 - 1;
+                float f4 = (i >> 1 & 1) * 2 - 1;
+                float f5 = (i >> 2 & 1) * 2 - 1;
+                f3 *= 0.1F;
+                f4 *= 0.1F;
+                f5 *= 0.1F;
+                MovingObjectPosition movingobjectposition = mc.theWorld.rayTraceBlocks(Vec3D.createVector(d + (double) f3, d1 + (double) f4, d2 + (double) f5), Vec3D.createVector((d - d4) + (double) f3 + (double) f5, (d1 - d6) + (double) f4, (d2 - d5) + (double) f5));
+                if (movingobjectposition == null) {
+                    continue;
+                }
+                double d7 = movingobjectposition.hitVec.distanceTo(Vec3D.createVector(d, d1, d2));
+                if (d7 < d3) {
+                    d3 = d7;
+                }
+            }
+
+            if (Keyboard.isKeyDown(59)) {
+                GL11.glRotatef(180F, 0.0F, 1.0F, 0.0F);
+            }
+            GL11.glRotatef(((EntityPlayer) (entityplayersp)).rotationPitch - f2, 1.0F, 0.0F, 0.0F);
+            GL11.glRotatef(((EntityPlayer) (entityplayersp)).rotationYaw - f1, 0.0F, 1.0F, 0.0F);
+            GL11.glTranslatef(0.0F, 0.0F, (float) (-d3));
+            GL11.glRotatef(f1 - ((EntityPlayer) (entityplayersp)).rotationYaw, 0.0F, 1.0F, 0.0F);
+            GL11.glRotatef(f2 - ((EntityPlayer) (entityplayersp)).rotationPitch, 1.0F, 0.0F, 0.0F);
         } else {
             GL11.glTranslatef(0.0F, 0.0F, -0.1F);
         }
-
-        GL11.glRotatef(var2.prevRotationPitch + (var2.rotationPitch - var2.prevRotationPitch) * var1, 1.0F, 0.0F, 0.0F);
-        GL11.glRotatef(var2.prevRotationYaw + (var2.rotationYaw - var2.prevRotationYaw) * var1 + 180.0F, 0.0F, 1.0F, 0.0F);
-    }
-
-    private void setupCameraTransform(float var1, int var2) {
-        this.farPlaneDistance = (float)(256 >> this.mc.gameSettings.renderDistance);
-        GL11.glMatrixMode(GL11.GL_PROJECTION);
-        GL11.glLoadIdentity();
-        float var3 = 0.07F;
-        if(this.mc.gameSettings.anaglyph) {
-            GL11.glTranslatef((float)(-(var2 * 2 - 1)) * var3, 0.0F, 0.0F);
-        }
-
-        GLU.gluPerspective(this.func_914_d(var1), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance);
-        GL11.glMatrixMode(GL11.GL_MODELVIEW);
-        GL11.glLoadIdentity();
-        if(this.mc.gameSettings.anaglyph) {
-            GL11.glTranslatef((float)(var2 * 2 - 1) * 0.1F, 0.0F, 0.0F);
-        }
-
-        this.hurtCameraEffect(var1);
-        if(this.mc.gameSettings.viewBobbing) {
-            this.setupViewBobbing(var1);
-        }
-
-        float var4 = this.mc.thePlayer.prevTimeInPortal + (this.mc.thePlayer.timeInPortal - this.mc.thePlayer.prevTimeInPortal) * var1;
-        if(var4 > 0.0F) {
-            float var5 = 5.0F / (var4 * var4 + 5.0F) - var4 * 0.04F;
-            var5 *= var5;
-            GL11.glRotatef(var4 * var4 * 1500.0F, 0.0F, 1.0F, 1.0F);
-            GL11.glScalef(1.0F / var5, 1.0F, 1.0F);
-            GL11.glRotatef(-var4 * var4 * 1500.0F, 0.0F, 1.0F, 1.0F);
-        }
-
-        this.orientCamera(var1);
-    }
-
-    private void func_4135_b(float var1, int var2) {
-        GL11.glLoadIdentity();
-        if(this.mc.gameSettings.anaglyph) {
-            GL11.glTranslatef((float)(var2 * 2 - 1) * 0.1F, 0.0F, 0.0F);
-        }
-
+        GL11.glRotatef(((EntityPlayer) (entityplayersp)).prevRotationPitch + (((EntityPlayer) (entityplayersp)).rotationPitch - ((EntityPlayer) (entityplayersp)).prevRotationPitch) * f, 1.0F, 0.0F, 0.0F);
+        GL11.glRotatef(((EntityPlayer) (entityplayersp)).prevRotationYaw + (((EntityPlayer) (entityplayersp)).rotationYaw - ((EntityPlayer) (entityplayersp)).prevRotationYaw) * f + 180F, 0.0F, 1.0F, 0.0F);
+    }
+
+    private void setupCameraTransform(float f, int i) {
+        farPlaneDistance = 256 >> mc.gameSettings.renderDistance;
+        GL11.glMatrixMode(5889);
+        GL11.glLoadIdentity();
+        float f1 = 0.07F;
+        if (mc.gameSettings.anaglyph) {
+            GL11.glTranslatef((float) (-(i * 2 - 1)) * f1, 0.0F, 0.0F);
+        }
+        GLU.gluPerspective(func_914_d(f), (float) mc.displayWidth / (float) mc.displayHeight, 0.05F, farPlaneDistance);
+        GL11.glMatrixMode(5888);
+        GL11.glLoadIdentity();
+        if (mc.gameSettings.anaglyph) {
+            GL11.glTranslatef((float) (i * 2 - 1) * 0.1F, 0.0F, 0.0F);
+        }
+        hurtCameraEffect(f);
+        if (mc.gameSettings.viewBobbing) {
+            setupViewBobbing(f);
+        }
+
+        float f2 = mc.thePlayer.prevTimeInPortal + (mc.thePlayer.timeInPortal - mc.thePlayer.prevTimeInPortal) * f;
+
+        PortalOverlayDrawEvent portalOverlayDrawEvent = new PortalOverlayDrawEvent(mc.thePlayer.prevTimeInPortal, mc.thePlayer.timeInPortal, f);
+        Ref.getEventManager().handleEvent(portalOverlayDrawEvent);
+
+        if (portalOverlayDrawEvent.isCancelled()) {
+            f2 = portalOverlayDrawEvent.prevTimeInPortal + (portalOverlayDrawEvent.timeInPortal - portalOverlayDrawEvent.prevTimeInPortal) * f;
+        }
+
+        if (f2 > 0.0F) {
+            float f3 = 5F / (f2 * f2 + 5F) - f2 * 0.04F;
+            f3 *= f3;
+            GL11.glRotatef(f2 * f2 * 1500F, 0.0F, 1.0F, 1.0F);
+            GL11.glScalef(1.0F / f3, 1.0F, 1.0F);
+            GL11.glRotatef(-f2 * f2 * 1500F, 0.0F, 1.0F, 1.0F);
+        }
+
+        orientCamera(f);
+    }
+
+    private void func_4135_b(float f, int i) {
+        GL11.glLoadIdentity();
+        if (mc.gameSettings.anaglyph) {
+            GL11.glTranslatef((float) (i * 2 - 1) * 0.1F, 0.0F, 0.0F);
+        }
         GL11.glPushMatrix();
-        this.hurtCameraEffect(var1);
-        if(this.mc.gameSettings.viewBobbing) {
-            this.setupViewBobbing(var1);
-        }
-
-        if(!this.mc.gameSettings.thirdPersonView && !Keyboard.isKeyDown(Keyboard.KEY_F1)) {
-            this.itemRenderer.renderItemInFirstPerson(var1);
-        }
-
+        hurtCameraEffect(f);
+        if (mc.gameSettings.viewBobbing) {
+            setupViewBobbing(f);
+        }
+        if (!mc.gameSettings.thirdPersonView) {
+            itemRenderer.renderItemInFirstPerson(f);
+        }
         GL11.glPopMatrix();
-        if(!this.mc.gameSettings.thirdPersonView) {
-            this.itemRenderer.renderOverlays(var1);
-            this.hurtCameraEffect(var1);
-        }
-
-        if(this.mc.gameSettings.viewBobbing) {
-            this.setupViewBobbing(var1);
-        }
-
-    }
-
-    public void func_4136_b(float var1) {
-        if(!Display.isActive()) {
-            if(System.currentTimeMillis() - this.field_1384_l > 500L) {
-                this.mc.func_6252_g();
-            }
-        } else {
-            this.field_1384_l = System.currentTimeMillis();
-        }
-
-        if(this.mc.field_6289_L) {
-            this.mc.mouseHelper.mouseXYChange();
-            float var2 = this.mc.gameSettings.mouseSensitivity * 0.6F + 0.2F;
-            float var3 = var2 * var2 * var2 * 8.0F;
-            float var4 = (float)this.mc.mouseHelper.field_1114_a * var3;
-            float var5 = (float)this.mc.mouseHelper.field_1113_b * var3;
-            byte var6 = 1;
-            if(this.mc.gameSettings.invertMouse) {
-                var6 = -1;
-            }
-
-            this.mc.thePlayer.func_346_d(var4, var5 * (float)var6);
-        }
-
-        if(!this.mc.field_6307_v) {
-            ScaledResolution var7 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
-            int var8 = var7.getScaledWidth();
-            int var9 = var7.getScaledHeight();
-            int var10 = Mouse.getX() * var8 / this.mc.displayWidth;
-            int var11 = var9 - Mouse.getY() * var9 / this.mc.displayHeight - 1;
-            if(this.mc.theWorld != null) {
-                this.renderWorld(var1);
-                if(!Keyboard.isKeyDown(Keyboard.KEY_F1)) {
-                    this.mc.ingameGUI.renderGameOverlay(var1, this.mc.currentScreen != null, var10, var11);
-                }
-            } else {
-                GL11.glViewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
-                GL11.glClearColor(0.0F, 0.0F, 0.0F, 0.0F);
-                GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT | GL11.GL_COLOR_BUFFER_BIT);
-                GL11.glMatrixMode(GL11.GL_PROJECTION);
-                GL11.glLoadIdentity();
-                GL11.glMatrixMode(GL11.GL_MODELVIEW);
-                GL11.glLoadIdentity();
-                this.func_905_b();
-            }
-
-            if(this.mc.currentScreen != null) {
-                GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
-                this.mc.currentScreen.drawScreen(var10, var11, var1);
-            }
-
-        }
-    }
-
-    public void renderWorld(float var1) {
-        this.getMouseOver(var1);
-        EntityPlayerSP var2 = this.mc.thePlayer;
-        RenderGlobal var3 = this.mc.renderGlobal;
-        EffectRenderer var4 = this.mc.effectRenderer;
-        double var5 = var2.lastTickPosX + (var2.posX - var2.lastTickPosX) * (double)var1;
-        double var7 = var2.lastTickPosY + (var2.posY - var2.lastTickPosY) * (double)var1;
-        double var9 = var2.lastTickPosZ + (var2.posZ - var2.lastTickPosZ) * (double)var1;
-
-        for(int var11 = 0; var11 < 2; ++var11) {
-            if(this.mc.gameSettings.anaglyph) {
-                if(var11 == 0) {
+        if (!mc.gameSettings.thirdPersonView) {
+            itemRenderer.renderOverlays(f);
+            hurtCameraEffect(f);
+        }
+        if (mc.gameSettings.viewBobbing) {
+            setupViewBobbing(f);
+        }
+    }
+
+    public void func_4136_b(float f) {
+        if (!Display.isActive()) {
+            if (System.currentTimeMillis() - field_1384_l > 500L) {
+                mc.func_6252_g();
+            }
+        } else {
+            field_1384_l = System.currentTimeMillis();
+        }
+        if (mc.field_6289_L) {
+            mc.mouseHelper.mouseXYChange();
+            float f1 = mc.gameSettings.mouseSensitivity * 0.6F + 0.2F;
+            float f2 = f1 * f1 * f1 * 8F;
+            float f3 = (float) mc.mouseHelper.field_1114_a * f2;
+            float f4 = (float) mc.mouseHelper.field_1113_b * f2;
+            if (mc.gameSettings.invertMouse) {
+                f4 = -f4;
+            }
+
+            PlayerLookInputEvent event = new PlayerLookInputEvent(f3, f4, f);
+            Ref.getEventManager().handleEvent(event);
+
+            if (!event.isCancelled()) {
+                mc.thePlayer.func_346_d(event.getDx(), event.getDy());
+            }
+        }
+        if (mc.field_6307_v) {
+            return;
+        }
+        ScaledResolution scaledresolution = new ScaledResolution(mc.displayWidth, mc.displayHeight);
+        int i = scaledresolution.getScaledWidth();
+        int j = scaledresolution.getScaledHeight();
+        int k = (Mouse.getX() * i) / mc.displayWidth;
+        int i1 = j - (Mouse.getY() * j) / mc.displayHeight - 1;
+        if (mc.theWorld != null) {
+            renderWorld(f);
+            if (!Keyboard.isKeyDown(59)) {
+                mc.ingameGUI.renderGameOverlay(f, mc.currentScreen != null, k, i1);
+            }
+        } else {
+            GL11.glViewport(0, 0, mc.displayWidth, mc.displayHeight);
+            GL11.glClearColor(0.0F, 0.0F, 0.0F, 0.0F);
+            GL11.glClear(16640);
+            GL11.glMatrixMode(5889);
+            GL11.glLoadIdentity();
+            GL11.glMatrixMode(5888);
+            GL11.glLoadIdentity();
+            func_905_b();
+        }
+        if (mc.currentScreen != null) {
+            GL11.glClear(256);
+            mc.currentScreen.drawScreen(k, i1, f);
+        }
+    }
+
+    public void renderWorld(float f) {
+        getMouseOver(f);
+        EntityPlayerSP entityplayersp = mc.thePlayer;
+        RenderGlobal renderglobal = mc.renderGlobal;
+        EffectRenderer effectrenderer = mc.effectRenderer;
+        double d = ((EntityPlayer) (entityplayersp)).lastTickPosX + (((EntityPlayer) (entityplayersp)).posX - ((EntityPlayer) (entityplayersp)).lastTickPosX) * (double) f;
+        double d1 = ((EntityPlayer) (entityplayersp)).lastTickPosY + (((EntityPlayer) (entityplayersp)).posY - ((EntityPlayer) (entityplayersp)).lastTickPosY) * (double) f;
+        double d2 = ((EntityPlayer) (entityplayersp)).lastTickPosZ + (((EntityPlayer) (entityplayersp)).posZ - ((EntityPlayer) (entityplayersp)).lastTickPosZ) * (double) f;
+        for (int i = 0; i < 2; i++) {
+            if (mc.gameSettings.anaglyph) {
+                if (i == 0) {
                     GL11.glColorMask(false, true, true, false);
                 } else {
                     GL11.glColorMask(true, false, false, false);
                 }
             }
-
-            GL11.glViewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
-            this.updateFogColor(var1);
-            GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT | GL11.GL_COLOR_BUFFER_BIT);
-            GL11.glEnable(GL11.GL_CULL_FACE);
-            this.setupCameraTransform(var1, var11);
+            GL11.glViewport(0, 0, mc.displayWidth, mc.displayHeight);
+            updateFogColor(f);
+            GL11.glClear(16640);
+            GL11.glEnable(2884);
+            setupCameraTransform(f, i);
             ClippingHelperImplementation.getInstance();
-            if(this.mc.gameSettings.renderDistance < 2) {
-                this.func_4140_a(-1);
-                var3.func_4142_a(var1);
+            if (mc.gameSettings.renderDistance < 2) {
+                func_4140_a(-1);
+                renderglobal.func_4142_a(f);
             }
-
-            GL11.glEnable(GL11.GL_FOG);
-            this.func_4140_a(1);
-            Frustrum var12 = new Frustrum();
-            var12.setPosition(var5, var7, var9);
-            this.mc.renderGlobal.func_960_a(var12, var1);
-            this.mc.renderGlobal.updateRenderers(var2, false);
-            this.func_4140_a(0);
-            GL11.glEnable(GL11.GL_FOG);
-            GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/terrain.png"));
+            GL11.glEnable(2912);
+            func_4140_a(1);
+            Frustrum frustrum = new Frustrum();
+            frustrum.setPosition(d, d1, d2);
+            mc.renderGlobal.func_960_a(frustrum, f);
+            mc.renderGlobal.updateRenderers(entityplayersp, false);
+            func_4140_a(0);
+            GL11.glEnable(2912);
+            GL11.glBindTexture(3553, mc.renderEngine.getTexture("/terrain.png"));
             RenderHelper.disableStandardItemLighting();
-            var3.func_943_a(var2, 0, (double)var1);
+            renderglobal.func_943_a(entityplayersp, 0, f);
             RenderHelper.enableStandardItemLighting();
-            var3.func_951_a(var2.getPosition(var1), var12, var1);
-            var4.func_1187_b(var2, var1);
+            renderglobal.func_951_a(entityplayersp.getPosition(f), frustrum, f);
+            effectrenderer.func_1187_b(entityplayersp, f);
             RenderHelper.disableStandardItemLighting();
-            this.func_4140_a(0);
-            var4.func_1189_a(var2, var1);
-            if(this.mc.objectMouseOver != null && var2.isInsideOfMaterial(Material.water)) {
-                GL11.glDisable(GL11.GL_ALPHA_TEST);
-                var3.func_959_a(var2, this.mc.objectMouseOver, 0, var2.inventory.getCurrentItem(), var1);
-                var3.drawSelectionBox(var2, this.mc.objectMouseOver, 0, var2.inventory.getCurrentItem(), var1);
-                GL11.glEnable(GL11.GL_ALPHA_TEST);
+            func_4140_a(0);
+            effectrenderer.func_1189_a(entityplayersp, f);
+            if (mc.objectMouseOver != null && entityplayersp.isInsideOfMaterial(Material.water)) {
+                GL11.glDisable(3008);
+                renderglobal.func_959_a(entityplayersp, mc.objectMouseOver, 0, ((EntityPlayer) (entityplayersp)).inventory.getCurrentItem(), f);
+                renderglobal.drawSelectionBox(entityplayersp, mc.objectMouseOver, 0, ((EntityPlayer) (entityplayersp)).inventory.getCurrentItem(), f);
+                GL11.glEnable(3008);
             }
-
-            GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-            this.func_4140_a(0);
-            GL11.glEnable(GL11.GL_BLEND);
-            GL11.glDisable(GL11.GL_CULL_FACE);
-            GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/terrain.png"));
-            if(this.mc.gameSettings.fancyGraphics) {
+            GL11.glBlendFunc(770, 771);
+            func_4140_a(0);
+            GL11.glEnable(3042);
+            GL11.glDisable(2884);
+            GL11.glBindTexture(3553, mc.renderEngine.getTexture("/terrain.png"));
+            if (mc.gameSettings.fancyGraphics) {
                 GL11.glColorMask(false, false, false, false);
-                int var13 = var3.func_943_a(var2, 1, (double)var1);
+                int j = renderglobal.func_943_a(entityplayersp, 1, f);
                 GL11.glColorMask(true, true, true, true);
-                if(this.mc.gameSettings.anaglyph) {
-                    if(var11 == 0) {
+                if (mc.gameSettings.anaglyph) {
+                    if (i == 0) {
                         GL11.glColorMask(false, true, true, false);
                     } else {
                         GL11.glColorMask(true, false, false, false);
                     }
                 }
-
-                if(var13 > 0) {
-                    var3.func_944_a(1, (double)var1);
+                if (j > 0) {
+                    renderglobal.func_944_a(1, f);
                 }
             } else {
-                var3.func_943_a(var2, 1, (double)var1);
+                renderglobal.func_943_a(entityplayersp, 1, f);
             }
-
             GL11.glDepthMask(true);
-            GL11.glEnable(GL11.GL_CULL_FACE);
-            GL11.glDisable(GL11.GL_BLEND);
-            if(this.mc.objectMouseOver != null && !var2.isInsideOfMaterial(Material.water)) {
-                GL11.glDisable(GL11.GL_ALPHA_TEST);
-                var3.func_959_a(var2, this.mc.objectMouseOver, 0, var2.inventory.getCurrentItem(), var1);
-                var3.drawSelectionBox(var2, this.mc.objectMouseOver, 0, var2.inventory.getCurrentItem(), var1);
-                GL11.glEnable(GL11.GL_ALPHA_TEST);
-            }
-
-            GL11.glDisable(GL11.GL_FOG);
-            if(this.field_1385_k != null) {
-            }
-
-            this.func_4140_a(0);
-            GL11.glEnable(GL11.GL_FOG);
-            var3.func_4141_b(var1);
-            GL11.glDisable(GL11.GL_FOG);
-            this.func_4140_a(1);
-            GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
-            this.func_4135_b(var1, var11);
-            if(!this.mc.gameSettings.anaglyph) {
+            GL11.glEnable(2884);
+            GL11.glDisable(3042);
+            if (mc.objectMouseOver != null && !entityplayersp.isInsideOfMaterial(Material.water)) {
+                GL11.glDisable(3008);
+                renderglobal.func_959_a(entityplayersp, mc.objectMouseOver, 0, ((EntityPlayer) (entityplayersp)).inventory.getCurrentItem(), f);
+                renderglobal.drawSelectionBox(entityplayersp, mc.objectMouseOver, 0, ((EntityPlayer) (entityplayersp)).inventory.getCurrentItem(), f);
+                GL11.glEnable(3008);
+            }
+            GL11.glDisable(2912);
+            if (field_1385_k == null) ;
+            func_4140_a(0);
+            GL11.glEnable(2912);
+            renderglobal.func_4141_b(f);
+            GL11.glDisable(2912);
+            func_4140_a(1);
+            GL11.glClear(256);
+            func_4135_b(f, i);
+            if (!mc.gameSettings.anaglyph) {
                 return;
             }
         }
@@ -423,145 +455,141 @@
     }
 
     private void renderFancyGraphics() {
-        if(this.mc.gameSettings.fancyGraphics) {
-            EntityPlayerSP var1 = this.mc.thePlayer;
-            World var2 = this.mc.theWorld;
-            int var3 = MathHelper.floor_double(var1.posX);
-            int var4 = MathHelper.floor_double(var1.posY);
-            int var5 = MathHelper.floor_double(var1.posZ);
-            byte var6 = 16;
-
-            for(int var7 = 0; var7 < 150; ++var7) {
-                int var8 = var3 + this.random.nextInt(var6) - this.random.nextInt(var6);
-                int var9 = var5 + this.random.nextInt(var6) - this.random.nextInt(var6);
-                int var10 = var2.func_696_e(var8, var9);
-                int var11 = var2.getBlockId(var8, var10 - 1, var9);
-                if(var10 <= var4 + var6 && var10 >= var4 - var6) {
-                    float var12 = this.random.nextFloat();
-                    float var13 = this.random.nextFloat();
-                    if(var11 > 0) {
-                        this.mc.effectRenderer.func_1192_a(new EntityRainFX(var2, (double)((float)var8 + var12), (double)((float)var10 + 0.1F) - Block.blocksList[var11].minY, (double)((float)var9 + var13)));
-                    }
-                }
-            }
-
-        }
+        if (!mc.gameSettings.fancyGraphics) {
+            return;
+        }
+        EntityPlayerSP entityplayersp = mc.thePlayer;
+        World world = mc.theWorld;
+        int i = MathHelper.floor_double(((EntityPlayer) (entityplayersp)).posX);
+        int j = MathHelper.floor_double(((EntityPlayer) (entityplayersp)).posY);
+        int k = MathHelper.floor_double(((EntityPlayer) (entityplayersp)).posZ);
+        byte byte0 = 16;
+        for (int l = 0; l < 150; l++) {
+            int i1 = (i + random.nextInt(byte0)) - random.nextInt(byte0);
+            int j1 = (k + random.nextInt(byte0)) - random.nextInt(byte0);
+            int k1 = world.func_696_e(i1, j1);
+            int l1 = world.getBlockId(i1, k1 - 1, j1);
+            if (k1 > j + byte0 || k1 < j - byte0) {
+                continue;
+            }
+            float f = random.nextFloat();
+            float f1 = random.nextFloat();
+            if (l1 > 0) {
+                mc.effectRenderer.func_1192_a(new EntityRainFX(world, (float) i1 + f, (double) ((float) k1 + 0.1F) - Block.blocksList[l1].minY, (float) j1 + f1));
+            }
+        }
+
     }
 
     public void func_905_b() {
-        ScaledResolution var1 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
-        int var2 = var1.getScaledWidth();
-        int var3 = var1.getScaledHeight();
-        GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
-        GL11.glMatrixMode(GL11.GL_PROJECTION);
-        GL11.glLoadIdentity();
-        GL11.glOrtho(0.0D, (double)var2, (double)var3, 0.0D, 1000.0D, 3000.0D);
-        GL11.glMatrixMode(GL11.GL_MODELVIEW);
-        GL11.glLoadIdentity();
-        GL11.glTranslatef(0.0F, 0.0F, -2000.0F);
-    }
-
-    private void updateFogColor(float var1) {
-        World var2 = this.mc.theWorld;
-        EntityPlayerSP var3 = this.mc.thePlayer;
-        float var4 = 1.0F / (float)(4 - this.mc.gameSettings.renderDistance);
-        var4 = 1.0F - (float)Math.pow((double)var4, 0.25D);
-        Vec3D var5 = var2.func_4079_a(this.mc.thePlayer, var1);
-        float var6 = (float)var5.xCoord;
-        float var7 = (float)var5.yCoord;
-        float var8 = (float)var5.zCoord;
-        Vec3D var9 = var2.func_4082_d(var1);
-        this.field_4270_e = (float)var9.xCoord;
-        this.field_4269_f = (float)var9.yCoord;
-        this.field_4268_g = (float)var9.zCoord;
-        this.field_4270_e += (var6 - this.field_4270_e) * var4;
-        this.field_4269_f += (var7 - this.field_4269_f) * var4;
-        this.field_4268_g += (var8 - this.field_4268_g) * var4;
-        if(var3.isInsideOfMaterial(Material.water)) {
-            this.field_4270_e = 0.02F;
-            this.field_4269_f = 0.02F;
-            this.field_4268_g = 0.2F;
-        } else if(var3.isInsideOfMaterial(Material.lava)) {
-            this.field_4270_e = 0.6F;
-            this.field_4269_f = 0.1F;
-            this.field_4268_g = 0.0F;
-        }
-
-        float var10 = this.field_1382_n + (this.field_1381_o - this.field_1382_n) * var1;
-        this.field_4270_e *= var10;
-        this.field_4269_f *= var10;
-        this.field_4268_g *= var10;
-        if(this.mc.gameSettings.anaglyph) {
-            float var11 = (this.field_4270_e * 30.0F + this.field_4269_f * 59.0F + this.field_4268_g * 11.0F) / 100.0F;
-            float var12 = (this.field_4270_e * 30.0F + this.field_4269_f * 70.0F) / 100.0F;
-            float var13 = (this.field_4270_e * 30.0F + this.field_4268_g * 70.0F) / 100.0F;
-            this.field_4270_e = var11;
-            this.field_4269_f = var12;
-            this.field_4268_g = var13;
-        }
-
-        GL11.glClearColor(this.field_4270_e, this.field_4269_f, this.field_4268_g, 0.0F);
-    }
-
-    private void func_4140_a(int var1) {
-        EntityPlayerSP var2 = this.mc.thePlayer;
-        GL11.glFog(GL11.GL_FOG_COLOR, this.func_908_a(this.field_4270_e, this.field_4269_f, this.field_4268_g, 1.0F));
-        GL11.glNormal3f(0.0F, -1.0F, 0.0F);
+        ScaledResolution scaledresolution = new ScaledResolution(mc.displayWidth, mc.displayHeight);
+        int i = scaledresolution.getScaledWidth();
+        int j = scaledresolution.getScaledHeight();
+        GL11.glClear(256);
+        GL11.glMatrixMode(5889);
+        GL11.glLoadIdentity();
+        GL11.glOrtho(0.0D, i, j, 0.0D, 1000D, 3000D);
+        GL11.glMatrixMode(5888);
+        GL11.glLoadIdentity();
+        GL11.glTranslatef(0.0F, 0.0F, -2000F);
+    }
+
+    private void updateFogColor(float f) {
+        World world = mc.theWorld;
+        EntityPlayerSP entityplayersp = mc.thePlayer;
+        float f1 = 1.0F / (float) (4 - mc.gameSettings.renderDistance);
+        f1 = 1.0F - (float) Math.pow(f1, 0.25D);
+        Vec3D vec3d = world.func_4079_a(mc.thePlayer, f);
+        float f2 = (float) vec3d.xCoord;
+        float f3 = (float) vec3d.yCoord;
+        float f4 = (float) vec3d.zCoord;
+        Vec3D vec3d1 = world.func_4082_d(f);
+        field_4270_e = (float) vec3d1.xCoord;
+        field_4269_f = (float) vec3d1.yCoord;
+        field_4268_g = (float) vec3d1.zCoord;
+        field_4270_e += (f2 - field_4270_e) * f1;
+        field_4269_f += (f3 - field_4269_f) * f1;
+        field_4268_g += (f4 - field_4268_g) * f1;
+        if (entityplayersp.isInsideOfMaterial(Material.water)) {
+            field_4270_e = 0.02F;
+            field_4269_f = 0.02F;
+            field_4268_g = 0.2F;
+        } else if (entityplayersp.isInsideOfMaterial(Material.lava)) {
+            field_4270_e = 0.6F;
+            field_4269_f = 0.1F;
+            field_4268_g = 0.0F;
+        }
+        float f5 = field_1382_n + (field_1381_o - field_1382_n) * f;
+        field_4270_e *= f5;
+        field_4269_f *= f5;
+        field_4268_g *= f5;
+        if (mc.gameSettings.anaglyph) {
+            float f6 = (field_4270_e * 30F + field_4269_f * 59F + field_4268_g * 11F) / 100F;
+            float f7 = (field_4270_e * 30F + field_4269_f * 70F) / 100F;
+            float f8 = (field_4270_e * 30F + field_4268_g * 70F) / 100F;
+            field_4270_e = f6;
+            field_4269_f = f7;
+            field_4268_g = f8;
+        }
+        GL11.glClearColor(field_4270_e, field_4269_f, field_4268_g, 0.0F);
+    }
+
+    private void func_4140_a(int i) {
+        EntityPlayerSP entityplayersp = mc.thePlayer;
+        GL11.glFog(2918, func_908_a(field_4270_e, field_4269_f, field_4268_g, 1.0F));
+        GL11.glNormal3f(0.0F, -1F, 0.0F);
         GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-        float var3;
-        float var4;
-        float var5;
-        float var6;
-        float var7;
-        float var8;
-        if(var2.isInsideOfMaterial(Material.water)) {
-            GL11.glFogi(GL11.GL_FOG_MODE, GL11.GL_EXP);
-            GL11.glFogf(GL11.GL_FOG_DENSITY, 0.1F);
-            var3 = 0.4F;
-            var4 = 0.4F;
-            var5 = 0.9F;
-            if(this.mc.gameSettings.anaglyph) {
-                var6 = (var3 * 30.0F + var4 * 59.0F + var5 * 11.0F) / 100.0F;
-                var7 = (var3 * 30.0F + var4 * 70.0F) / 100.0F;
-                var8 = (var3 * 30.0F + var5 * 70.0F) / 100.0F;
+        if (entityplayersp.isInsideOfMaterial(Material.water)) {
+            GL11.glFogi(2917, 2048);
+            GL11.glFogf(2914, 0.1F);
+            float f = 0.4F;
+            float f2 = 0.4F;
+            float f4 = 0.9F;
+            if (mc.gameSettings.anaglyph) {
+                float f6 = (f * 30F + f2 * 59F + f4 * 11F) / 100F;
+                float f8 = (f * 30F + f2 * 70F) / 100F;
+                float f10 = (f * 30F + f4 * 70F) / 100F;
+                f = f6;
+                f2 = f8;
+                f4 = f10;
             }
-        } else if(var2.isInsideOfMaterial(Material.lava)) {
-            GL11.glFogi(GL11.GL_FOG_MODE, GL11.GL_EXP);
-            GL11.glFogf(GL11.GL_FOG_DENSITY, 2.0F);
-            var3 = 0.4F;
-            var4 = 0.3F;
-            var5 = 0.3F;
-            if(this.mc.gameSettings.anaglyph) {
-                var6 = (var3 * 30.0F + var4 * 59.0F + var5 * 11.0F) / 100.0F;
-                var7 = (var3 * 30.0F + var4 * 70.0F) / 100.0F;
-                var8 = (var3 * 30.0F + var5 * 70.0F) / 100.0F;
+        } else if (entityplayersp.isInsideOfMaterial(Material.lava)) {
+            GL11.glFogi(2917, 2048);
+            GL11.glFogf(2914, 2.0F);
+            float f1 = 0.4F;
+            float f3 = 0.3F;
+            float f5 = 0.3F;
+            if (mc.gameSettings.anaglyph) {
+                float f7 = (f1 * 30F + f3 * 59F + f5 * 11F) / 100F;
+                float f9 = (f1 * 30F + f3 * 70F) / 100F;
+                float f11 = (f1 * 30F + f5 * 70F) / 100F;
+                f1 = f7;
+                f3 = f9;
+                f5 = f11;
             }
         } else {
-            GL11.glFogi(GL11.GL_FOG_MODE, GL11.GL_LINEAR);
-            GL11.glFogf(GL11.GL_FOG_START, this.farPlaneDistance * 0.25F);
-            GL11.glFogf(GL11.GL_FOG_END, this.farPlaneDistance);
-            if(var1 < 0) {
-                GL11.glFogf(GL11.GL_FOG_START, 0.0F);
-                GL11.glFogf(GL11.GL_FOG_END, this.farPlaneDistance * 0.8F);
-            }
-
-            if(GLContext.getCapabilities().GL_NV_fog_distance) {
-                GL11.glFogi(NVFogDistance.GL_FOG_DISTANCE_MODE_NV, NVFogDistance.GL_EYE_RADIAL_NV);
-            }
-
-            if(this.mc.theWorld.worldProvider.field_4220_c) {
-                GL11.glFogf(GL11.GL_FOG_START, 0.0F);
+            GL11.glFogi(2917, 9729);
+            GL11.glFogf(2915, farPlaneDistance * 0.25F);
+            GL11.glFogf(2916, farPlaneDistance);
+            if (i < 0) {
+                GL11.glFogf(2915, 0.0F);
+                GL11.glFogf(2916, farPlaneDistance * 0.8F);
+            }
+            if (GLContext.getCapabilities().GL_NV_fog_distance) {
+                GL11.glFogi(34138, 34139);
+            }
+            if (mc.theWorld.worldProvider.field_4220_c) {
+                GL11.glFogf(2915, 0.0F);
             }
         }
-
-        GL11.glEnable(GL11.GL_COLOR_MATERIAL);
-        GL11.glColorMaterial(GL11.GL_FRONT, GL11.GL_AMBIENT);
+        GL11.glEnable(2903);
+        GL11.glColorMaterial(1028, 4608);
     }
 
-    private FloatBuffer func_908_a(float var1, float var2, float var3, float var4) {
-        this.field_1392_d.clear();
-        this.field_1392_d.put(var1).put(var2).put(var3).put(var4);
-        this.field_1392_d.flip();
-        return this.field_1392_d;
+    private FloatBuffer func_908_a(float f, float f1, float f2, float f3) {
+        field_1392_d.clear();
+        field_1392_d.put(f).put(f1).put(f2).put(f3);
+        field_1392_d.flip();
+        return field_1392_d;
     }
 }
