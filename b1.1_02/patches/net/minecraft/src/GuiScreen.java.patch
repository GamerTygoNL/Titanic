--- net/minecraft/src/GuiScreen.java
+++ net/minecraft/src/GuiScreen.java
@@ -1,126 +1,121 @@
 package net.minecraft.src;
 
-import java.awt.Toolkit;
-import java.awt.datatransfer.DataFlavor;
-import java.awt.datatransfer.Transferable;
-import java.util.ArrayList;
-import java.util.List;
 import net.minecraft.client.Minecraft;
 import org.lwjgl.input.Keyboard;
 import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.GL11;
 
+import java.awt.*;
+import java.awt.datatransfer.DataFlavor;
+import java.awt.datatransfer.Transferable;
+import java.util.ArrayList;
+
 public class GuiScreen extends Gui {
-    protected Minecraft mc;
+
     public int width;
     public int height;
-    protected List controlList = new ArrayList();
-    public boolean field_948_f = false;
+    public boolean field_948_f;
+    protected Minecraft mc;
+    protected java.util.List controlList;
     protected FontRenderer fontRenderer;
-    private GuiButton selectedButton = null;
-
-    public void drawScreen(int var1, int var2, float var3) {
-        for(int var4 = 0; var4 < this.controlList.size(); ++var4) {
-            GuiButton var5 = (GuiButton)this.controlList.get(var4);
-            var5.drawButton(this.mc, var1, var2);
-        }
-
-    }
-
-    protected void keyTyped(char var1, int var2) {
-        if(var2 == 1) {
-            this.mc.displayGuiScreen((GuiScreen)null);
-            this.mc.func_6259_e();
-        }
-
+    private GuiButton selectedButton;
+
+    public GuiScreen() {
+        controlList = new ArrayList();
+        field_948_f = false;
+        selectedButton = null;
     }
 
     public static String getClipboardString() {
         try {
-            Transferable var0 = Toolkit.getDefaultToolkit().getSystemClipboard().getContents((Object)null);
-            if(var0 != null && var0.isDataFlavorSupported(DataFlavor.stringFlavor)) {
-                String var1 = (String)var0.getTransferData(DataFlavor.stringFlavor);
-                return var1;
+            Transferable transferable = Toolkit.getDefaultToolkit().getSystemClipboard().getContents(null);
+            if (transferable != null && transferable.isDataFlavorSupported(DataFlavor.stringFlavor)) {
+                String s = (String) transferable.getTransferData(DataFlavor.stringFlavor);
+                return s;
             }
-        } catch (Exception var2) {
+        } catch (Exception exception) {
         }
-
         return null;
     }
 
-    protected void mouseClicked(int var1, int var2, int var3) {
-        if(var3 == 0) {
-            for(int var4 = 0; var4 < this.controlList.size(); ++var4) {
-                GuiButton var5 = (GuiButton)this.controlList.get(var4);
-                if(var5.mousePressed(this.mc, var1, var2)) {
-                    this.selectedButton = var5;
-                    this.mc.sndManager.func_337_a("random.click", 1.0F, 1.0F);
-                    this.actionPerformed(var5);
+    public void drawScreen(int i, int j, float f) {
+        for (int k = 0; k < controlList.size(); k++) {
+            GuiButton guibutton = (GuiButton) controlList.get(k);
+            guibutton.drawButton(mc, i, j);
+        }
+
+    }
+
+    protected void keyTyped(char c, int i) {
+        if (i == 1) {
+            mc.displayGuiScreen(null);
+            mc.func_6259_e();
+        }
+    }
+
+    protected void mouseClicked(int i, int j, int k) {
+        if (k == 0) {
+            for (int l = 0; l < controlList.size(); l++) {
+                GuiButton guibutton = (GuiButton) controlList.get(l);
+                if (guibutton.mousePressed(mc, i, j)) {
+                    selectedButton = guibutton;
+                    mc.sndManager.func_337_a("random.click", 1.0F, 1.0F);
+                    actionPerformed(guibutton);
                 }
             }
-        }
-
-    }
-
-    protected void mouseMovedOrUp(int var1, int var2, int var3) {
-        if(this.selectedButton != null && var3 == 0) {
-            this.selectedButton.mouseReleased(var1, var2);
-            this.selectedButton = null;
-        }
-
-    }
-
-    protected void actionPerformed(GuiButton var1) {
-    }
-
-    public void setWorldAndResolution(Minecraft var1, int var2, int var3) {
-        this.mc = var1;
-        this.fontRenderer = var1.fontRenderer;
-        this.width = var2;
-        this.height = var3;
-        this.controlList.clear();
-        this.initGui();
+
+        }
+    }
+
+    protected void mouseMovedOrUp(int i, int j, int k) {
+        if (selectedButton != null && k == 0) {
+            selectedButton.mouseReleased(i, j);
+            selectedButton = null;
+        }
+    }
+
+    protected void actionPerformed(GuiButton guibutton) {
+    }
+
+    public void setWorldAndResolution(Minecraft minecraft, int i, int j) {
+        mc = minecraft;
+        fontRenderer = minecraft.fontRenderer;
+        width = i;
+        height = j;
+        controlList.clear();
+        initGui();
     }
 
     public void initGui() {
     }
 
     public void handleInput() {
-        while(Mouse.next()) {
-            this.handleMouseInput();
-        }
-
-        while(Keyboard.next()) {
-            this.handleKeyboardInput();
-        }
-
+        for (; Mouse.next(); handleMouseInput()) {
+        }
+        for (; Keyboard.next(); handleKeyboardInput()) {
+        }
     }
 
     public void handleMouseInput() {
-        int var1;
-        int var2;
-        if(Mouse.getEventButtonState()) {
-            var1 = Mouse.getEventX() * this.width / this.mc.displayWidth;
-            var2 = this.height - Mouse.getEventY() * this.height / this.mc.displayHeight - 1;
-            this.mouseClicked(var1, var2, Mouse.getEventButton());
+        if (Mouse.getEventButtonState()) {
+            int i = (Mouse.getEventX() * width) / mc.displayWidth;
+            int k = height - (Mouse.getEventY() * height) / mc.displayHeight - 1;
+            mouseClicked(i, k, Mouse.getEventButton());
         } else {
-            var1 = Mouse.getEventX() * this.width / this.mc.displayWidth;
-            var2 = this.height - Mouse.getEventY() * this.height / this.mc.displayHeight - 1;
-            this.mouseMovedOrUp(var1, var2, Mouse.getEventButton());
+            int j = (Mouse.getEventX() * width) / mc.displayWidth;
+            int l = height - (Mouse.getEventY() * height) / mc.displayHeight - 1;
+            mouseMovedOrUp(j, l, Mouse.getEventButton());
         }
-
     }
 
     public void handleKeyboardInput() {
-        if(Keyboard.getEventKeyState()) {
-            if(Keyboard.getEventKey() == Keyboard.KEY_F11) {
-                this.mc.toggleFullscreen();
+        if (Keyboard.getEventKeyState()) {
+            if (Keyboard.getEventKey() == 87) {
+                mc.toggleFullscreen();
                 return;
             }
-
-            this.keyTyped(Keyboard.getEventCharacter(), Keyboard.getEventKey());
+            keyTyped(Keyboard.getEventCharacter(), Keyboard.getEventKey());
         }
-
     }
 
     public void updateScreen() {
@@ -130,38 +125,37 @@
     }
 
     public void drawDefaultBackground() {
-        this.func_567_a(0);
+        func_567_a(0);
     }
 
-    public void func_567_a(int var1) {
-        if(this.mc.theWorld != null) {
-            this.drawGradientRect(0, 0, this.width, this.height, -1072689136, -804253680);
+    public void func_567_a(int i) {
+        if (mc.theWorld != null) {
+            drawGradientRect(0, 0, width, height, 0xc0101010, 0xd0101010);
         } else {
-            this.drawBackground(var1);
+            drawBackground(i);
         }
-
     }
 
-    public void drawBackground(int var1) {
-        GL11.glDisable(GL11.GL_LIGHTING);
-        GL11.glDisable(GL11.GL_FOG);
-        Tessellator var2 = Tessellator.instance;
-        GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/background.png"));
+    public void drawBackground(int i) {
+        GL11.glDisable(2896 /*GL_LIGHTING*/);
+        GL11.glDisable(2912 /*GL_FOG*/);
+        Tessellator tessellator = Tessellator.instance;
+        GL11.glBindTexture(3553 /*GL_TEXTURE_2D*/, mc.renderEngine.getTexture("/gui/background.png"));
         GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-        float var3 = 32.0F;
-        var2.startDrawingQuads();
-        var2.setColorOpaque_I(4210752);
-        var2.addVertexWithUV(0.0D, (double)this.height, 0.0D, 0.0D, (double)((float)this.height / var3 + (float)var1));
-        var2.addVertexWithUV((double)this.width, (double)this.height, 0.0D, (double)((float)this.width / var3), (double)((float)this.height / var3 + (float)var1));
-        var2.addVertexWithUV((double)this.width, 0.0D, 0.0D, (double)((float)this.width / var3), (double)(0 + var1));
-        var2.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, (double)(0 + var1));
-        var2.draw();
+        float f = 32F;
+        tessellator.startDrawingQuads();
+        tessellator.setColorOpaque_I(0x404040);
+        tessellator.addVertexWithUV(0.0D, height, 0.0D, 0.0D, (float) height / f + (float) i);
+        tessellator.addVertexWithUV(width, height, 0.0D, (float) width / f, (float) height / f + (float) i);
+        tessellator.addVertexWithUV(width, 0.0D, 0.0D, (float) width / f, i);
+        tessellator.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, i);
+        tessellator.draw();
     }
 
     public boolean doesGuiPauseGame() {
         return true;
     }
 
-    public void deleteWorld(boolean var1, int var2) {
+    public void deleteWorld(boolean flag, int i) {
     }
 }
