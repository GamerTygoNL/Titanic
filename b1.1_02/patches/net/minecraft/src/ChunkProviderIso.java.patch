--- net/minecraft/src/ChunkProviderIso.java
+++ net/minecraft/src/ChunkProviderIso.java
@@ -2,57 +2,58 @@
 
 import java.io.IOException;
 
-public class ChunkProviderIso implements IChunkProvider {
-    private Chunk[] chunks = new Chunk[256];
+public class ChunkProviderIso
+        implements IChunkProvider {
+
+    byte field_899_a[];
+    private Chunk chunks[];
     private World worldObj;
     private IChunkLoader chunkLoader;
-    byte[] field_899_a = new byte[-Short.MIN_VALUE];
-
-    public ChunkProviderIso(World var1, IChunkLoader var2) {
-        this.worldObj = var1;
-        this.chunkLoader = var2;
-    }
-
-    public boolean chunkExists(int var1, int var2) {
-        int var3 = var1 & 15 | (var2 & 15) * 16;
-        return this.chunks[var3] != null && this.chunks[var3].isAtLocation(var1, var2);
-    }
-
-    public Chunk provideChunk(int var1, int var2) {
-        int var3 = var1 & 15 | (var2 & 15) * 16;
-
+
+    public ChunkProviderIso(World world, IChunkLoader ichunkloader) {
+        chunks = new Chunk[256];
+        field_899_a = new byte[32768];
+        worldObj = world;
+        chunkLoader = ichunkloader;
+    }
+
+    public boolean chunkExists(int i, int j) {
+        int k = i & 0xf | (j & 0xf) * 16;
+        return chunks[k] != null && chunks[k].isAtLocation(i, j);
+    }
+
+    public Chunk provideChunk(int i, int j) {
+        int k = i & 0xf | (j & 0xf) * 16;
         try {
-            if(!this.chunkExists(var1, var2)) {
-                Chunk var4 = this.func_543_c(var1, var2);
-                if(var4 == null) {
-                    var4 = new Chunk(this.worldObj, this.field_899_a, var1, var2);
-                    var4.field_1524_q = true;
-                    var4.neverSave = true;
+            if (!chunkExists(i, j)) {
+                Chunk chunk = func_543_c(i, j);
+                if (chunk == null) {
+                    chunk = new Chunk(worldObj, field_899_a, i, j);
+                    chunk.field_1524_q = true;
+                    chunk.neverSave = true;
                 }
-
-                this.chunks[var3] = var4;
+                chunks[k] = chunk;
             }
-
-            return this.chunks[var3];
-        } catch (Exception var5) {
-            var5.printStackTrace();
-            return null;
+            return chunks[k];
+        } catch (Exception exception) {
+            exception.printStackTrace();
         }
+        return null;
     }
 
-    private synchronized Chunk func_543_c(int var1, int var2) {
+    private synchronized Chunk func_543_c(int i, int j) {
         try {
-            return this.chunkLoader.loadChunk(this.worldObj, var1, var2);
-        } catch (IOException var4) {
-            var4.printStackTrace();
-            return null;
+            return chunkLoader.loadChunk(worldObj, i, j);
+        } catch (IOException ioexception) {
+            ioexception.printStackTrace();
         }
-    }
-
-    public void populate(IChunkProvider var1, int var2, int var3) {
-    }
-
-    public boolean saveChunks(boolean var1, IProgressUpdate var2) {
+        return null;
+    }
+
+    public void populate(IChunkProvider ichunkprovider, int i, int j) {
+    }
+
+    public boolean saveChunks(boolean flag, IProgressUpdate iprogressupdate) {
         return true;
     }
 
