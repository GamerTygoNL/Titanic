--- net/minecraft/src/ChunkProviderHell.java
+++ net/minecraft/src/ChunkProviderHell.java
@@ -2,361 +2,341 @@
 
 import java.util.Random;
 
-public class ChunkProviderHell implements IChunkProvider {
+public class ChunkProviderHell
+        implements IChunkProvider {
+
+    public NoiseGeneratorOctaves field_4177_a;
+    public NoiseGeneratorOctaves field_4176_b;
+    double field_4175_c[];
+    double field_4174_d[];
+    double field_4173_e[];
+    double field_4172_f[];
+    double field_4171_g[];
     private Random field_4170_h;
     private NoiseGeneratorOctaves field_4169_i;
     private NoiseGeneratorOctaves field_4168_j;
     private NoiseGeneratorOctaves field_4167_k;
     private NoiseGeneratorOctaves field_4166_l;
     private NoiseGeneratorOctaves field_4165_m;
-    public NoiseGeneratorOctaves field_4177_a;
-    public NoiseGeneratorOctaves field_4176_b;
     private World field_4164_n;
-    private double[] field_4163_o;
-    private double[] field_4162_p = new double[256];
-    private double[] field_4161_q = new double[256];
-    private double[] field_4160_r = new double[256];
-    private MapGenBase field_4159_s = new MapGenCavesHell();
-    double[] field_4175_c;
-    double[] field_4174_d;
-    double[] field_4173_e;
-    double[] field_4172_f;
-    double[] field_4171_g;
-
-    public ChunkProviderHell(World var1, long var2) {
-        this.field_4164_n = var1;
-        this.field_4170_h = new Random(var2);
-        this.field_4169_i = new NoiseGeneratorOctaves(this.field_4170_h, 16);
-        this.field_4168_j = new NoiseGeneratorOctaves(this.field_4170_h, 16);
-        this.field_4167_k = new NoiseGeneratorOctaves(this.field_4170_h, 8);
-        this.field_4166_l = new NoiseGeneratorOctaves(this.field_4170_h, 4);
-        this.field_4165_m = new NoiseGeneratorOctaves(this.field_4170_h, 4);
-        this.field_4177_a = new NoiseGeneratorOctaves(this.field_4170_h, 10);
-        this.field_4176_b = new NoiseGeneratorOctaves(this.field_4170_h, 16);
-    }
-
-    public void func_4059_a(int var1, int var2, byte[] var3) {
-        byte var4 = 4;
-        byte var5 = 32;
-        int var6 = var4 + 1;
-        byte var7 = 17;
-        int var8 = var4 + 1;
-        this.field_4163_o = this.func_4057_a(this.field_4163_o, var1 * var4, 0, var2 * var4, var6, var7, var8);
-
-        for(int var9 = 0; var9 < var4; ++var9) {
-            for(int var10 = 0; var10 < var4; ++var10) {
-                for(int var11 = 0; var11 < 16; ++var11) {
-                    double var12 = 0.125D;
-                    double var14 = this.field_4163_o[((var9 + 0) * var8 + var10 + 0) * var7 + var11 + 0];
-                    double var16 = this.field_4163_o[((var9 + 0) * var8 + var10 + 1) * var7 + var11 + 0];
-                    double var18 = this.field_4163_o[((var9 + 1) * var8 + var10 + 0) * var7 + var11 + 0];
-                    double var20 = this.field_4163_o[((var9 + 1) * var8 + var10 + 1) * var7 + var11 + 0];
-                    double var22 = (this.field_4163_o[((var9 + 0) * var8 + var10 + 0) * var7 + var11 + 1] - var14) * var12;
-                    double var24 = (this.field_4163_o[((var9 + 0) * var8 + var10 + 1) * var7 + var11 + 1] - var16) * var12;
-                    double var26 = (this.field_4163_o[((var9 + 1) * var8 + var10 + 0) * var7 + var11 + 1] - var18) * var12;
-                    double var28 = (this.field_4163_o[((var9 + 1) * var8 + var10 + 1) * var7 + var11 + 1] - var20) * var12;
-
-                    for(int var30 = 0; var30 < 8; ++var30) {
-                        double var31 = 0.25D;
-                        double var33 = var14;
-                        double var35 = var16;
-                        double var37 = (var18 - var14) * var31;
-                        double var39 = (var20 - var16) * var31;
-
-                        for(int var41 = 0; var41 < 4; ++var41) {
-                            int var42 = var41 + var9 * 4 << 11 | 0 + var10 * 4 << 7 | var11 * 8 + var30;
-                            short var43 = 128;
-                            double var44 = 0.25D;
-                            double var46 = var33;
-                            double var48 = (var35 - var33) * var44;
-
-                            for(int var50 = 0; var50 < 4; ++var50) {
-                                int var51 = 0;
-                                if(var11 * 8 + var30 < var5) {
-                                    var51 = Block.lavaMoving.blockID;
-                                }
-
-                                if(var46 > 0.0D) {
-                                    var51 = Block.bloodStone.blockID;
-                                }
-
-                                var3[var42] = (byte)var51;
-                                var42 += var43;
-                                var46 += var48;
-                            }
-
-                            var33 += var37;
-                            var35 += var39;
-                        }
-
-                        var14 += var22;
-                        var16 += var24;
-                        var18 += var26;
-                        var20 += var28;
-                    }
-                }
-            }
-        }
-
-    }
-
-    public void func_4058_b(int var1, int var2, byte[] var3) {
-        byte var4 = 64;
-        double var5 = 1.0D / 32.0D;
-        this.field_4162_p = this.field_4166_l.func_807_a(this.field_4162_p, (double)(var1 * 16), (double)(var2 * 16), 0.0D, 16, 16, 1, var5, var5, 1.0D);
-        this.field_4161_q = this.field_4166_l.func_807_a(this.field_4161_q, (double)(var2 * 16), 109.0134D, (double)(var1 * 16), 16, 1, 16, var5, 1.0D, var5);
-        this.field_4160_r = this.field_4165_m.func_807_a(this.field_4160_r, (double)(var1 * 16), (double)(var2 * 16), 0.0D, 16, 16, 1, var5 * 2.0D, var5 * 2.0D, var5 * 2.0D);
-
-        for(int var7 = 0; var7 < 16; ++var7) {
-            for(int var8 = 0; var8 < 16; ++var8) {
-                boolean var9 = this.field_4162_p[var7 + var8 * 16] + this.field_4170_h.nextDouble() * 0.2D > 0.0D;
-                boolean var10 = this.field_4161_q[var7 + var8 * 16] + this.field_4170_h.nextDouble() * 0.2D > 0.0D;
-                int var11 = (int)(this.field_4160_r[var7 + var8 * 16] / 3.0D + 3.0D + this.field_4170_h.nextDouble() * 0.25D);
-                int var12 = -1;
-                byte var13 = (byte)Block.bloodStone.blockID;
-                byte var14 = (byte)Block.bloodStone.blockID;
-
-                for(int var15 = 127; var15 >= 0; --var15) {
-                    int var16 = (var7 * 16 + var8) * 128 + var15;
-                    if(var15 >= 127 - this.field_4170_h.nextInt(5)) {
-                        var3[var16] = (byte)Block.bedrock.blockID;
-                    } else if(var15 <= 0 + this.field_4170_h.nextInt(5)) {
-                        var3[var16] = (byte)Block.bedrock.blockID;
-                    } else {
-                        byte var17 = var3[var16];
-                        if(var17 == 0) {
-                            var12 = -1;
-                        } else if(var17 == Block.bloodStone.blockID) {
-                            if(var12 == -1) {
-                                if(var11 <= 0) {
-                                    var13 = 0;
-                                    var14 = (byte)Block.bloodStone.blockID;
-                                } else if(var15 >= var4 - 4 && var15 <= var4 + 1) {
-                                    var13 = (byte)Block.bloodStone.blockID;
-                                    var14 = (byte)Block.bloodStone.blockID;
-                                    if(var10) {
-                                        var13 = (byte)Block.gravel.blockID;
-                                    }
-
-                                    if(var10) {
-                                        var14 = (byte)Block.bloodStone.blockID;
-                                    }
-
-                                    if(var9) {
-                                        var13 = (byte)Block.slowSand.blockID;
-                                    }
-
-                                    if(var9) {
-                                        var14 = (byte)Block.slowSand.blockID;
-                                    }
-                                }
-
-                                if(var15 < var4 && var13 == 0) {
-                                    var13 = (byte)Block.lavaMoving.blockID;
-                                }
-
-                                var12 = var11;
-                                if(var15 >= var4 - 1) {
-                                    var3[var16] = var13;
-                                } else {
-                                    var3[var16] = var14;
-                                }
-                            } else if(var12 > 0) {
-                                --var12;
-                                var3[var16] = var14;
-                            }
-                        }
-                    }
-                }
-            }
-        }
-
-    }
-
-    public Chunk provideChunk(int var1, int var2) {
-        this.field_4170_h.setSeed((long)var1 * 341873128712L + (long)var2 * 132897987541L);
-        byte[] var3 = new byte[-Short.MIN_VALUE];
-        this.func_4059_a(var1, var2, var3);
-        this.func_4058_b(var1, var2, var3);
-        this.field_4159_s.func_867_a(this, this.field_4164_n, var1, var2, var3);
-        Chunk var4 = new Chunk(this.field_4164_n, var3, var1, var2);
-        var4.func_1024_c();
-        var4.func_4143_d();
-        return var4;
-    }
-
-    private double[] func_4057_a(double[] var1, int var2, int var3, int var4, int var5, int var6, int var7) {
-        if(var1 == null) {
-            var1 = new double[var5 * var6 * var7];
-        }
-
-        double var8 = 684.412D;
-        double var10 = 2053.236D;
-        this.field_4172_f = this.field_4177_a.func_807_a(this.field_4172_f, (double)var2, (double)var3, (double)var4, var5, 1, var7, 1.0D, 0.0D, 1.0D);
-        this.field_4171_g = this.field_4176_b.func_807_a(this.field_4171_g, (double)var2, (double)var3, (double)var4, var5, 1, var7, 100.0D, 0.0D, 100.0D);
-        this.field_4175_c = this.field_4167_k.func_807_a(this.field_4175_c, (double)var2, (double)var3, (double)var4, var5, var6, var7, var8 / 80.0D, var10 / 60.0D, var8 / 80.0D);
-        this.field_4174_d = this.field_4169_i.func_807_a(this.field_4174_d, (double)var2, (double)var3, (double)var4, var5, var6, var7, var8, var10, var8);
-        this.field_4173_e = this.field_4168_j.func_807_a(this.field_4173_e, (double)var2, (double)var3, (double)var4, var5, var6, var7, var8, var10, var8);
-        int var12 = 0;
-        int var13 = 0;
-        double[] var14 = new double[var6];
-
-        int var15;
-        for(var15 = 0; var15 < var6; ++var15) {
-            var14[var15] = Math.cos((double)var15 * Math.PI * 6.0D / (double)var6) * 2.0D;
-            double var16 = (double)var15;
-            if(var15 > var6 / 2) {
-                var16 = (double)(var6 - 1 - var15);
-            }
-
-            if(var16 < 4.0D) {
-                var16 = 4.0D - var16;
-                var14[var15] -= var16 * var16 * var16 * 10.0D;
-            }
-        }
-
-        for(var15 = 0; var15 < var5; ++var15) {
-            for(int var36 = 0; var36 < var7; ++var36) {
-                double var17 = (this.field_4172_f[var13] + 256.0D) / 512.0D;
-                if(var17 > 1.0D) {
-                    var17 = 1.0D;
-                }
-
-                double var19 = 0.0D;
-                double var21 = this.field_4171_g[var13] / 8000.0D;
-                if(var21 < 0.0D) {
-                    var21 = -var21;
-                }
-
-                var21 = var21 * 3.0D - 3.0D;
-                if(var21 < 0.0D) {
-                    var21 /= 2.0D;
-                    if(var21 < -1.0D) {
-                        var21 = -1.0D;
-                    }
-
-                    var21 /= 1.4D;
-                    var21 /= 2.0D;
-                    var17 = 0.0D;
+    private double field_4163_o[];
+    private double field_4162_p[];
+    private double field_4161_q[];
+    private double field_4160_r[];
+    private MapGenBase field_4159_s;
+    public ChunkProviderHell(World world, long l) {
+        field_4162_p = new double[256];
+        field_4161_q = new double[256];
+        field_4160_r = new double[256];
+        field_4159_s = new MapGenCavesHell();
+        field_4164_n = world;
+        field_4170_h = new Random(l);
+        field_4169_i = new NoiseGeneratorOctaves(field_4170_h, 16);
+        field_4168_j = new NoiseGeneratorOctaves(field_4170_h, 16);
+        field_4167_k = new NoiseGeneratorOctaves(field_4170_h, 8);
+        field_4166_l = new NoiseGeneratorOctaves(field_4170_h, 4);
+        field_4165_m = new NoiseGeneratorOctaves(field_4170_h, 4);
+        field_4177_a = new NoiseGeneratorOctaves(field_4170_h, 10);
+        field_4176_b = new NoiseGeneratorOctaves(field_4170_h, 16);
+    }
+
+    public void func_4059_a(int i, int j, byte abyte0[]) {
+        byte byte0 = 4;
+        byte byte1 = 32;
+        int k = byte0 + 1;
+        byte byte2 = 17;
+        int l = byte0 + 1;
+        field_4163_o = func_4057_a(field_4163_o, i * byte0, 0, j * byte0, k, byte2, l);
+        for (int i1 = 0; i1 < byte0; i1++) {
+            for (int j1 = 0; j1 < byte0; j1++) {
+                for (int k1 = 0; k1 < 16; k1++) {
+                    double d = 0.125D;
+                    double d1 = field_4163_o[((i1 + 0) * l + (j1 + 0)) * byte2 + (k1 + 0)];
+                    double d2 = field_4163_o[((i1 + 0) * l + (j1 + 1)) * byte2 + (k1 + 0)];
+                    double d3 = field_4163_o[((i1 + 1) * l + (j1 + 0)) * byte2 + (k1 + 0)];
+                    double d4 = field_4163_o[((i1 + 1) * l + (j1 + 1)) * byte2 + (k1 + 0)];
+                    double d5 = (field_4163_o[((i1 + 0) * l + (j1 + 0)) * byte2 + (k1 + 1)] - d1) * d;
+                    double d6 = (field_4163_o[((i1 + 0) * l + (j1 + 1)) * byte2 + (k1 + 1)] - d2) * d;
+                    double d7 = (field_4163_o[((i1 + 1) * l + (j1 + 0)) * byte2 + (k1 + 1)] - d3) * d;
+                    double d8 = (field_4163_o[((i1 + 1) * l + (j1 + 1)) * byte2 + (k1 + 1)] - d4) * d;
+                    for (int l1 = 0; l1 < 8; l1++) {
+                        double d9 = 0.25D;
+                        double d10 = d1;
+                        double d11 = d2;
+                        double d12 = (d3 - d1) * d9;
+                        double d13 = (d4 - d2) * d9;
+                        for (int i2 = 0; i2 < 4; i2++) {
+                            int j2 = i2 + i1 * 4 << 11 | 0 + j1 * 4 << 7 | k1 * 8 + l1;
+                            char c = '\200';
+                            double d14 = 0.25D;
+                            double d15 = d10;
+                            double d16 = (d11 - d10) * d14;
+                            for (int k2 = 0; k2 < 4; k2++) {
+                                int l2 = 0;
+                                if (k1 * 8 + l1 < byte1) {
+                                    l2 = Block.lavaMoving.blockID;
+                                }
+                                if (d15 > 0.0D) {
+                                    l2 = Block.bloodStone.blockID;
+                                }
+                                abyte0[j2] = (byte) l2;
+                                j2 += c;
+                                d15 += d16;
+                            }
+
+                            d10 += d12;
+                            d11 += d13;
+                        }
+
+                        d1 += d5;
+                        d2 += d6;
+                        d3 += d7;
+                        d4 += d8;
+                    }
+
+                }
+
+            }
+
+        }
+
+    }
+
+    public void func_4058_b(int i, int j, byte abyte0[]) {
+        byte byte0 = 64;
+        double d = 0.03125D;
+        field_4162_p = field_4166_l.func_807_a(field_4162_p, i * 16, j * 16, 0.0D, 16, 16, 1, d, d, 1.0D);
+        field_4161_q = field_4166_l.func_807_a(field_4161_q, j * 16, 109.0134D, i * 16, 16, 1, 16, d, 1.0D, d);
+        field_4160_r = field_4165_m.func_807_a(field_4160_r, i * 16, j * 16, 0.0D, 16, 16, 1, d * 2D, d * 2D, d * 2D);
+        for (int k = 0; k < 16; k++) {
+            for (int l = 0; l < 16; l++) {
+                boolean flag = field_4162_p[k + l * 16] + field_4170_h.nextDouble() * 0.20000000000000001D > 0.0D;
+                boolean flag1 = field_4161_q[k + l * 16] + field_4170_h.nextDouble() * 0.20000000000000001D > 0.0D;
+                int i1 = (int) (field_4160_r[k + l * 16] / 3D + 3D + field_4170_h.nextDouble() * 0.25D);
+                int j1 = -1;
+                byte byte1 = (byte) Block.bloodStone.blockID;
+                byte byte2 = (byte) Block.bloodStone.blockID;
+                for (int k1 = 127; k1 >= 0; k1--) {
+                    int l1 = (k * 16 + l) * 128 + k1;
+                    if (k1 >= 127 - field_4170_h.nextInt(5)) {
+                        abyte0[l1] = (byte) Block.bedrock.blockID;
+                        continue;
+                    }
+                    if (k1 <= 0 + field_4170_h.nextInt(5)) {
+                        abyte0[l1] = (byte) Block.bedrock.blockID;
+                        continue;
+                    }
+                    byte byte3 = abyte0[l1];
+                    if (byte3 == 0) {
+                        j1 = -1;
+                        continue;
+                    }
+                    if (byte3 != Block.bloodStone.blockID) {
+                        continue;
+                    }
+                    if (j1 == -1) {
+                        if (i1 <= 0) {
+                            byte1 = 0;
+                            byte2 = (byte) Block.bloodStone.blockID;
+                        } else if (k1 >= byte0 - 4 && k1 <= byte0 + 1) {
+                            byte1 = (byte) Block.bloodStone.blockID;
+                            byte2 = (byte) Block.bloodStone.blockID;
+                            if (flag1) {
+                                byte1 = (byte) Block.gravel.blockID;
+                            }
+                            if (flag1) {
+                                byte2 = (byte) Block.bloodStone.blockID;
+                            }
+                            if (flag) {
+                                byte1 = (byte) Block.slowSand.blockID;
+                            }
+                            if (flag) {
+                                byte2 = (byte) Block.slowSand.blockID;
+                            }
+                        }
+                        if (k1 < byte0 && byte1 == 0) {
+                            byte1 = (byte) Block.lavaMoving.blockID;
+                        }
+                        j1 = i1;
+                        if (k1 >= byte0 - 1) {
+                            abyte0[l1] = byte1;
+                        } else {
+                            abyte0[l1] = byte2;
+                        }
+                        continue;
+                    }
+                    if (j1 > 0) {
+                        j1--;
+                        abyte0[l1] = byte2;
+                    }
+                }
+
+            }
+
+        }
+
+    }
+
+    public Chunk provideChunk(int i, int j) {
+        field_4170_h.setSeed((long) i * 0x4f9939f508L + (long) j * 0x1ef1565bd5L);
+        byte abyte0[] = new byte[32768];
+        func_4059_a(i, j, abyte0);
+        func_4058_b(i, j, abyte0);
+        field_4159_s.func_867_a(this, field_4164_n, i, j, abyte0);
+        Chunk chunk = new Chunk(field_4164_n, abyte0, i, j);
+        chunk.func_1024_c();
+        chunk.func_4143_d();
+        return chunk;
+    }
+
+    private double[] func_4057_a(double ad[], int i, int j, int k, int l, int i1, int j1) {
+        if (ad == null) {
+            ad = new double[l * i1 * j1];
+        }
+        double d = 684.41200000000003D;
+        double d1 = 2053.2359999999999D;
+        field_4172_f = field_4177_a.func_807_a(field_4172_f, i, j, k, l, 1, j1, 1.0D, 0.0D, 1.0D);
+        field_4171_g = field_4176_b.func_807_a(field_4171_g, i, j, k, l, 1, j1, 100D, 0.0D, 100D);
+        field_4175_c = field_4167_k.func_807_a(field_4175_c, i, j, k, l, i1, j1, d / 80D, d1 / 60D, d / 80D);
+        field_4174_d = field_4169_i.func_807_a(field_4174_d, i, j, k, l, i1, j1, d, d1, d);
+        field_4173_e = field_4168_j.func_807_a(field_4173_e, i, j, k, l, i1, j1, d, d1, d);
+        int k1 = 0;
+        int l1 = 0;
+        double ad1[] = new double[i1];
+        for (int i2 = 0; i2 < i1; i2++) {
+            ad1[i2] = Math.cos(((double) i2 * 3.1415926535897931D * 6D) / (double) i1) * 2D;
+            double d2 = i2;
+            if (i2 > i1 / 2) {
+                d2 = i1 - 1 - i2;
+            }
+            if (d2 < 4D) {
+                d2 = 4D - d2;
+                ad1[i2] -= d2 * d2 * d2 * 10D;
+            }
+        }
+
+        for (int j2 = 0; j2 < l; j2++) {
+            for (int k2 = 0; k2 < j1; k2++) {
+                double d3 = (field_4172_f[l1] + 256D) / 512D;
+                if (d3 > 1.0D) {
+                    d3 = 1.0D;
+                }
+                double d4 = 0.0D;
+                double d5 = field_4171_g[l1] / 8000D;
+                if (d5 < 0.0D) {
+                    d5 = -d5;
+                }
+                d5 = d5 * 3D - 3D;
+                if (d5 < 0.0D) {
+                    d5 /= 2D;
+                    if (d5 < -1D) {
+                        d5 = -1D;
+                    }
+                    d5 /= 1.3999999999999999D;
+                    d5 /= 2D;
+                    d3 = 0.0D;
                 } else {
-                    if(var21 > 1.0D) {
-                        var21 = 1.0D;
+                    if (d5 > 1.0D) {
+                        d5 = 1.0D;
                     }
-
-                    var21 /= 6.0D;
+                    d5 /= 6D;
                 }
-
-                var17 += 0.5D;
-                var21 = var21 * (double)var6 / 16.0D;
-                ++var13;
-
-                for(int var23 = 0; var23 < var6; ++var23) {
-                    double var24 = 0.0D;
-                    double var26 = var14[var23];
-                    double var28 = this.field_4174_d[var12] / 512.0D;
-                    double var30 = this.field_4173_e[var12] / 512.0D;
-                    double var32 = (this.field_4175_c[var12] / 10.0D + 1.0D) / 2.0D;
-                    if(var32 < 0.0D) {
-                        var24 = var28;
-                    } else if(var32 > 1.0D) {
-                        var24 = var30;
+                d3 += 0.5D;
+                d5 = (d5 * (double) i1) / 16D;
+                l1++;
+                for (int l2 = 0; l2 < i1; l2++) {
+                    double d6 = 0.0D;
+                    double d7 = ad1[l2];
+                    double d8 = field_4174_d[k1] / 512D;
+                    double d9 = field_4173_e[k1] / 512D;
+                    double d10 = (field_4175_c[k1] / 10D + 1.0D) / 2D;
+                    if (d10 < 0.0D) {
+                        d6 = d8;
+                    } else if (d10 > 1.0D) {
+                        d6 = d9;
                     } else {
-                        var24 = var28 + (var30 - var28) * var32;
-                    }
-
-                    var24 -= var26;
-                    double var34;
-                    if(var23 > var6 - 4) {
-                        var34 = (double)((float)(var23 - (var6 - 4)) / 3.0F);
-                        var24 = var24 * (1.0D - var34) + -10.0D * var34;
-                    }
-
-                    if((double)var23 < var19) {
-                        var34 = (var19 - (double)var23) / 4.0D;
-                        if(var34 < 0.0D) {
-                            var34 = 0.0D;
-                        }
-
-                        if(var34 > 1.0D) {
-                            var34 = 1.0D;
-                        }
-
-                        var24 = var24 * (1.0D - var34) + -10.0D * var34;
-                    }
-
-                    var1[var12] = var24;
-                    ++var12;
+                        d6 = d8 + (d9 - d8) * d10;
+                    }
+                    d6 -= d7;
+                    if (l2 > i1 - 4) {
+                        double d11 = (float) (l2 - (i1 - 4)) / 3F;
+                        d6 = d6 * (1.0D - d11) + -10D * d11;
+                    }
+                    if ((double) l2 < d4) {
+                        double d12 = (d4 - (double) l2) / 4D;
+                        if (d12 < 0.0D) {
+                            d12 = 0.0D;
+                        }
+                        if (d12 > 1.0D) {
+                            d12 = 1.0D;
+                        }
+                        d6 = d6 * (1.0D - d12) + -10D * d12;
+                    }
+                    ad[k1] = d6;
+                    k1++;
                 }
+
             }
+
         }
 
-        return var1;
+        return ad;
     }
 
-    public boolean chunkExists(int var1, int var2) {
+    public boolean chunkExists(int i, int j) {
         return true;
     }
 
-    public void populate(IChunkProvider var1, int var2, int var3) {
+    public void populate(IChunkProvider ichunkprovider, int i, int j) {
         BlockSand.fallInstantly = true;
-        int var4 = var2 * 16;
-        int var5 = var3 * 16;
-
-        int var6;
-        int var7;
-        int var8;
-        int var9;
-        for(var6 = 0; var6 < 8; ++var6) {
-            var7 = var4 + this.field_4170_h.nextInt(16) + 8;
-            var8 = this.field_4170_h.nextInt(120) + 4;
-            var9 = var5 + this.field_4170_h.nextInt(16) + 8;
-            (new WorldGenHellLava(Block.lavaStill.blockID)).generate(this.field_4164_n, this.field_4170_h, var7, var8, var9);
-        }
-
-        var6 = this.field_4170_h.nextInt(this.field_4170_h.nextInt(10) + 1) + 1;
-
-        int var10;
-        for(var7 = 0; var7 < var6; ++var7) {
-            var8 = var4 + this.field_4170_h.nextInt(16) + 8;
-            var9 = this.field_4170_h.nextInt(120) + 4;
-            var10 = var5 + this.field_4170_h.nextInt(16) + 8;
-            (new WorldGenFire()).generate(this.field_4164_n, this.field_4170_h, var8, var9, var10);
-        }
-
-        var6 = this.field_4170_h.nextInt(this.field_4170_h.nextInt(10) + 1);
-
-        for(var7 = 0; var7 < var6; ++var7) {
-            var8 = var4 + this.field_4170_h.nextInt(16) + 8;
-            var9 = this.field_4170_h.nextInt(120) + 4;
-            var10 = var5 + this.field_4170_h.nextInt(16) + 8;
-            (new WorldGenLightStone1()).generate(this.field_4164_n, this.field_4170_h, var8, var9, var10);
-        }
-
-        for(var7 = 0; var7 < 10; ++var7) {
-            var8 = var4 + this.field_4170_h.nextInt(16) + 8;
-            var9 = this.field_4170_h.nextInt(128);
-            var10 = var5 + this.field_4170_h.nextInt(16) + 8;
-            (new WorldGenLightStone2()).generate(this.field_4164_n, this.field_4170_h, var8, var9, var10);
-        }
-
-        if(this.field_4170_h.nextInt(1) == 0) {
-            var7 = var4 + this.field_4170_h.nextInt(16) + 8;
-            var8 = this.field_4170_h.nextInt(128);
-            var9 = var5 + this.field_4170_h.nextInt(16) + 8;
-            (new WorldGenFlowers(Block.mushroomBrown.blockID)).generate(this.field_4164_n, this.field_4170_h, var7, var8, var9);
-        }
-
-        if(this.field_4170_h.nextInt(1) == 0) {
-            var7 = var4 + this.field_4170_h.nextInt(16) + 8;
-            var8 = this.field_4170_h.nextInt(128);
-            var9 = var5 + this.field_4170_h.nextInt(16) + 8;
-            (new WorldGenFlowers(Block.mushroomRed.blockID)).generate(this.field_4164_n, this.field_4170_h, var7, var8, var9);
-        }
-
+        int k = i * 16;
+        int l = j * 16;
+        for (int i1 = 0; i1 < 8; i1++) {
+            int k1 = k + field_4170_h.nextInt(16) + 8;
+            int i3 = field_4170_h.nextInt(120) + 4;
+            int k4 = l + field_4170_h.nextInt(16) + 8;
+            (new WorldGenHellLava(Block.lavaStill.blockID)).generate(field_4164_n, field_4170_h, k1, i3, k4);
+        }
+
+        int j1 = field_4170_h.nextInt(field_4170_h.nextInt(10) + 1) + 1;
+        for (int l1 = 0; l1 < j1; l1++) {
+            int j3 = k + field_4170_h.nextInt(16) + 8;
+            int l4 = field_4170_h.nextInt(120) + 4;
+            int i6 = l + field_4170_h.nextInt(16) + 8;
+            (new WorldGenFire()).generate(field_4164_n, field_4170_h, j3, l4, i6);
+        }
+
+        j1 = field_4170_h.nextInt(field_4170_h.nextInt(10) + 1);
+        for (int i2 = 0; i2 < j1; i2++) {
+            int k3 = k + field_4170_h.nextInt(16) + 8;
+            int i5 = field_4170_h.nextInt(120) + 4;
+            int j6 = l + field_4170_h.nextInt(16) + 8;
+            (new WorldGenLightStone1()).generate(field_4164_n, field_4170_h, k3, i5, j6);
+        }
+
+        for (int j2 = 0; j2 < 10; j2++) {
+            int l3 = k + field_4170_h.nextInt(16) + 8;
+            int j5 = field_4170_h.nextInt(128);
+            int k6 = l + field_4170_h.nextInt(16) + 8;
+            (new WorldGenLightStone2()).generate(field_4164_n, field_4170_h, l3, j5, k6);
+        }
+
+        if (field_4170_h.nextInt(1) == 0) {
+            int k2 = k + field_4170_h.nextInt(16) + 8;
+            int i4 = field_4170_h.nextInt(128);
+            int k5 = l + field_4170_h.nextInt(16) + 8;
+            (new WorldGenFlowers(Block.mushroomBrown.blockID)).generate(field_4164_n, field_4170_h, k2, i4, k5);
+        }
+        if (field_4170_h.nextInt(1) == 0) {
+            int l2 = k + field_4170_h.nextInt(16) + 8;
+            int j4 = field_4170_h.nextInt(128);
+            int l5 = l + field_4170_h.nextInt(16) + 8;
+            (new WorldGenFlowers(Block.mushroomRed.blockID)).generate(field_4164_n, field_4170_h, l2, j4, l5);
+        }
         BlockSand.fallInstantly = false;
     }
 
-    public boolean saveChunks(boolean var1, IProgressUpdate var2) {
+    public boolean saveChunks(boolean flag, IProgressUpdate iprogressupdate) {
         return true;
     }
 
