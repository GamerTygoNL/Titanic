--- net/minecraft/src/LoadingScreenRenderer.java
+++ net/minecraft/src/LoadingScreenRenderer.java
@@ -4,122 +4,133 @@
 import org.lwjgl.opengl.Display;
 import org.lwjgl.opengl.GL11;
 
-public class LoadingScreenRenderer implements IProgressUpdate {
-    private String field_1004_a = "";
+public class LoadingScreenRenderer
+        implements IProgressUpdate {
+
+    private String field_1004_a;
     private Minecraft mc;
-    private String field_1007_c = "";
-    private long field_1006_d = System.currentTimeMillis();
-    private boolean field_1005_e = false;
-
-    public LoadingScreenRenderer(Minecraft var1) {
-        this.mc = var1;
-    }
-
-    public void printText(String var1) {
-        this.field_1005_e = false;
-        this.func_597_c(var1);
-    }
-
-    public void func_594_b(String var1) {
-        this.field_1005_e = true;
-        this.func_597_c(this.field_1007_c);
-    }
-
-    public void func_597_c(String var1) {
-        if(!this.mc.running) {
-            if(!this.field_1005_e) {
-                throw new MinecraftError();
-            }
-        } else {
-            this.field_1007_c = var1;
-            ScaledResolution var2 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
-            int var3 = var2.getScaledWidth();
-            int var4 = var2.getScaledHeight();
-            GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
-            GL11.glMatrixMode(GL11.GL_PROJECTION);
-            GL11.glLoadIdentity();
-            GL11.glOrtho(0.0D, (double)var3, (double)var4, 0.0D, 100.0D, 300.0D);
-            GL11.glMatrixMode(GL11.GL_MODELVIEW);
-            GL11.glLoadIdentity();
-            GL11.glTranslatef(0.0F, 0.0F, -200.0F);
-        }
-    }
-
-    public void displayLoadingString(String var1) {
-        if(!this.mc.running) {
-            if(!this.field_1005_e) {
-                throw new MinecraftError();
-            }
-        } else {
-            this.field_1006_d = 0L;
-            this.field_1004_a = var1;
-            this.setLoadingProgress(-1);
-            this.field_1006_d = 0L;
-        }
-    }
-
-    public void setLoadingProgress(int var1) {
-        if(!this.mc.running) {
-            if(!this.field_1005_e) {
-                throw new MinecraftError();
-            }
-        } else {
-            long var2 = System.currentTimeMillis();
-            if(var2 - this.field_1006_d >= 20L) {
-                this.field_1006_d = var2;
-                ScaledResolution var4 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
-                int var5 = var4.getScaledWidth();
-                int var6 = var4.getScaledHeight();
-                GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
-                GL11.glMatrixMode(GL11.GL_PROJECTION);
-                GL11.glLoadIdentity();
-                GL11.glOrtho(0.0D, (double)var5, (double)var6, 0.0D, 100.0D, 300.0D);
-                GL11.glMatrixMode(GL11.GL_MODELVIEW);
-                GL11.glLoadIdentity();
-                GL11.glTranslatef(0.0F, 0.0F, -200.0F);
-                GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT | GL11.GL_COLOR_BUFFER_BIT);
-                Tessellator var7 = Tessellator.instance;
-                int var8 = this.mc.renderEngine.getTexture("/gui/background.png");
-                GL11.glBindTexture(GL11.GL_TEXTURE_2D, var8);
-                float var9 = 32.0F;
-                var7.startDrawingQuads();
-                var7.setColorOpaque_I(4210752);
-                var7.addVertexWithUV(0.0D, (double)var6, 0.0D, 0.0D, (double)((float)var6 / var9));
-                var7.addVertexWithUV((double)var5, (double)var6, 0.0D, (double)((float)var5 / var9), (double)((float)var6 / var9));
-                var7.addVertexWithUV((double)var5, 0.0D, 0.0D, (double)((float)var5 / var9), 0.0D);
-                var7.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
-                var7.draw();
-                if(var1 >= 0) {
-                    byte var10 = 100;
-                    byte var11 = 2;
-                    int var12 = var5 / 2 - var10 / 2;
-                    int var13 = var6 / 2 + 16;
-                    GL11.glDisable(GL11.GL_TEXTURE_2D);
-                    var7.startDrawingQuads();
-                    var7.setColorOpaque_I(8421504);
-                    var7.addVertex((double)var12, (double)var13, 0.0D);
-                    var7.addVertex((double)var12, (double)(var13 + var11), 0.0D);
-                    var7.addVertex((double)(var12 + var10), (double)(var13 + var11), 0.0D);
-                    var7.addVertex((double)(var12 + var10), (double)var13, 0.0D);
-                    var7.setColorOpaque_I(8454016);
-                    var7.addVertex((double)var12, (double)var13, 0.0D);
-                    var7.addVertex((double)var12, (double)(var13 + var11), 0.0D);
-                    var7.addVertex((double)(var12 + var1), (double)(var13 + var11), 0.0D);
-                    var7.addVertex((double)(var12 + var1), (double)var13, 0.0D);
-                    var7.draw();
-                    GL11.glEnable(GL11.GL_TEXTURE_2D);
-                }
-
-                this.mc.fontRenderer.drawStringWithShadow(this.field_1007_c, (var5 - this.mc.fontRenderer.getStringWidth(this.field_1007_c)) / 2, var6 / 2 - 4 - 16, 16777215);
-                this.mc.fontRenderer.drawStringWithShadow(this.field_1004_a, (var5 - this.mc.fontRenderer.getStringWidth(this.field_1004_a)) / 2, var6 / 2 - 4 + 8, 16777215);
-                Display.update();
-
-                try {
-                    Thread.yield();
-                } catch (Exception var14) {
-                }
-
-            }
+    private String field_1007_c;
+    private long field_1006_d;
+    private boolean field_1005_e;
+
+    public LoadingScreenRenderer(Minecraft minecraft) {
+        field_1004_a = "";
+        field_1007_c = "";
+        field_1006_d = System.currentTimeMillis();
+        field_1005_e = false;
+        mc = minecraft;
+    }
+
+    public void printText(String s) {
+        field_1005_e = false;
+        func_597_c(s);
+    }
+
+    public void func_594_b(String s) {
+        field_1005_e = true;
+        func_597_c(field_1007_c);
+    }
+
+    public void func_597_c(String s) {
+        if (!mc.running) {
+            if (field_1005_e) {
+                return;
+            } else {
+                throw new MinecraftError();
+            }
+        } else {
+            field_1007_c = s;
+            ScaledResolution scaledresolution = new ScaledResolution(mc.displayWidth, mc.displayHeight);
+            int i = scaledresolution.getScaledWidth();
+            int j = scaledresolution.getScaledHeight();
+            GL11.glClear(256);
+            GL11.glMatrixMode(5889 /*GL_PROJECTION*/);
+            GL11.glLoadIdentity();
+            GL11.glOrtho(0.0D, i, j, 0.0D, 100D, 300D);
+            GL11.glMatrixMode(5888 /*GL_MODELVIEW0_ARB*/);
+            GL11.glLoadIdentity();
+            GL11.glTranslatef(0.0F, 0.0F, -200F);
+            return;
+        }
+    }
+
+    public void displayLoadingString(String s) {
+        if (!mc.running) {
+            if (field_1005_e) {
+                return;
+            } else {
+                throw new MinecraftError();
+            }
+        } else {
+            field_1006_d = 0L;
+            field_1004_a = s;
+            setLoadingProgress(-1);
+            field_1006_d = 0L;
+            return;
+        }
+    }
+
+    public void setLoadingProgress(int i) {
+        if (!mc.running) {
+            if (field_1005_e) {
+                return;
+            } else {
+                throw new MinecraftError();
+            }
+        }
+        long l = System.currentTimeMillis();
+        if (l - field_1006_d < 20L) {
+            return;
+        }
+        field_1006_d = l;
+        ScaledResolution scaledresolution = new ScaledResolution(mc.displayWidth, mc.displayHeight);
+        int j = scaledresolution.getScaledWidth();
+        int k = scaledresolution.getScaledHeight();
+        GL11.glClear(256);
+        GL11.glMatrixMode(5889 /*GL_PROJECTION*/);
+        GL11.glLoadIdentity();
+        GL11.glOrtho(0.0D, j, k, 0.0D, 100D, 300D);
+        GL11.glMatrixMode(5888 /*GL_MODELVIEW0_ARB*/);
+        GL11.glLoadIdentity();
+        GL11.glTranslatef(0.0F, 0.0F, -200F);
+        GL11.glClear(16640);
+        Tessellator tessellator = Tessellator.instance;
+        int i1 = mc.renderEngine.getTexture("/gui/background.png");
+        GL11.glBindTexture(3553 /*GL_TEXTURE_2D*/, i1);
+        float f = 32F;
+        tessellator.startDrawingQuads();
+        tessellator.setColorOpaque_I(0x404040);
+        tessellator.addVertexWithUV(0.0D, k, 0.0D, 0.0D, (float) k / f);
+        tessellator.addVertexWithUV(j, k, 0.0D, (float) j / f, (float) k / f);
+        tessellator.addVertexWithUV(j, 0.0D, 0.0D, (float) j / f, 0.0D);
+        tessellator.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
+        tessellator.draw();
+        if (i >= 0) {
+            byte byte0 = 100;
+            byte byte1 = 2;
+            int j1 = j / 2 - byte0 / 2;
+            int k1 = k / 2 + 16;
+            GL11.glDisable(3553 /*GL_TEXTURE_2D*/);
+            tessellator.startDrawingQuads();
+            tessellator.setColorOpaque_I(0x808080);
+            tessellator.addVertex(j1, k1, 0.0D);
+            tessellator.addVertex(j1, k1 + byte1, 0.0D);
+            tessellator.addVertex(j1 + byte0, k1 + byte1, 0.0D);
+            tessellator.addVertex(j1 + byte0, k1, 0.0D);
+            tessellator.setColorOpaque_I(0x80ff80);
+            tessellator.addVertex(j1, k1, 0.0D);
+            tessellator.addVertex(j1, k1 + byte1, 0.0D);
+            tessellator.addVertex(j1 + i, k1 + byte1, 0.0D);
+            tessellator.addVertex(j1 + i, k1, 0.0D);
+            tessellator.draw();
+            GL11.glEnable(3553 /*GL_TEXTURE_2D*/);
+        }
+        mc.fontRenderer.drawStringWithShadow(field_1007_c, (j - mc.fontRenderer.getStringWidth(field_1007_c)) / 2, k / 2 - 4 - 16, 0xffffff);
+        mc.fontRenderer.drawStringWithShadow(field_1004_a, (j - mc.fontRenderer.getStringWidth(field_1004_a)) / 2, (k / 2 - 4) + 8, 0xffffff);
+        Display.update();
+        try {
+            Thread.yield();
+        } catch (Exception exception) {
         }
     }
 }
