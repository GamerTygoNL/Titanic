--- net/minecraft/src/EntityItem.java
+++ net/minecraft/src/EntityItem.java
@@ -1,191 +1,181 @@
 package net.minecraft.src;
 
 public class EntityItem extends Entity {
+
     public ItemStack item;
-    private int field_803_e;
-    public int age = 0;
+    public int age;
     public int delayBeforeCanPickup;
-    private int health = 5;
-    public float field_804_d = (float)(Math.random() * Math.PI * 2.0D);
+    public float field_804_d;
+    private int field_803_e;
+    private int health;
 
-    public EntityItem(World var1, double var2, double var4, double var6, ItemStack var8) {
-        super(var1);
-        this.setSize(0.25F, 0.25F);
-        this.yOffset = this.height / 2.0F;
-        this.setPosition(var2, var4, var6);
-        this.item = var8;
-        this.rotationYaw = (float)(Math.random() * 360.0D);
-        this.motionX = (double)((float)(Math.random() * (double)0.2F - (double)0.1F));
-        this.motionY = (double)0.2F;
-        this.motionZ = (double)((float)(Math.random() * (double)0.2F - (double)0.1F));
-        this.entityWalks = false;
+    public EntityItem(World world, double d, double d1, double d2,
+                      ItemStack itemstack) {
+        super(world);
+        age = 0;
+        health = 5;
+        field_804_d = (float) (Math.random() * 3.1415926535897931D * 2D);
+        setSize(0.25F, 0.25F);
+        yOffset = height / 2.0F;
+        setPosition(d, d1, d2);
+        item = itemstack;
+        rotationYaw = (float) (Math.random() * 360D);
+        motionX = (float) (Math.random() * 0.20000000298023224D - 0.10000000149011612D);
+        motionY = 0.20000000298023224D;
+        motionZ = (float) (Math.random() * 0.20000000298023224D - 0.10000000149011612D);
+        entityWalks = false;
     }
 
-    public EntityItem(World var1) {
-        super(var1);
-        this.setSize(0.25F, 0.25F);
-        this.yOffset = this.height / 2.0F;
+    public EntityItem(World world) {
+        super(world);
+        age = 0;
+        health = 5;
+        field_804_d = (float) (Math.random() * 3.1415926535897931D * 2D);
+        setSize(0.25F, 0.25F);
+        yOffset = height / 2.0F;
     }
 
     public void onUpdate() {
         super.onUpdate();
-        if(this.delayBeforeCanPickup > 0) {
-            --this.delayBeforeCanPickup;
-        }
-
-        this.prevPosX = this.posX;
-        this.prevPosY = this.posY;
-        this.prevPosZ = this.posZ;
-        this.motionY -= (double)0.04F;
-        if(this.worldObj.getBlockMaterial(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ)) == Material.lava) {
-            this.motionY = (double)0.2F;
-            this.motionX = (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F);
-            this.motionZ = (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F);
-            this.worldObj.playSoundAtEntity(this, "random.fizz", 0.4F, 2.0F + this.rand.nextFloat() * 0.4F);
-        }
-
-        this.func_466_g(this.posX, this.posY, this.posZ);
-        this.handleWaterMovement();
-        this.moveEntity(this.motionX, this.motionY, this.motionZ);
-        float var1 = 0.98F;
-        if(this.onGround) {
-            var1 = 0.1F * 0.1F * 58.8F;
-            int var2 = this.worldObj.getBlockId(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.boundingBox.minY) - 1, MathHelper.floor_double(this.posZ));
-            if(var2 > 0) {
-                var1 = Block.blocksList[var2].slipperiness * 0.98F;
+        if (delayBeforeCanPickup > 0) {
+            delayBeforeCanPickup--;
+        }
+        prevPosX = posX;
+        prevPosY = posY;
+        prevPosZ = posZ;
+        motionY -= 0.039999999105930328D;
+        if (worldObj.getBlockMaterial(MathHelper.floor_double(posX), MathHelper.floor_double(posY), MathHelper.floor_double(posZ)) == Material.lava) {
+            motionY = 0.20000000298023224D;
+            motionX = (rand.nextFloat() - rand.nextFloat()) * 0.2F;
+            motionZ = (rand.nextFloat() - rand.nextFloat()) * 0.2F;
+            worldObj.playSoundAtEntity(this, "random.fizz", 0.4F, 2.0F + rand.nextFloat() * 0.4F);
+        }
+        func_466_g(posX, posY, posZ);
+        handleWaterMovement();
+        moveEntity(motionX, motionY, motionZ);
+        float f = 0.98F;
+        if (onGround) {
+            f = 0.5880001F;
+            int i = worldObj.getBlockId(MathHelper.floor_double(posX), MathHelper.floor_double(boundingBox.minY) - 1, MathHelper.floor_double(posZ));
+            if (i > 0) {
+                f = Block.blocksList[i].slipperiness * 0.98F;
             }
         }
-
-        this.motionX *= (double)var1;
-        this.motionY *= (double)0.98F;
-        this.motionZ *= (double)var1;
-        if(this.onGround) {
-            this.motionY *= -0.5D;
-        }
-
-        ++this.field_803_e;
-        ++this.age;
-        if(this.age >= 6000) {
-            this.setEntityDead();
-        }
-
+        motionX *= f;
+        motionY *= 0.98000001907348633D;
+        motionZ *= f;
+        if (onGround) {
+            motionY *= -0.5D;
+        }
+        field_803_e++;
+        age++;
+        if (age >= 6000) {
+            setEntityDead();
+        }
     }
 
     public boolean handleWaterMovement() {
-        return this.worldObj.func_682_a(this.boundingBox, Material.water, this);
-    }
-
-    private boolean func_466_g(double var1, double var3, double var5) {
-        int var7 = MathHelper.floor_double(var1);
-        int var8 = MathHelper.floor_double(var3);
-        int var9 = MathHelper.floor_double(var5);
-        double var10 = var1 - (double)var7;
-        double var12 = var3 - (double)var8;
-        double var14 = var5 - (double)var9;
-        if(Block.opaqueCubeLookup[this.worldObj.getBlockId(var7, var8, var9)]) {
-            boolean var16 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(var7 - 1, var8, var9)];
-            boolean var17 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(var7 + 1, var8, var9)];
-            boolean var18 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(var7, var8 - 1, var9)];
-            boolean var19 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(var7, var8 + 1, var9)];
-            boolean var20 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(var7, var8, var9 - 1)];
-            boolean var21 = !Block.opaqueCubeLookup[this.worldObj.getBlockId(var7, var8, var9 + 1)];
-            byte var22 = -1;
-            double var23 = 9999.0D;
-            if(var16 && var10 < var23) {
-                var23 = var10;
-                var22 = 0;
-            }
-
-            if(var17 && 1.0D - var10 < var23) {
-                var23 = 1.0D - var10;
-                var22 = 1;
-            }
-
-            if(var18 && var12 < var23) {
-                var23 = var12;
-                var22 = 2;
-            }
-
-            if(var19 && 1.0D - var12 < var23) {
-                var23 = 1.0D - var12;
-                var22 = 3;
-            }
-
-            if(var20 && var14 < var23) {
-                var23 = var14;
-                var22 = 4;
-            }
-
-            if(var21 && 1.0D - var14 < var23) {
-                var23 = 1.0D - var14;
-                var22 = 5;
-            }
-
-            float var25 = this.rand.nextFloat() * 0.2F + 0.1F;
-            if(var22 == 0) {
-                this.motionX = (double)(-var25);
-            }
-
-            if(var22 == 1) {
-                this.motionX = (double)var25;
-            }
-
-            if(var22 == 2) {
-                this.motionY = (double)(-var25);
-            }
-
-            if(var22 == 3) {
-                this.motionY = (double)var25;
-            }
-
-            if(var22 == 4) {
-                this.motionZ = (double)(-var25);
-            }
-
-            if(var22 == 5) {
-                this.motionZ = (double)var25;
-            }
-        }
-
-        return false;
-    }
-
-    protected void dealFireDamage(int var1) {
-        this.attackEntityFrom((Entity)null, var1);
-    }
-
-    public boolean attackEntityFrom(Entity var1, int var2) {
-        this.setBeenAttacked();
-        this.health -= var2;
-        if(this.health <= 0) {
-            this.setEntityDead();
-        }
-
-        return false;
-    }
-
-    public void writeEntityToNBT(NBTTagCompound var1) {
-        var1.setShort("Health", (short)((byte)this.health));
-        var1.setShort("Age", (short)this.age);
-        var1.setCompoundTag("Item", this.item.writeToNBT(new NBTTagCompound()));
-    }
-
-    public void readEntityFromNBT(NBTTagCompound var1) {
-        this.health = var1.getShort("Health") & 255;
-        this.age = var1.getShort("Age");
-        NBTTagCompound var2 = var1.getCompoundTag("Item");
-        this.item = new ItemStack(var2);
-    }
-
-    public void onCollideWithPlayer(EntityPlayer var1) {
-        if(!this.worldObj.multiplayerWorld) {
-            int var2 = this.item.stackSize;
-            if(this.delayBeforeCanPickup == 0 && var1.inventory.addItemStackToInventory(this.item)) {
-                this.worldObj.playSoundAtEntity(this, "random.pop", 0.2F, ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
-                var1.onItemPickup(this, var2);
-                this.setEntityDead();
-            }
-
+        return worldObj.func_682_a(boundingBox, Material.water, this);
+    }
+
+    private boolean func_466_g(double d, double d1, double d2) {
+        int i = MathHelper.floor_double(d);
+        int j = MathHelper.floor_double(d1);
+        int k = MathHelper.floor_double(d2);
+        double d3 = d - (double) i;
+        double d4 = d1 - (double) j;
+        double d5 = d2 - (double) k;
+        if (Block.opaqueCubeLookup[worldObj.getBlockId(i, j, k)]) {
+            boolean flag = !Block.opaqueCubeLookup[worldObj.getBlockId(i - 1, j, k)];
+            boolean flag1 = !Block.opaqueCubeLookup[worldObj.getBlockId(i + 1, j, k)];
+            boolean flag2 = !Block.opaqueCubeLookup[worldObj.getBlockId(i, j - 1, k)];
+            boolean flag3 = !Block.opaqueCubeLookup[worldObj.getBlockId(i, j + 1, k)];
+            boolean flag4 = !Block.opaqueCubeLookup[worldObj.getBlockId(i, j, k - 1)];
+            boolean flag5 = !Block.opaqueCubeLookup[worldObj.getBlockId(i, j, k + 1)];
+            byte byte0 = -1;
+            double d6 = 9999D;
+            if (flag && d3 < d6) {
+                d6 = d3;
+                byte0 = 0;
+            }
+            if (flag1 && 1.0D - d3 < d6) {
+                d6 = 1.0D - d3;
+                byte0 = 1;
+            }
+            if (flag2 && d4 < d6) {
+                d6 = d4;
+                byte0 = 2;
+            }
+            if (flag3 && 1.0D - d4 < d6) {
+                d6 = 1.0D - d4;
+                byte0 = 3;
+            }
+            if (flag4 && d5 < d6) {
+                d6 = d5;
+                byte0 = 4;
+            }
+            if (flag5 && 1.0D - d5 < d6) {
+                double d7 = 1.0D - d5;
+                byte0 = 5;
+            }
+            float f = rand.nextFloat() * 0.2F + 0.1F;
+            if (byte0 == 0) {
+                motionX = -f;
+            }
+            if (byte0 == 1) {
+                motionX = f;
+            }
+            if (byte0 == 2) {
+                motionY = -f;
+            }
+            if (byte0 == 3) {
+                motionY = f;
+            }
+            if (byte0 == 4) {
+                motionZ = -f;
+            }
+            if (byte0 == 5) {
+                motionZ = f;
+            }
+        }
+        return false;
+    }
+
+    protected void dealFireDamage(int i) {
+        attackEntityFrom(null, i);
+    }
+
+    public boolean attackEntityFrom(Entity entity, int i) {
+        setBeenAttacked();
+        health -= i;
+        if (health <= 0) {
+            setEntityDead();
+        }
+        return false;
+    }
+
+    public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+        nbttagcompound.setShort("Health", (byte) health);
+        nbttagcompound.setShort("Age", (short) age);
+        nbttagcompound.setCompoundTag("Item", item.writeToNBT(new NBTTagCompound()));
+    }
+
+    public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+        health = nbttagcompound.getShort("Health") & 0xff;
+        age = nbttagcompound.getShort("Age");
+        NBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag("Item");
+        item = new ItemStack(nbttagcompound1);
+    }
+
+    public void onCollideWithPlayer(EntityPlayer entityplayer) {
+        if (worldObj.multiplayerWorld) {
+            return;
+        }
+        int i = item.stackSize;
+        if (delayBeforeCanPickup == 0 && entityplayer.inventory.addItemStackToInventory(item)) {
+            worldObj.playSoundAtEntity(this, "random.pop", 0.2F, ((rand.nextFloat() - rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
+            entityplayer.onItemPickup(this, i);
+            setEntityDead();
         }
     }
 }
