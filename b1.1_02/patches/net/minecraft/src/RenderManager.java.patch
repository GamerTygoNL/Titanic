--- net/minecraft/src/RenderManager.java
+++ net/minecraft/src/RenderManager.java
@@ -1,17 +1,20 @@
 package net.minecraft.src;
 
+import cc.noxiuam.titanic.Ref;
+import cc.noxiuam.titanic.event.impl.world.entity.PreEntityRenderEvent;
+import org.lwjgl.opengl.GL11;
+
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
-import org.lwjgl.opengl.GL11;
 
 public class RenderManager {
-    private Map entityRenderMap = new HashMap();
+
     public static RenderManager instance = new RenderManager();
-    private FontRenderer field_1218_p;
     public static double renderPosX;
     public static double renderPosY;
     public static double renderPosZ;
+    private final Map entityRenderMap;
     public RenderEngine renderEngine;
     public ItemRenderer field_4236_f;
     public World worldObj;
@@ -22,100 +25,105 @@
     public double field_1222_l;
     public double field_1221_m;
     public double field_1220_n;
-
+    private FontRenderer field_1218_p;
     private RenderManager() {
-        this.entityRenderMap.put(EntitySpider.class, new RenderSpider());
-        this.entityRenderMap.put(EntityPig.class, new RenderPig(new ModelPig(), new ModelPig(0.5F), 0.7F));
-        this.entityRenderMap.put(EntitySheep.class, new RenderSheep(new ModelSheep2(), new ModelSheep1(), 0.7F));
-        this.entityRenderMap.put(EntityCow.class, new RenderCow(new ModelCow(), 0.7F));
-        this.entityRenderMap.put(EntityChicken.class, new RenderChicken(new ModelChicken(), 0.3F));
-        this.entityRenderMap.put(EntityCreeper.class, new RenderCreeper());
-        this.entityRenderMap.put(EntitySkeleton.class, new RenderBiped(new ModelSkeleton(), 0.5F));
-        this.entityRenderMap.put(EntityZombie.class, new RenderBiped(new ModelZombie(), 0.5F));
-        this.entityRenderMap.put(EntitySlime.class, new RenderSlime(new ModelSlime(16), new ModelSlime(0), 0.25F));
-        this.entityRenderMap.put(EntityPlayer.class, new RenderPlayer());
-        this.entityRenderMap.put(EntityZombieSimple.class, new RenderZombieSimple(new ModelZombie(), 0.5F, 6.0F));
-        this.entityRenderMap.put(EntityGhast.class, new RenderGhast());
-        this.entityRenderMap.put(EntityLiving.class, new RenderLiving(new ModelBiped(), 0.5F));
-        this.entityRenderMap.put(Entity.class, new RenderEntity());
-        this.entityRenderMap.put(EntityPainting.class, new RenderPainting());
-        this.entityRenderMap.put(EntityArrow.class, new RenderArrow());
-        this.entityRenderMap.put(EntitySnowball.class, new RenderSnowball(Item.snowball.getIconIndex((ItemStack)null)));
-        this.entityRenderMap.put(EntityEgg.class, new RenderSnowball(Item.egg.getIconIndex((ItemStack)null)));
-        this.entityRenderMap.put(EntityFireball.class, new RenderFireball());
-        this.entityRenderMap.put(EntityItem.class, new RenderItem());
-        this.entityRenderMap.put(EntityTNTPrimed.class, new RenderTNTPrimed());
-        this.entityRenderMap.put(EntityFallingSand.class, new RenderFallingSand());
-        this.entityRenderMap.put(EntityMinecart.class, new RenderMinecart());
-        this.entityRenderMap.put(EntityBoat.class, new RenderBoat());
-        this.entityRenderMap.put(EntityFish.class, new RenderFish());
-        Iterator var1 = this.entityRenderMap.values().iterator();
-
-        while(var1.hasNext()) {
-            Render var2 = (Render)var1.next();
-            var2.setRenderManager(this);
-        }
-
-    }
-
-    public Render getEntityClassRenderObject(Class var1) {
-        Render var2 = (Render)this.entityRenderMap.get(var1);
-        if(var2 == null && var1 != Entity.class) {
-            var2 = this.getEntityClassRenderObject(var1.getSuperclass());
-            this.entityRenderMap.put(var1, var2);
-        }
-
-        return var2;
-    }
-
-    public Render getEntityRenderObject(Entity var1) {
-        return this.getEntityClassRenderObject(var1.getClass());
-    }
-
-    public void func_857_a(World var1, RenderEngine var2, FontRenderer var3, EntityPlayer var4, GameSettings var5, float var6) {
-        this.worldObj = var1;
-        this.renderEngine = var2;
-        this.options = var5;
-        this.field_1226_h = var4;
-        this.field_1218_p = var3;
-        this.field_1225_i = var4.prevRotationYaw + (var4.rotationYaw - var4.prevRotationYaw) * var6;
-        this.field_1224_j = var4.prevRotationPitch + (var4.rotationPitch - var4.prevRotationPitch) * var6;
-        this.field_1222_l = var4.lastTickPosX + (var4.posX - var4.lastTickPosX) * (double)var6;
-        this.field_1221_m = var4.lastTickPosY + (var4.posY - var4.lastTickPosY) * (double)var6;
-        this.field_1220_n = var4.lastTickPosZ + (var4.posZ - var4.lastTickPosZ) * (double)var6;
-    }
-
-    public void renderEntity(Entity var1, float var2) {
-        double var3 = var1.lastTickPosX + (var1.posX - var1.lastTickPosX) * (double)var2;
-        double var5 = var1.lastTickPosY + (var1.posY - var1.lastTickPosY) * (double)var2;
-        double var7 = var1.lastTickPosZ + (var1.posZ - var1.lastTickPosZ) * (double)var2;
-        float var9 = var1.prevRotationYaw + (var1.rotationYaw - var1.prevRotationYaw) * var2;
-        float var10 = var1.getEntityBrightness(var2);
-        GL11.glColor3f(var10, var10, var10);
-        this.renderEntityWithPosYaw(var1, var3 - renderPosX, var5 - renderPosY, var7 - renderPosZ, var9, var2);
-    }
-
-    public void renderEntityWithPosYaw(Entity var1, double var2, double var4, double var6, float var8, float var9) {
-        Render var10 = this.getEntityRenderObject(var1);
-        if(var10 != null) {
-            var10.doRender(var1, var2, var4, var6, var8, var9);
-            var10.doRenderShadowAndFire(var1, var2, var4, var6, var8, var9);
-        }
-
-    }
-
-    public void func_852_a(World var1) {
-        this.worldObj = var1;
-    }
-
-    public double func_851_a(double var1, double var3, double var5) {
-        double var7 = var1 - this.field_1222_l;
-        double var9 = var3 - this.field_1221_m;
-        double var11 = var5 - this.field_1220_n;
-        return var7 * var7 + var9 * var9 + var11 * var11;
+        entityRenderMap = new HashMap();
+        entityRenderMap.put(EntitySpider.class, new RenderSpider());
+        entityRenderMap.put(EntityPig.class, new RenderPig(new ModelPig(), new ModelPig(0.5F), 0.7F));
+        entityRenderMap.put(EntitySheep.class, new RenderSheep(new ModelSheep2(), new ModelSheep1(), 0.7F));
+        entityRenderMap.put(EntityCow.class, new RenderCow(new ModelCow(), 0.7F));
+        entityRenderMap.put(EntityChicken.class, new RenderChicken(new ModelChicken(), 0.3F));
+        entityRenderMap.put(EntityCreeper.class, new RenderCreeper());
+        entityRenderMap.put(EntitySkeleton.class, new RenderBiped(new ModelSkeleton(), 0.5F));
+        entityRenderMap.put(EntityZombie.class, new RenderBiped(new ModelZombie(), 0.5F));
+        entityRenderMap.put(EntitySlime.class, new RenderSlime(new ModelSlime(16), new ModelSlime(0), 0.25F));
+        entityRenderMap.put(EntityPlayer.class, new RenderPlayer());
+        entityRenderMap.put(EntityZombieSimple.class, new RenderZombieSimple(new ModelZombie(), 0.5F, 6F));
+        entityRenderMap.put(EntityGhast.class, new RenderGhast());
+        entityRenderMap.put(EntityLiving.class, new RenderLiving(new ModelBiped(), 0.5F));
+        entityRenderMap.put(Entity.class, new RenderEntity());
+        entityRenderMap.put(EntityPainting.class, new RenderPainting());
+        entityRenderMap.put(EntityArrow.class, new RenderArrow());
+        entityRenderMap.put(EntitySnowball.class, new RenderSnowball(Item.snowball.getIconIndex(null)));
+        entityRenderMap.put(EntityEgg.class, new RenderSnowball(Item.egg.getIconIndex(null)));
+        entityRenderMap.put(EntityFireball.class, new RenderFireball());
+        entityRenderMap.put(EntityItem.class, new RenderItem());
+        entityRenderMap.put(EntityTNTPrimed.class, new RenderTNTPrimed());
+        entityRenderMap.put(EntityFallingSand.class, new RenderFallingSand());
+        entityRenderMap.put(EntityMinecart.class, new RenderMinecart());
+        entityRenderMap.put(EntityBoat.class, new RenderBoat());
+        entityRenderMap.put(EntityFish.class, new RenderFish());
+        Render render;
+        for (Iterator iterator = entityRenderMap.values().iterator(); iterator.hasNext(); render.setRenderManager(this)) {
+            render = (Render) iterator.next();
+        }
+
+    }
+
+    public Render getEntityClassRenderObject(Class class1) {
+        Render render = (Render) entityRenderMap.get(class1);
+        if (render == null && class1 != (Entity.class)) {
+            render = getEntityClassRenderObject(class1.getSuperclass());
+            entityRenderMap.put(class1, render);
+        }
+        return render;
+    }
+
+    public Render getEntityRenderObject(Entity entity) {
+        return getEntityClassRenderObject(entity.getClass());
+    }
+
+    public void func_857_a(World world, RenderEngine renderengine, FontRenderer fontrenderer, EntityPlayer entityplayer, GameSettings gamesettings, float f) {
+        worldObj = world;
+        renderEngine = renderengine;
+        options = gamesettings;
+        field_1226_h = entityplayer;
+        field_1218_p = fontrenderer;
+        field_1225_i = entityplayer.prevRotationYaw + (entityplayer.rotationYaw - entityplayer.prevRotationYaw) * f;
+        field_1224_j = entityplayer.prevRotationPitch + (entityplayer.rotationPitch - entityplayer.prevRotationPitch) * f;
+        field_1222_l = entityplayer.lastTickPosX + (entityplayer.posX - entityplayer.lastTickPosX) * (double) f;
+        field_1221_m = entityplayer.lastTickPosY + (entityplayer.posY - entityplayer.lastTickPosY) * (double) f;
+        field_1220_n = entityplayer.lastTickPosZ + (entityplayer.posZ - entityplayer.lastTickPosZ) * (double) f;
+    }
+
+    public void renderEntity(Entity entity, float f) {
+        double d = entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * (double) f;
+        double d1 = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double) f;
+        double d2 = entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * (double) f;
+        float f1 = entity.prevRotationYaw + (entity.rotationYaw - entity.prevRotationYaw) * f;
+        float f2 = entity.getEntityBrightness(f);
+        GL11.glColor3f(f2, f2, f2);
+        renderEntityWithPosYaw(entity, d - renderPosX, d1 - renderPosY, d2 - renderPosZ, f1, f);
+    }
+
+    public void renderEntityWithPosYaw(Entity entity, double d, double d1, double d2, float f, float f1) {
+        Render render = getEntityRenderObject(entity);
+        if (render != null) {
+            PreEntityRenderEvent event = new PreEntityRenderEvent(entity);
+            Ref.getEventManager().handleEvent(event);
+
+            if (event.isCancelled()) {
+                return;
+            }
+
+            render.doRender(entity, d, d1, d2, f, f1);
+            render.doRenderShadowAndFire(entity, d, d1, d2, f, f1);
+        }
+    }
+
+    public void func_852_a(World world) {
+        worldObj = world;
+    }
+
+    public double func_851_a(double d, double d1, double d2) {
+        double d3 = d - field_1222_l;
+        double d4 = d1 - field_1221_m;
+        double d5 = d2 - field_1220_n;
+        return d3 * d3 + d4 * d4 + d5 * d5;
     }
 
     public FontRenderer getFontRenderer() {
-        return this.field_1218_p;
+        return field_1218_p;
     }
+
 }
