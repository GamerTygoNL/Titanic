--- net/minecraft/src/NBTTagCompound.java
+++ net/minecraft/src/NBTTagCompound.java
@@ -8,129 +8,166 @@
 import java.util.Map;
 
 public class NBTTagCompound extends NBTBase {
-    private Map tagMap = new HashMap();
-
-    void writeTagContents(DataOutput var1) throws IOException {
-        Iterator var2 = this.tagMap.values().iterator();
-
-        while(var2.hasNext()) {
-            NBTBase var3 = (NBTBase)var2.next();
-            NBTBase.writeTag(var3, var1);
+
+    private final Map tagMap;
+
+    public NBTTagCompound() {
+        tagMap = new HashMap();
+    }
+
+    void writeTagContents(DataOutput dataoutput) throws IOException {
+        NBTBase nbtbase;
+        for (Iterator iterator = tagMap.values().iterator(); iterator.hasNext(); NBTBase.writeTag(nbtbase, dataoutput)) {
+            nbtbase = (NBTBase) iterator.next();
         }
 
-        var1.writeByte(0);
+        dataoutput.writeByte(0);
     }
 
-    void readTagContents(DataInput var1) throws IOException {
-        this.tagMap.clear();
-
-        while(true) {
-            NBTBase var2 = NBTBase.readTag(var1);
-            if(var2.getType() == 0) {
-                return;
-            }
-
-            this.tagMap.put(var2.getKey(), var2);
+    void readTagContents(DataInput datainput) throws IOException {
+        tagMap.clear();
+        NBTBase nbtbase;
+        for (; (nbtbase = NBTBase.readTag(datainput)).getType() != 0; tagMap.put(nbtbase.getKey(), nbtbase)) {
         }
     }
 
     public byte getType() {
-        return (byte)10;
-    }
-
-    public void setTag(String var1, NBTBase var2) {
-        this.tagMap.put(var1, var2.setKey(var1));
-    }
-
-    public void setByte(String var1, byte var2) {
-        this.tagMap.put(var1, (new NBTTagByte(var2)).setKey(var1));
-    }
-
-    public void setShort(String var1, short var2) {
-        this.tagMap.put(var1, (new NBTTagShort(var2)).setKey(var1));
-    }
-
-    public void setInteger(String var1, int var2) {
-        this.tagMap.put(var1, (new NBTTagInt(var2)).setKey(var1));
-    }
-
-    public void setLong(String var1, long var2) {
-        this.tagMap.put(var1, (new NBTTagLong(var2)).setKey(var1));
-    }
-
-    public void setFloat(String var1, float var2) {
-        this.tagMap.put(var1, (new NBTTagFloat(var2)).setKey(var1));
-    }
-
-    public void setDouble(String var1, double var2) {
-        this.tagMap.put(var1, (new NBTTagDouble(var2)).setKey(var1));
-    }
-
-    public void setString(String var1, String var2) {
-        this.tagMap.put(var1, (new NBTTagString(var2)).setKey(var1));
-    }
-
-    public void setByteArray(String var1, byte[] var2) {
-        this.tagMap.put(var1, (new NBTTagByteArray(var2)).setKey(var1));
-    }
-
-    public void setCompoundTag(String var1, NBTTagCompound var2) {
-        this.tagMap.put(var1, var2.setKey(var1));
-    }
-
-    public void setBoolean(String var1, boolean var2) {
-        this.setByte(var1, (byte)(var2 ? 1 : 0));
-    }
-
-    public boolean hasKey(String var1) {
-        return this.tagMap.containsKey(var1);
-    }
-
-    public byte getByte(String var1) {
-        return !this.tagMap.containsKey(var1) ? 0 : ((NBTTagByte)this.tagMap.get(var1)).byteValue;
-    }
-
-    public short getShort(String var1) {
-        return !this.tagMap.containsKey(var1) ? 0 : ((NBTTagShort)this.tagMap.get(var1)).shortValue;
-    }
-
-    public int getInteger(String var1) {
-        return !this.tagMap.containsKey(var1) ? 0 : ((NBTTagInt)this.tagMap.get(var1)).intValue;
-    }
-
-    public long getLong(String var1) {
-        return !this.tagMap.containsKey(var1) ? 0L : ((NBTTagLong)this.tagMap.get(var1)).longValue;
-    }
-
-    public float getFloat(String var1) {
-        return !this.tagMap.containsKey(var1) ? 0.0F : ((NBTTagFloat)this.tagMap.get(var1)).floatValue;
-    }
-
-    public double getDouble(String var1) {
-        return !this.tagMap.containsKey(var1) ? 0.0D : ((NBTTagDouble)this.tagMap.get(var1)).doubleValue;
-    }
-
-    public String getString(String var1) {
-        return !this.tagMap.containsKey(var1) ? "" : ((NBTTagString)this.tagMap.get(var1)).stringValue;
-    }
-
-    public byte[] getByteArray(String var1) {
-        return !this.tagMap.containsKey(var1) ? new byte[0] : ((NBTTagByteArray)this.tagMap.get(var1)).byteArray;
-    }
-
-    public NBTTagCompound getCompoundTag(String var1) {
-        return !this.tagMap.containsKey(var1) ? new NBTTagCompound() : (NBTTagCompound)this.tagMap.get(var1);
-    }
-
-    public NBTTagList getTagList(String var1) {
-        return !this.tagMap.containsKey(var1) ? new NBTTagList() : (NBTTagList)this.tagMap.get(var1);
-    }
-
-    public boolean getBoolean(String var1) {
-        return this.getByte(var1) != 0;
+        return 10;
+    }
+
+    public void setTag(String s, NBTBase nbtbase) {
+        tagMap.put(s, nbtbase.setKey(s));
+    }
+
+    public void setByte(String s, byte byte0) {
+        tagMap.put(s, (new NBTTagByte(byte0)).setKey(s));
+    }
+
+    public void setShort(String s, short word0) {
+        tagMap.put(s, (new NBTTagShort(word0)).setKey(s));
+    }
+
+    public void setInteger(String s, int i) {
+        tagMap.put(s, (new NBTTagInt(i)).setKey(s));
+    }
+
+    public void setLong(String s, long l) {
+        tagMap.put(s, (new NBTTagLong(l)).setKey(s));
+    }
+
+    public void setFloat(String s, float f) {
+        tagMap.put(s, (new NBTTagFloat(f)).setKey(s));
+    }
+
+    public void setDouble(String s, double d) {
+        tagMap.put(s, (new NBTTagDouble(d)).setKey(s));
+    }
+
+    public void setString(String s, String s1) {
+        tagMap.put(s, (new NBTTagString(s1)).setKey(s));
+    }
+
+    public void setByteArray(String s, byte[] abyte0) {
+        tagMap.put(s, (new NBTTagByteArray(abyte0)).setKey(s));
+    }
+
+    public void setCompoundTag(String s, NBTTagCompound nbttagcompound) {
+        tagMap.put(s, nbttagcompound.setKey(s));
+    }
+
+    public void setBoolean(String s, boolean flag) {
+        setByte(s, ((byte) (flag ? 1 : 0)));
+    }
+
+    public boolean hasKey(String s) {
+        return tagMap.containsKey(s);
+    }
+
+    public byte getByte(String s) {
+        if (!tagMap.containsKey(s)) {
+            return 0;
+        } else {
+            return ((NBTTagByte) tagMap.get(s)).byteValue;
+        }
+    }
+
+    public short getShort(String s) {
+        if (!tagMap.containsKey(s)) {
+            return 0;
+        } else {
+            return ((NBTTagShort) tagMap.get(s)).shortValue;
+        }
+    }
+
+    public int getInteger(String s) {
+        if (!tagMap.containsKey(s)) {
+            return 0;
+        } else {
+            return ((NBTTagInt) tagMap.get(s)).intValue;
+        }
+    }
+
+    public long getLong(String s) {
+        if (!tagMap.containsKey(s)) {
+            return 0L;
+        } else {
+            return ((NBTTagLong) tagMap.get(s)).longValue;
+        }
+    }
+
+    public float getFloat(String s) {
+        if (!tagMap.containsKey(s)) {
+            return 0.0F;
+        } else {
+            return ((NBTTagFloat) tagMap.get(s)).floatValue;
+        }
+    }
+
+    public double getDouble(String s) {
+        if (!tagMap.containsKey(s)) {
+            return 0.0D;
+        } else {
+            return ((NBTTagDouble) tagMap.get(s)).doubleValue;
+        }
+    }
+
+    public String getString(String s) {
+        if (!tagMap.containsKey(s)) {
+            return "";
+        } else {
+            return ((NBTTagString) tagMap.get(s)).stringValue;
+        }
+    }
+
+    public byte[] getByteArray(String s) {
+        if (!tagMap.containsKey(s)) {
+            return new byte[0];
+        } else {
+            return ((NBTTagByteArray) tagMap.get(s)).byteArray;
+        }
+    }
+
+    public NBTTagCompound getCompoundTag(String s) {
+        if (!tagMap.containsKey(s)) {
+            return new NBTTagCompound();
+        } else {
+            return (NBTTagCompound) tagMap.get(s);
+        }
+    }
+
+    public NBTTagList getTagList(String s) {
+        if (!tagMap.containsKey(s)) {
+            return new NBTTagList();
+        } else {
+            return (NBTTagList) tagMap.get(s);
+        }
+    }
+
+    public boolean getBoolean(String s) {
+        return getByte(s) != 0;
     }
 
     public String toString() {
-        return "" + this.tagMap.size() + " entries";
+        return tagMap.size() + " entries";
     }
 }
