--- net/minecraft/src/Vec3D.java
+++ net/minecraft/src/Vec3D.java
@@ -4,154 +4,165 @@
 import java.util.List;
 
 public class Vec3D {
-    private static List vectorList = new ArrayList();
+
+    private static final List vectorList = new ArrayList();
     private static int nextVector = 0;
     public double xCoord;
     public double yCoord;
     public double zCoord;
 
-    public static Vec3D createVectorHelper(double var0, double var2, double var4) {
-        return new Vec3D(var0, var2, var4);
+    private Vec3D(double d, double d1, double d2) {
+        if (d == -0D) {
+            d = 0.0D;
+        }
+        if (d1 == -0D) {
+            d1 = 0.0D;
+        }
+        if (d2 == -0D) {
+            d2 = 0.0D;
+        }
+        xCoord = d;
+        yCoord = d1;
+        zCoord = d2;
+    }
+
+    public static Vec3D createVectorHelper(double d, double d1, double d2) {
+        return new Vec3D(d, d1, d2);
     }
 
     public static void initialize() {
         nextVector = 0;
     }
 
-    public static Vec3D createVector(double var0, double var2, double var4) {
-        if(nextVector >= vectorList.size()) {
+    public static Vec3D createVector(double d, double d1, double d2) {
+        if (nextVector >= vectorList.size()) {
             vectorList.add(createVectorHelper(0.0D, 0.0D, 0.0D));
         }
-
-        return ((Vec3D)vectorList.get(nextVector++)).setComponents(var0, var2, var4);
-    }
-
-    private Vec3D(double var1, double var3, double var5) {
-        if(var1 == -0.0D) {
-            var1 = 0.0D;
-        }
-
-        if(var3 == -0.0D) {
-            var3 = 0.0D;
-        }
-
-        if(var5 == -0.0D) {
-            var5 = 0.0D;
-        }
-
-        this.xCoord = var1;
-        this.yCoord = var3;
-        this.zCoord = var5;
-    }
-
-    private Vec3D setComponents(double var1, double var3, double var5) {
-        this.xCoord = var1;
-        this.yCoord = var3;
-        this.zCoord = var5;
+        return ((Vec3D) vectorList.get(nextVector++)).setComponents(d, d1, d2);
+    }
+
+    private Vec3D setComponents(double d, double d1, double d2) {
+        xCoord = d;
+        yCoord = d1;
+        zCoord = d2;
         return this;
     }
 
-    public Vec3D subtract(Vec3D var1) {
-        return createVector(var1.xCoord - this.xCoord, var1.yCoord - this.yCoord, var1.zCoord - this.zCoord);
+    public Vec3D subtract(Vec3D vec3d) {
+        return createVector(vec3d.xCoord - xCoord, vec3d.yCoord - yCoord, vec3d.zCoord - zCoord);
     }
 
     public Vec3D normalize() {
-        double var1 = (double)MathHelper.sqrt_double(this.xCoord * this.xCoord + this.yCoord * this.yCoord + this.zCoord * this.zCoord);
-        return var1 < 1.0E-4D ? createVector(0.0D, 0.0D, 0.0D) : createVector(this.xCoord / var1, this.yCoord / var1, this.zCoord / var1);
-    }
-
-    public Vec3D crossProduct(Vec3D var1) {
-        return createVector(this.yCoord * var1.zCoord - this.zCoord * var1.yCoord, this.zCoord * var1.xCoord - this.xCoord * var1.zCoord, this.xCoord * var1.yCoord - this.yCoord * var1.xCoord);
-    }
-
-    public Vec3D addVector(double var1, double var3, double var5) {
-        return createVector(this.xCoord + var1, this.yCoord + var3, this.zCoord + var5);
-    }
-
-    public double distanceTo(Vec3D var1) {
-        double var2 = var1.xCoord - this.xCoord;
-        double var4 = var1.yCoord - this.yCoord;
-        double var6 = var1.zCoord - this.zCoord;
-        return (double)MathHelper.sqrt_double(var2 * var2 + var4 * var4 + var6 * var6);
-    }
-
-    public double squareDistanceTo(Vec3D var1) {
-        double var2 = var1.xCoord - this.xCoord;
-        double var4 = var1.yCoord - this.yCoord;
-        double var6 = var1.zCoord - this.zCoord;
-        return var2 * var2 + var4 * var4 + var6 * var6;
-    }
-
-    public double squareDistanceTo(double var1, double var3, double var5) {
-        double var7 = var1 - this.xCoord;
-        double var9 = var3 - this.yCoord;
-        double var11 = var5 - this.zCoord;
-        return var7 * var7 + var9 * var9 + var11 * var11;
+        double d = MathHelper.sqrt_double(xCoord * xCoord + yCoord * yCoord + zCoord * zCoord);
+        if (d < 0.0001D) {
+            return createVector(0.0D, 0.0D, 0.0D);
+        } else {
+            return createVector(xCoord / d, yCoord / d, zCoord / d);
+        }
+    }
+
+    public Vec3D crossProduct(Vec3D vec3d) {
+        return createVector(yCoord * vec3d.zCoord - zCoord * vec3d.yCoord, zCoord * vec3d.xCoord - xCoord * vec3d.zCoord, xCoord * vec3d.yCoord - yCoord * vec3d.xCoord);
+    }
+
+    public Vec3D addVector(double d, double d1, double d2) {
+        return createVector(xCoord + d, yCoord + d1, zCoord + d2);
+    }
+
+    public double distanceTo(Vec3D vec3d) {
+        double d = vec3d.xCoord - xCoord;
+        double d1 = vec3d.yCoord - yCoord;
+        double d2 = vec3d.zCoord - zCoord;
+        return MathHelper.sqrt_double(d * d + d1 * d1 + d2 * d2);
+    }
+
+    public double squareDistanceTo(Vec3D vec3d) {
+        double d = vec3d.xCoord - xCoord;
+        double d1 = vec3d.yCoord - yCoord;
+        double d2 = vec3d.zCoord - zCoord;
+        return d * d + d1 * d1 + d2 * d2;
+    }
+
+    public double squareDistanceTo(double d, double d1, double d2) {
+        double d3 = d - xCoord;
+        double d4 = d1 - yCoord;
+        double d5 = d2 - zCoord;
+        return d3 * d3 + d4 * d4 + d5 * d5;
     }
 
     public double lengthVector() {
-        return (double)MathHelper.sqrt_double(this.xCoord * this.xCoord + this.yCoord * this.yCoord + this.zCoord * this.zCoord);
-    }
-
-    public Vec3D getIntermediateWithXValue(Vec3D var1, double var2) {
-        double var4 = var1.xCoord - this.xCoord;
-        double var6 = var1.yCoord - this.yCoord;
-        double var8 = var1.zCoord - this.zCoord;
-        if(var4 * var4 < (double)1.0E-7F) {
-            return null;
-        } else {
-            double var10 = (var2 - this.xCoord) / var4;
-            return var10 >= 0.0D && var10 <= 1.0D ? createVector(this.xCoord + var4 * var10, this.yCoord + var6 * var10, this.zCoord + var8 * var10) : null;
-        }
-    }
-
-    public Vec3D getIntermediateWithYValue(Vec3D var1, double var2) {
-        double var4 = var1.xCoord - this.xCoord;
-        double var6 = var1.yCoord - this.yCoord;
-        double var8 = var1.zCoord - this.zCoord;
-        if(var6 * var6 < (double)1.0E-7F) {
-            return null;
-        } else {
-            double var10 = (var2 - this.yCoord) / var6;
-            return var10 >= 0.0D && var10 <= 1.0D ? createVector(this.xCoord + var4 * var10, this.yCoord + var6 * var10, this.zCoord + var8 * var10) : null;
-        }
-    }
-
-    public Vec3D getIntermediateWithZValue(Vec3D var1, double var2) {
-        double var4 = var1.xCoord - this.xCoord;
-        double var6 = var1.yCoord - this.yCoord;
-        double var8 = var1.zCoord - this.zCoord;
-        if(var8 * var8 < (double)1.0E-7F) {
-            return null;
-        } else {
-            double var10 = (var2 - this.zCoord) / var8;
-            return var10 >= 0.0D && var10 <= 1.0D ? createVector(this.xCoord + var4 * var10, this.yCoord + var6 * var10, this.zCoord + var8 * var10) : null;
+        return MathHelper.sqrt_double(xCoord * xCoord + yCoord * yCoord + zCoord * zCoord);
+    }
+
+    public Vec3D getIntermediateWithXValue(Vec3D vec3d, double d) {
+        double d1 = vec3d.xCoord - xCoord;
+        double d2 = vec3d.yCoord - yCoord;
+        double d3 = vec3d.zCoord - zCoord;
+        if (d1 * d1 < 1.0000000116860974E-007D) {
+            return null;
+        }
+        double d4 = (d - xCoord) / d1;
+        if (d4 < 0.0D || d4 > 1.0D) {
+            return null;
+        } else {
+            return createVector(xCoord + d1 * d4, yCoord + d2 * d4, zCoord + d3 * d4);
+        }
+    }
+
+    public Vec3D getIntermediateWithYValue(Vec3D vec3d, double d) {
+        double d1 = vec3d.xCoord - xCoord;
+        double d2 = vec3d.yCoord - yCoord;
+        double d3 = vec3d.zCoord - zCoord;
+        if (d2 * d2 < 1.0000000116860974E-007D) {
+            return null;
+        }
+        double d4 = (d - yCoord) / d2;
+        if (d4 < 0.0D || d4 > 1.0D) {
+            return null;
+        } else {
+            return createVector(xCoord + d1 * d4, yCoord + d2 * d4, zCoord + d3 * d4);
+        }
+    }
+
+    public Vec3D getIntermediateWithZValue(Vec3D vec3d, double d) {
+        double d1 = vec3d.xCoord - xCoord;
+        double d2 = vec3d.yCoord - yCoord;
+        double d3 = vec3d.zCoord - zCoord;
+        if (d3 * d3 < 1.0000000116860974E-007D) {
+            return null;
+        }
+        double d4 = (d - zCoord) / d3;
+        if (d4 < 0.0D || d4 > 1.0D) {
+            return null;
+        } else {
+            return createVector(xCoord + d1 * d4, yCoord + d2 * d4, zCoord + d3 * d4);
         }
     }
 
     public String toString() {
-        return "(" + this.xCoord + ", " + this.yCoord + ", " + this.zCoord + ")";
-    }
-
-    public void rotateAroundX(float var1) {
-        float var2 = MathHelper.cos(var1);
-        float var3 = MathHelper.sin(var1);
-        double var4 = this.xCoord;
-        double var6 = this.yCoord * (double)var2 + this.zCoord * (double)var3;
-        double var8 = this.zCoord * (double)var2 - this.yCoord * (double)var3;
-        this.xCoord = var4;
-        this.yCoord = var6;
-        this.zCoord = var8;
-    }
-
-    public void rotateAroundY(float var1) {
-        float var2 = MathHelper.cos(var1);
-        float var3 = MathHelper.sin(var1);
-        double var4 = this.xCoord * (double)var2 + this.zCoord * (double)var3;
-        double var6 = this.yCoord;
-        double var8 = this.zCoord * (double)var2 - this.xCoord * (double)var3;
-        this.xCoord = var4;
-        this.yCoord = var6;
-        this.zCoord = var8;
-    }
+        return "(" + xCoord + ", " + yCoord + ", " + zCoord + ")";
+    }
+
+    public void rotateAroundX(float f) {
+        float f1 = MathHelper.cos(f);
+        float f2 = MathHelper.sin(f);
+        double d = xCoord;
+        double d1 = yCoord * (double) f1 + zCoord * (double) f2;
+        double d2 = zCoord * (double) f1 - yCoord * (double) f2;
+        xCoord = d;
+        yCoord = d1;
+        zCoord = d2;
+    }
+
+    public void rotateAroundY(float f) {
+        float f1 = MathHelper.cos(f);
+        float f2 = MathHelper.sin(f);
+        double d = xCoord * (double) f1 + zCoord * (double) f2;
+        double d1 = yCoord;
+        double d2 = zCoord * (double) f1 - xCoord * (double) f2;
+        xCoord = d;
+        yCoord = d1;
+        zCoord = d2;
+    }
+
 }
