--- net/minecraft/src/MathHelper.java
+++ net/minecraft/src/MathHelper.java
@@ -1,58 +1,65 @@
 package net.minecraft.src;
 
 public class MathHelper {
-    private static float[] SIN_TABLE = new float[65536];
-
-    public static final float sin(float var0) {
-        return SIN_TABLE[(int)(var0 * 10430.378F) & '\uffff'];
-    }
-
-    public static final float cos(float var0) {
-        return SIN_TABLE[(int)(var0 * 10430.378F + 16384.0F) & '\uffff'];
-    }
-
-    public static final float sqrt_float(float var0) {
-        return (float)Math.sqrt((double)var0);
-    }
-
-    public static final float sqrt_double(double var0) {
-        return (float)Math.sqrt(var0);
-    }
-
-    public static int floor_float(float var0) {
-        int var1 = (int)var0;
-        return var0 < (float)var1 ? var1 - 1 : var1;
-    }
-
-    public static int floor_double(double var0) {
-        int var2 = (int)var0;
-        return var0 < (double)var2 ? var2 - 1 : var2;
-    }
-
-    public static float abs(float var0) {
-        return var0 >= 0.0F ? var0 : -var0;
-    }
-
-    public static double abs_max(double var0, double var2) {
-        if(var0 < 0.0D) {
-            var0 = -var0;
-        }
-
-        if(var2 < 0.0D) {
-            var2 = -var2;
-        }
-
-        return var0 > var2 ? var0 : var2;
-    }
-
-    public static int bucketInt(int var0, int var1) {
-        return var0 < 0 ? -((-var0 - 1) / var1) - 1 : var0 / var1;
-    }
+
+    private static final float[] SIN_TABLE;
 
     static {
-        for(int var0 = 0; var0 < 65536; ++var0) {
-            SIN_TABLE[var0] = (float)Math.sin((double)var0 * Math.PI * 2.0D / 65536.0D);
-        }
-
+        SIN_TABLE = new float[0x10000];
+        for (int i = 0; i < 0x10000; i++) {
+            SIN_TABLE[i] = (float) Math.sin(((double) i * 3.1415926535897931D * 2D) / 65536D);
+        }
+
+    }
+
+    public MathHelper() {
+    }
+
+    public static final float sin(float f) {
+        return SIN_TABLE[(int) (f * 10430.38F) & 0xffff];
+    }
+
+    public static final float cos(float f) {
+        return SIN_TABLE[(int) (f * 10430.38F + 16384F) & 0xffff];
+    }
+
+    public static final float sqrt_float(float f) {
+        return (float) Math.sqrt(f);
+    }
+
+    public static final float sqrt_double(double d) {
+        return (float) Math.sqrt(d);
+    }
+
+    public static int floor_float(float f) {
+        int i = (int) f;
+        return f >= (float) i ? i : i - 1;
+    }
+
+    public static int floor_double(double d) {
+        int i = (int) d;
+        return d >= (double) i ? i : i - 1;
+    }
+
+    public static float abs(float f) {
+        return f < 0.0F ? -f : f;
+    }
+
+    public static double abs_max(double d, double d1) {
+        if (d < 0.0D) {
+            d = -d;
+        }
+        if (d1 < 0.0D) {
+            d1 = -d1;
+        }
+        return d <= d1 ? d1 : d;
+    }
+
+    public static int bucketInt(int i, int j) {
+        if (i < 0) {
+            return -((-i - 1) / j) - 1;
+        } else {
+            return i / j;
+        }
     }
 }
