--- net/minecraft/src/TileEntity.java
+++ net/minecraft/src/TileEntity.java
@@ -4,90 +4,99 @@
 import java.util.Map;
 
 public class TileEntity {
-    private static Map nameToClassMap = new HashMap();
-    private static Map classToNameMap = new HashMap();
+
+    private static final Map nameToClassMap = new HashMap();
+    private static final Map classToNameMap = new HashMap();
+
+    static {
+        addMapping(TileEntityFurnace.class, "Furnace");
+        addMapping(TileEntityChest.class, "Chest");
+        addMapping(TileEntitySign.class, "Sign");
+        addMapping(TileEntityMobSpawner.class, "MobSpawner");
+    }
+
     public World worldObj;
     public int xCoord;
     public int yCoord;
     public int zCoord;
 
-    private static void addMapping(Class var0, String var1) {
-        if(classToNameMap.containsKey(var1)) {
-            throw new IllegalArgumentException("Duplicate id: " + var1);
-        } else {
-            nameToClassMap.put(var1, var0);
-            classToNameMap.put(var0, var1);
-        }
-    }
-
-    public void readFromNBT(NBTTagCompound var1) {
-        this.xCoord = var1.getInteger("x");
-        this.yCoord = var1.getInteger("y");
-        this.zCoord = var1.getInteger("z");
-    }
-
-    public void writeToNBT(NBTTagCompound var1) {
-        String var2 = (String)classToNameMap.get(this.getClass());
-        if(var2 == null) {
-            throw new RuntimeException(this.getClass() + " is missing a mapping! This is a bug!");
-        } else {
-            var1.setString("id", var2);
-            var1.setInteger("x", this.xCoord);
-            var1.setInteger("y", this.yCoord);
-            var1.setInteger("z", this.zCoord);
-        }
-    }
-
-    public void updateEntity() {
-    }
-
-    public static TileEntity createAndLoadEntity(NBTTagCompound var0) {
-        TileEntity var1 = null;
-
+    public TileEntity() {
+    }
+
+    private static void addMapping(Class class1, String s) {
+        if (classToNameMap.containsKey(s)) {
+            throw new IllegalArgumentException("Duplicate id: " + s);
+        } else {
+            nameToClassMap.put(s, class1);
+            classToNameMap.put(class1, s);
+        }
+    }
+
+    public static TileEntity createAndLoadEntity(NBTTagCompound nbttagcompound) {
+        TileEntity tileentity = null;
         try {
-            Class var2 = (Class)nameToClassMap.get(var0.getString("id"));
-            if(var2 != null) {
-                var1 = (TileEntity)var2.newInstance();
+            Class class1 = (Class) nameToClassMap.get(nbttagcompound.getString("id"));
+            if (class1 != null) {
+                tileentity = (TileEntity) class1.newInstance();
             }
-        } catch (Exception var3) {
-            var3.printStackTrace();
-        }
-
-        if(var1 != null) {
-            var1.readFromNBT(var0);
-        } else {
-            System.out.println("Skipping TileEntity with id " + var0.getString("id"));
-        }
-
-        return var1;
+        } catch (Exception exception) {
+            exception.printStackTrace();
+        }
+        if (tileentity != null) {
+            tileentity.readFromNBT(nbttagcompound);
+        } else {
+            System.out.println("Skipping TileEntity with id " + nbttagcompound.getString("id"));
+        }
+        return tileentity;
+    }
+
+    static Class _mthclass$(String s) {
+        try {
+            return Class.forName(s);
+        } catch (ClassNotFoundException classnotfoundexception) {
+            throw new NoClassDefFoundError(classnotfoundexception.getMessage());
+        }
+    }
+
+    public void readFromNBT(NBTTagCompound nbttagcompound) {
+        xCoord = nbttagcompound.getInteger("x");
+        yCoord = nbttagcompound.getInteger("y");
+        zCoord = nbttagcompound.getInteger("z");
+    }
+
+    public void writeToNBT(NBTTagCompound nbttagcompound) {
+        String s = (String) classToNameMap.get(getClass());
+        if (s == null) {
+            throw new RuntimeException(getClass() + " is missing a mapping! This is a bug!");
+        } else {
+            nbttagcompound.setString("id", s);
+            nbttagcompound.setInteger("x", xCoord);
+            nbttagcompound.setInteger("y", yCoord);
+            nbttagcompound.setInteger("z", zCoord);
+        }
+    }
+
+    public void updateEntity() {
     }
 
     public int getBlockMetadata() {
-        return this.worldObj.getBlockMetadata(this.xCoord, this.yCoord, this.zCoord);
+        return worldObj.getBlockMetadata(xCoord, yCoord, zCoord);
     }
 
     public void onInventoryChanged() {
-        if(this.worldObj != null) {
-            this.worldObj.func_698_b(this.xCoord, this.yCoord, this.zCoord, this);
+        if (worldObj != null) {
+            worldObj.func_698_b(xCoord, yCoord, zCoord, this);
         }
-
     }
 
-    public double getDistanceFrom(double var1, double var3, double var5) {
-        double var7 = (double)this.xCoord + 0.5D - var1;
-        double var9 = (double)this.yCoord + 0.5D - var3;
-        double var11 = (double)this.zCoord + 0.5D - var5;
-        return var7 * var7 + var9 * var9 + var11 * var11;
+    public double getDistanceFrom(double d, double d1, double d2) {
+        double d3 = ((double) xCoord + 0.5D) - d;
+        double d4 = ((double) yCoord + 0.5D) - d1;
+        double d5 = ((double) zCoord + 0.5D) - d2;
+        return d3 * d3 + d4 * d4 + d5 * d5;
     }
 
     public Block getBlockType() {
-        return Block.blocksList[this.worldObj.getBlockId(this.xCoord, this.yCoord, this.zCoord)];
-    }
-
-    static {
-        addMapping(TileEntityFurnace.class, "Furnace");
-        addMapping(TileEntityChest.class, "Chest");
-        addMapping(TileEntitySign.class, "Sign");
-        addMapping(TileEntityMobSpawner.class, "MobSpawner");
+        return Block.blocksList[worldObj.getBlockId(xCoord, yCoord, zCoord)];
     }
 }
