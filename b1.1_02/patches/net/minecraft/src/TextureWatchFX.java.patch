--- net/minecraft/src/TextureWatchFX.java
+++ net/minecraft/src/TextureWatchFX.java
@@ -1,98 +1,90 @@
 package net.minecraft.src;
 
+import net.minecraft.client.Minecraft;
+
+import javax.imageio.ImageIO;
 import java.awt.image.BufferedImage;
 import java.io.IOException;
-import javax.imageio.ImageIO;
-import net.minecraft.client.Minecraft;
 
 public class TextureWatchFX extends TextureFX {
+
     private Minecraft field_4225_g;
-    private int[] field_4224_h = new int[256];
-    private int[] field_4223_i = new int[256];
+    private int field_4224_h[];
+    private int field_4223_i[];
     private double field_4222_j;
     private double field_4221_k;
-
-    public TextureWatchFX(Minecraft var1) {
-        super(Item.pocketSundial.getIconIndex((ItemStack)null));
-        this.field_4225_g = var1;
-        this.field_1128_f = 1;
-
+    public TextureWatchFX(Minecraft minecraft) {
+        super(Item.pocketSundial.getIconIndex(null));
+        field_4224_h = new int[256];
+        field_4223_i = new int[256];
+        field_4225_g = minecraft;
+        field_1128_f = 1;
         try {
-            BufferedImage var2 = ImageIO.read(Minecraft.class.getResource("/gui/items.png"));
-            int var3 = this.field_1126_b % 16 * 16;
-            int var4 = this.field_1126_b / 16 * 16;
-            var2.getRGB(var3, var4, 16, 16, this.field_4224_h, 0, 16);
-            var2 = ImageIO.read(Minecraft.class.getResource("/misc/dial.png"));
-            var2.getRGB(0, 0, 16, 16, this.field_4223_i, 0, 16);
-        } catch (IOException var5) {
-            var5.printStackTrace();
+            BufferedImage bufferedimage = ImageIO.read((net.minecraft.client.Minecraft.class).getResource("/gui/items.png"));
+            int i = (field_1126_b % 16) * 16;
+            int j = (field_1126_b / 16) * 16;
+            bufferedimage.getRGB(i, j, 16, 16, field_4224_h, 0, 16);
+            bufferedimage = ImageIO.read((net.minecraft.client.Minecraft.class).getResource("/misc/dial.png"));
+            bufferedimage.getRGB(0, 0, 16, 16, field_4223_i, 0, 16);
+        } catch (IOException ioexception) {
+            ioexception.printStackTrace();
         }
-
     }
 
     public void func_783_a() {
-        double var1 = 0.0D;
-        if(this.field_4225_g.theWorld != null && this.field_4225_g.thePlayer != null) {
-            float var3 = this.field_4225_g.theWorld.getCelestialAngle(1.0F);
-            var1 = (double)(-var3 * (float)Math.PI * 2.0F);
-            if(this.field_4225_g.theWorld.worldProvider.field_4220_c) {
-                var1 = Math.random() * (double)((float)Math.PI) * 2.0D;
-            }
-        }
-
-        double var22;
-        for(var22 = var1 - this.field_4222_j; var22 < -Math.PI; var22 += Math.PI * 2.0D) {
-        }
-
-        while(var22 >= Math.PI) {
-            var22 -= Math.PI * 2.0D;
-        }
-
-        if(var22 < -1.0D) {
-            var22 = -1.0D;
-        }
-
-        if(var22 > 1.0D) {
-            var22 = 1.0D;
-        }
-
-        this.field_4221_k += var22 * 0.1D;
-        this.field_4221_k *= 0.8D;
-        this.field_4222_j += this.field_4221_k;
-        double var5 = Math.sin(this.field_4222_j);
-        double var7 = Math.cos(this.field_4222_j);
-
-        for(int var9 = 0; var9 < 256; ++var9) {
-            int var10 = this.field_4224_h[var9] >> 24 & 255;
-            int var11 = this.field_4224_h[var9] >> 16 & 255;
-            int var12 = this.field_4224_h[var9] >> 8 & 255;
-            int var13 = this.field_4224_h[var9] >> 0 & 255;
-            if(var11 == var13 && var12 == 0 && var13 > 0) {
-                double var14 = -((double)(var9 % 16) / 15.0D - 0.5D);
-                double var16 = (double)(var9 / 16) / 15.0D - 0.5D;
-                int var18 = var11;
-                int var19 = (int)((var14 * var7 + var16 * var5 + 0.5D) * 16.0D);
-                int var20 = (int)((var16 * var7 - var14 * var5 + 0.5D) * 16.0D);
-                int var21 = (var19 & 15) + (var20 & 15) * 16;
-                var10 = this.field_4223_i[var21] >> 24 & 255;
-                var11 = (this.field_4223_i[var21] >> 16 & 255) * var11 / 255;
-                var12 = (this.field_4223_i[var21] >> 8 & 255) * var18 / 255;
-                var13 = (this.field_4223_i[var21] >> 0 & 255) * var18 / 255;
-            }
-
-            if(this.field_1131_c) {
-                int var23 = (var11 * 30 + var12 * 59 + var13 * 11) / 100;
-                int var15 = (var11 * 30 + var12 * 70) / 100;
-                int var24 = (var11 * 30 + var13 * 70) / 100;
-                var11 = var23;
-                var12 = var15;
-                var13 = var24;
-            }
-
-            this.field_1127_a[var9 * 4 + 0] = (byte)var11;
-            this.field_1127_a[var9 * 4 + 1] = (byte)var12;
-            this.field_1127_a[var9 * 4 + 2] = (byte)var13;
-            this.field_1127_a[var9 * 4 + 3] = (byte)var10;
+        double d = 0.0D;
+        if (field_4225_g.theWorld != null && field_4225_g.thePlayer != null) {
+            float f = field_4225_g.theWorld.getCelestialAngle(1.0F);
+            d = -f * 3.141593F * 2.0F;
+            if (field_4225_g.theWorld.worldProvider.field_4220_c) {
+                d = Math.random() * 3.1415927410125732D * 2D;
+            }
+        }
+        double d1;
+        for (d1 = d - field_4222_j; d1 < -3.1415926535897931D; d1 += 6.2831853071795862D) {
+        }
+        for (; d1 >= 3.1415926535897931D; d1 -= 6.2831853071795862D) {
+        }
+        if (d1 < -1D) {
+            d1 = -1D;
+        }
+        if (d1 > 1.0D) {
+            d1 = 1.0D;
+        }
+        field_4221_k += d1 * 0.10000000000000001D;
+        field_4221_k *= 0.80000000000000004D;
+        field_4222_j += field_4221_k;
+        double d2 = Math.sin(field_4222_j);
+        double d3 = Math.cos(field_4222_j);
+        for (int i = 0; i < 256; i++) {
+            int j = field_4224_h[i] >> 24 & 0xff;
+            int k = field_4224_h[i] >> 16 & 0xff;
+            int l = field_4224_h[i] >> 8 & 0xff;
+            int i1 = field_4224_h[i] >> 0 & 0xff;
+            if (k == i1 && l == 0 && i1 > 0) {
+                double d4 = -((double) (i % 16) / 15D - 0.5D);
+                double d5 = (double) (i / 16) / 15D - 0.5D;
+                int i2 = k;
+                int j2 = (int) ((d4 * d3 + d5 * d2 + 0.5D) * 16D);
+                int k2 = (int) (((d5 * d3 - d4 * d2) + 0.5D) * 16D);
+                int l2 = (j2 & 0xf) + (k2 & 0xf) * 16;
+                j = field_4223_i[l2] >> 24 & 0xff;
+                k = ((field_4223_i[l2] >> 16 & 0xff) * i2) / 255;
+                l = ((field_4223_i[l2] >> 8 & 0xff) * i2) / 255;
+                i1 = ((field_4223_i[l2] >> 0 & 0xff) * i2) / 255;
+            }
+            if (field_1131_c) {
+                int j1 = (k * 30 + l * 59 + i1 * 11) / 100;
+                int k1 = (k * 30 + l * 70) / 100;
+                int l1 = (k * 30 + i1 * 70) / 100;
+                k = j1;
+                l = k1;
+                i1 = l1;
+            }
+            field_1127_a[i * 4 + 0] = (byte) k;
+            field_1127_a[i * 4 + 1] = (byte) l;
+            field_1127_a[i * 4 + 2] = (byte) i1;
+            field_1127_a[i * 4 + 3] = (byte) j;
         }
 
     }
