--- net/minecraft/src/RenderLiving.java
+++ net/minecraft/src/RenderLiving.java
@@ -1,150 +1,148 @@
 package net.minecraft.src;
 
+import cc.noxiuam.titanic.Ref;
+import cc.noxiuam.titanic.event.impl.world.player.model.SpecialModelRenderEvent;
 import org.lwjgl.opengl.GL11;
-import org.lwjgl.opengl.GL12;
 
 public class RenderLiving extends Render {
-    protected ModelBase e;
+
+    protected ModelBase unusedRenderBlocks;
     protected ModelBase renderPassModel;
 
-    public RenderLiving(ModelBase var1, float var2) {
-        this.e = var1;
-        this.shadowSize = var2;
-    }
-
-    public void setRenderPassModel(ModelBase var1) {
-        this.renderPassModel = var1;
-    }
-
-    public void a(EntityLiving var1, double var2, double var4, double var6, float var8, float var9) {
+    public RenderLiving(ModelBase modelbase, float f) {
+        unusedRenderBlocks = modelbase;
+        shadowSize = f;
+    }
+
+    public void setRenderPassModel(ModelBase modelbase) {
+        renderPassModel = modelbase;
+    }
+
+    public void doRenderLiving(EntityLiving entityliving, double d, double d1, double d2,
+                               float f, float f1) {
         GL11.glPushMatrix();
-        GL11.glDisable(GL11.GL_CULL_FACE);
-        this.e.field_1244_k = this.func_167_c(var1, var9);
-        this.e.field_1243_l = var1.ridingEntity != null || var1.field_9300_bu;
-        if(this.renderPassModel != null) {
-            this.renderPassModel.field_1243_l = this.e.field_1243_l;
+        GL11.glDisable(2884 /*GL_CULL_FACE*/);
+        unusedRenderBlocks.field_1244_k = func_167_c(entityliving, f1);
+        unusedRenderBlocks.field_1243_l = entityliving.ridingEntity != null || entityliving.field_9300_bu;
+
+        SpecialModelRenderEvent event = new SpecialModelRenderEvent(this.unusedRenderBlocks, this.renderPassModel);
+        Ref.getEventManager().handleEvent(event);
+
+        if (renderPassModel != null) {
+            renderPassModel.field_1243_l = unusedRenderBlocks.field_1243_l;
         }
-
         try {
-            float var10 = var1.prevRenderYawOffset + (var1.renderYawOffset - var1.prevRenderYawOffset) * var9;
-            float var11 = var1.prevRotationYaw + (var1.rotationYaw - var1.prevRotationYaw) * var9;
-            float var12 = var1.prevRotationPitch + (var1.rotationPitch - var1.prevRotationPitch) * var9;
-            GL11.glTranslatef((float)var2, (float)var4, (float)var6);
-            float var13 = this.func_170_d(var1, var9);
-            GL11.glRotatef(180.0F - var10, 0.0F, 1.0F, 0.0F);
-            float var14;
-            if(var1.deathTime > 0) {
-                var14 = ((float)var1.deathTime + var9 - 1.0F) / 20.0F * 1.6F;
-                var14 = MathHelper.sqrt_float(var14);
-                if(var14 > 1.0F) {
-                    var14 = 1.0F;
-                }
-
-                GL11.glRotatef(var14 * this.func_172_a(var1), 0.0F, 0.0F, 1.0F);
-            }
-
-            var14 = 1.0F / 16.0F;
-            GL11.glEnable(GL12.GL_RESCALE_NORMAL);
-            GL11.glScalef(-1.0F, -1.0F, 1.0F);
-            this.preRenderCallback(var1, var9);
-            GL11.glTranslatef(0.0F, -24.0F * var14 - 0.0078125F, 0.0F);
-            float var15 = var1.field_705_Q + (var1.field_704_R - var1.field_705_Q) * var9;
-            float var16 = var1.field_703_S - var1.field_704_R * (1.0F - var9);
-            if(var15 > 1.0F) {
-                var15 = 1.0F;
-            }
-
-            this.func_140_a(var1.field_20047_bv, var1.getEntityTexture());
-            GL11.glEnable(GL11.GL_ALPHA_TEST);
-            this.e.render(var16, var15, var13, var11 - var10, var12, var14);
-
-            for(int var17 = 0; var17 < 4; ++var17) {
-                if(this.shouldRenderPass(var1, var17)) {
-                    this.renderPassModel.render(var16, var15, var13, var11 - var10, var12, var14);
-                    GL11.glDisable(GL11.GL_BLEND);
-                    GL11.glEnable(GL11.GL_ALPHA_TEST);
-                }
-            }
-
-            this.renderEquippedItems(var1, var9);
-            float var25 = var1.getEntityBrightness(var9);
-            int var18 = this.getColorMultiplier(var1, var25, var9);
-            if((var18 >> 24 & 255) > 0 || var1.hurtTime > 0 || var1.deathTime > 0) {
-                GL11.glDisable(GL11.GL_TEXTURE_2D);
-                GL11.glDisable(GL11.GL_ALPHA_TEST);
-                GL11.glEnable(GL11.GL_BLEND);
-                GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-                GL11.glDepthFunc(GL11.GL_EQUAL);
-                if(var1.hurtTime > 0 || var1.deathTime > 0) {
-                    GL11.glColor4f(var25, 0.0F, 0.0F, 0.4F);
-                    this.e.render(var16, var15, var13, var11 - var10, var12, var14);
-
-                    for(int var19 = 0; var19 < 4; ++var19) {
-                        if(this.shouldRenderPass(var1, var19)) {
-                            GL11.glColor4f(var25, 0.0F, 0.0F, 0.4F);
-                            this.renderPassModel.render(var16, var15, var13, var11 - var10, var12, var14);
-                        }
-                    }
-                }
-
-                if((var18 >> 24 & 255) > 0) {
-                    float var26 = (float)(var18 >> 16 & 255) / 255.0F;
-                    float var20 = (float)(var18 >> 8 & 255) / 255.0F;
-                    float var21 = (float)(var18 & 255) / 255.0F;
-                    float var22 = (float)(var18 >> 24 & 255) / 255.0F;
-                    GL11.glColor4f(var26, var20, var21, var22);
-                    this.e.render(var16, var15, var13, var11 - var10, var12, var14);
-
-                    for(int var23 = 0; var23 < 4; ++var23) {
-                        if(this.shouldRenderPass(var1, var23)) {
-                            GL11.glColor4f(var26, var20, var21, var22);
-                            this.renderPassModel.render(var16, var15, var13, var11 - var10, var12, var14);
-                        }
-                    }
-                }
-
-                GL11.glDepthFunc(GL11.GL_LEQUAL);
-                GL11.glDisable(GL11.GL_BLEND);
-                GL11.glEnable(GL11.GL_ALPHA_TEST);
-                GL11.glEnable(GL11.GL_TEXTURE_2D);
-            }
-
-            GL11.glDisable(GL12.GL_RESCALE_NORMAL);
-        } catch (Exception var24) {
-            var24.printStackTrace();
+            float f2 = entityliving.prevRenderYawOffset + (entityliving.renderYawOffset - entityliving.prevRenderYawOffset) * f1;
+            float f3 = entityliving.prevRotationYaw + (entityliving.rotationYaw - entityliving.prevRotationYaw) * f1;
+            float f4 = entityliving.prevRotationPitch + (entityliving.rotationPitch - entityliving.prevRotationPitch) * f1;
+            GL11.glTranslatef((float) d, (float) d1, (float) d2);
+            float f5 = func_170_d(entityliving, f1);
+            GL11.glRotatef(180F - f2, 0.0F, 1.0F, 0.0F);
+            if (entityliving.deathTime > 0) {
+                float f6 = ((((float) entityliving.deathTime + f1) - 1.0F) / 20F) * 1.6F;
+                f6 = MathHelper.sqrt_float(f6);
+                if (f6 > 1.0F) {
+                    f6 = 1.0F;
+                }
+                GL11.glRotatef(f6 * func_172_a(entityliving), 0.0F, 0.0F, 1.0F);
+            }
+            float f7 = 0.0625F;
+            GL11.glEnable(32826 /*GL_RESCALE_NORMAL_EXT*/);
+            GL11.glScalef(-1F, -1F, 1.0F);
+            preRenderCallback(entityliving, f1);
+            GL11.glTranslatef(0.0F, -24F * f7 - 0.0078125F, 0.0F);
+            float f8 = entityliving.field_705_Q + (entityliving.field_704_R - entityliving.field_705_Q) * f1;
+            float f9 = entityliving.field_703_S - entityliving.field_704_R * (1.0F - f1);
+            if (f8 > 1.0F) {
+                f8 = 1.0F;
+            }
+            func_140_a(entityliving.field_20047_bv, entityliving.getEntityTexture());
+            GL11.glEnable(3008 /*GL_ALPHA_TEST*/);
+            unusedRenderBlocks.render(f9, f8, f5, f3 - f2, f4, f7);
+            for (int i = 0; i < 4; i++) {
+                if (shouldRenderPass(entityliving, i)) {
+                    renderPassModel.render(f9, f8, f5, f3 - f2, f4, f7);
+                    GL11.glDisable(3042 /*GL_BLEND*/);
+                    GL11.glEnable(3008 /*GL_ALPHA_TEST*/);
+                }
+            }
+
+            renderEquippedItems(entityliving, f1);
+            float f10 = entityliving.getEntityBrightness(f1);
+            int j = getColorMultiplier(entityliving, f10, f1);
+            if ((j >> 24 & 0xff) > 0 || entityliving.hurtTime > 0 || entityliving.deathTime > 0) {
+                GL11.glDisable(3553 /*GL_TEXTURE_2D*/);
+                GL11.glDisable(3008 /*GL_ALPHA_TEST*/);
+                GL11.glEnable(3042 /*GL_BLEND*/);
+                GL11.glBlendFunc(770, 771);
+                GL11.glDepthFunc(514);
+                if (entityliving.hurtTime > 0 || entityliving.deathTime > 0) {
+                    GL11.glColor4f(f10, 0.0F, 0.0F, 0.4F);
+                    unusedRenderBlocks.render(f9, f8, f5, f3 - f2, f4, f7);
+                    for (int k = 0; k < 4; k++) {
+                        if (shouldRenderPass(entityliving, k)) {
+                            GL11.glColor4f(f10, 0.0F, 0.0F, 0.4F);
+                            renderPassModel.render(f9, f8, f5, f3 - f2, f4, f7);
+                        }
+                    }
+
+                }
+                if ((j >> 24 & 0xff) > 0) {
+                    float f11 = (float) (j >> 16 & 0xff) / 255F;
+                    float f12 = (float) (j >> 8 & 0xff) / 255F;
+                    float f13 = (float) (j & 0xff) / 255F;
+                    float f14 = (float) (j >> 24 & 0xff) / 255F;
+                    GL11.glColor4f(f11, f12, f13, f14);
+                    unusedRenderBlocks.render(f9, f8, f5, f3 - f2, f4, f7);
+                    for (int l = 0; l < 4; l++) {
+                        if (shouldRenderPass(entityliving, l)) {
+                            GL11.glColor4f(f11, f12, f13, f14);
+                            renderPassModel.render(f9, f8, f5, f3 - f2, f4, f7);
+                        }
+                    }
+
+                }
+                GL11.glDepthFunc(515);
+                GL11.glDisable(3042 /*GL_BLEND*/);
+                GL11.glEnable(3008 /*GL_ALPHA_TEST*/);
+                GL11.glEnable(3553 /*GL_TEXTURE_2D*/);
+            }
+            GL11.glDisable(32826 /*GL_RESCALE_NORMAL_EXT*/);
+        } catch (Exception exception) {
+            exception.printStackTrace();
         }
-
-        GL11.glEnable(GL11.GL_CULL_FACE);
+        GL11.glEnable(2884 /*GL_CULL_FACE*/);
         GL11.glPopMatrix();
     }
 
-    protected float func_167_c(EntityLiving var1, float var2) {
-        return var1.getSwingProgress(var2);
-    }
-
-    protected float func_170_d(EntityLiving var1, float var2) {
-        return (float)var1.ticksExisted + var2;
-    }
-
-    protected void renderEquippedItems(EntityLiving var1, float var2) {
-    }
-
-    protected boolean shouldRenderPass(EntityLiving var1, int var2) {
+    protected float func_167_c(EntityLiving entityliving, float f) {
+        return entityliving.getSwingProgress(f);
+    }
+
+    protected float func_170_d(EntityLiving entityliving, float f) {
+        return (float) entityliving.ticksExisted + f;
+    }
+
+    protected void renderEquippedItems(EntityLiving entityliving, float f) {
+    }
+
+    protected boolean shouldRenderPass(EntityLiving entityliving, int i) {
         return false;
     }
 
-    protected float func_172_a(EntityLiving var1) {
-        return 90.0F;
+    protected float func_172_a(EntityLiving entityliving) {
+        return 90F;
     }
 
-    protected int getColorMultiplier(EntityLiving var1, float var2, float var3) {
+    protected int getColorMultiplier(EntityLiving entityliving, float f, float f1) {
         return 0;
     }
 
-    protected void preRenderCallback(EntityLiving var1, float var2) {
+    protected void preRenderCallback(EntityLiving entityliving, float f) {
     }
 
-    public void doRender(Entity var1, double var2, double var4, double var6, float var8, float var9) {
-        this.a((EntityLiving)var1, var2, var4, var6, var8, var9);
+    public void doRender(Entity entity, double d, double d1, double d2,
+                         float f, float f1) {
+        doRenderLiving((EntityLiving) entity, d, d1, d2, f, f1);
     }
 }
