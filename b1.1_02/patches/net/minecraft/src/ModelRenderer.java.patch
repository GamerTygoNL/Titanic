--- net/minecraft/src/ModelRenderer.java
+++ net/minecraft/src/ModelRenderer.java
@@ -3,163 +3,169 @@
 import org.lwjgl.opengl.GL11;
 
 public class ModelRenderer {
-    private PositionTexureVertex[] corners;
-    private TexturedQuad[] faces;
-    private int textureOffsetX;
-    private int textureOffsetY;
+
     public float offsetX;
     public float offsetY;
     public float offsetZ;
     public float rotateAngleX;
     public float rotateAngleY;
     public float rotateAngleZ;
-    private boolean compiled = false;
-    private int displayList = 0;
-    public boolean mirror = false;
-    public boolean field_1403_h = true;
-    public boolean field_1402_i = false;
-
-    public ModelRenderer(int var1, int var2) {
-        this.textureOffsetX = var1;
-        this.textureOffsetY = var2;
-    }
-
-    public void func_921_a(float var1, float var2, float var3, int var4, int var5, int var6) {
-        this.addBox(var1, var2, var3, var4, var5, var6, 0.0F);
-    }
-
-    public void addBox(float var1, float var2, float var3, int var4, int var5, int var6, float var7) {
-        this.corners = new PositionTexureVertex[8];
-        this.faces = new TexturedQuad[6];
-        float var8 = var1 + (float)var4;
-        float var9 = var2 + (float)var5;
-        float var10 = var3 + (float)var6;
-        var1 -= var7;
-        var2 -= var7;
-        var3 -= var7;
-        var8 += var7;
-        var9 += var7;
-        var10 += var7;
-        if(this.mirror) {
-            float var11 = var8;
-            var8 = var1;
-            var1 = var11;
-        }
-
-        PositionTexureVertex var20 = new PositionTexureVertex(var1, var2, var3, 0.0F, 0.0F);
-        PositionTexureVertex var12 = new PositionTexureVertex(var8, var2, var3, 0.0F, 8.0F);
-        PositionTexureVertex var13 = new PositionTexureVertex(var8, var9, var3, 8.0F, 8.0F);
-        PositionTexureVertex var14 = new PositionTexureVertex(var1, var9, var3, 8.0F, 0.0F);
-        PositionTexureVertex var15 = new PositionTexureVertex(var1, var2, var10, 0.0F, 0.0F);
-        PositionTexureVertex var16 = new PositionTexureVertex(var8, var2, var10, 0.0F, 8.0F);
-        PositionTexureVertex var17 = new PositionTexureVertex(var8, var9, var10, 8.0F, 8.0F);
-        PositionTexureVertex var18 = new PositionTexureVertex(var1, var9, var10, 8.0F, 0.0F);
-        this.corners[0] = var20;
-        this.corners[1] = var12;
-        this.corners[2] = var13;
-        this.corners[3] = var14;
-        this.corners[4] = var15;
-        this.corners[5] = var16;
-        this.corners[6] = var17;
-        this.corners[7] = var18;
-        this.faces[0] = new TexturedQuad(new PositionTexureVertex[]{var16, var12, var13, var17}, this.textureOffsetX + var6 + var4, this.textureOffsetY + var6, this.textureOffsetX + var6 + var4 + var6, this.textureOffsetY + var6 + var5);
-        this.faces[1] = new TexturedQuad(new PositionTexureVertex[]{var20, var15, var18, var14}, this.textureOffsetX + 0, this.textureOffsetY + var6, this.textureOffsetX + var6, this.textureOffsetY + var6 + var5);
-        this.faces[2] = new TexturedQuad(new PositionTexureVertex[]{var16, var15, var20, var12}, this.textureOffsetX + var6, this.textureOffsetY + 0, this.textureOffsetX + var6 + var4, this.textureOffsetY + var6);
-        this.faces[3] = new TexturedQuad(new PositionTexureVertex[]{var13, var14, var18, var17}, this.textureOffsetX + var6 + var4, this.textureOffsetY + 0, this.textureOffsetX + var6 + var4 + var4, this.textureOffsetY + var6);
-        this.faces[4] = new TexturedQuad(new PositionTexureVertex[]{var12, var20, var14, var13}, this.textureOffsetX + var6, this.textureOffsetY + var6, this.textureOffsetX + var6 + var4, this.textureOffsetY + var6 + var5);
-        this.faces[5] = new TexturedQuad(new PositionTexureVertex[]{var15, var16, var17, var18}, this.textureOffsetX + var6 + var4 + var6, this.textureOffsetY + var6, this.textureOffsetX + var6 + var4 + var6 + var4, this.textureOffsetY + var6 + var5);
-        if(this.mirror) {
-            for(int var19 = 0; var19 < this.faces.length; ++var19) {
-                this.faces[var19].func_809_a();
-            }
-        }
-
-    }
-
-    public void setPosition(float var1, float var2, float var3) {
-        this.offsetX = var1;
-        this.offsetY = var2;
-        this.offsetZ = var3;
-    }
-
-    public void render(float var1) {
-        if(!this.field_1402_i) {
-            if(this.field_1403_h) {
-                if(!this.compiled) {
-                    this.compileDisplayList(var1);
-                }
-
-                if(this.rotateAngleX == 0.0F && this.rotateAngleY == 0.0F && this.rotateAngleZ == 0.0F) {
-                    if(this.offsetX == 0.0F && this.offsetY == 0.0F && this.offsetZ == 0.0F) {
-                        GL11.glCallList(this.displayList);
-                    } else {
-                        GL11.glTranslatef(this.offsetX * var1, this.offsetY * var1, this.offsetZ * var1);
-                        GL11.glCallList(this.displayList);
-                        GL11.glTranslatef(-this.offsetX * var1, -this.offsetY * var1, -this.offsetZ * var1);
-                    }
-                } else {
-                    GL11.glPushMatrix();
-                    GL11.glTranslatef(this.offsetX * var1, this.offsetY * var1, this.offsetZ * var1);
-                    if(this.rotateAngleZ != 0.0F) {
-                        GL11.glRotatef(this.rotateAngleZ * (180.0F / (float)Math.PI), 0.0F, 0.0F, 1.0F);
-                    }
-
-                    if(this.rotateAngleY != 0.0F) {
-                        GL11.glRotatef(this.rotateAngleY * (180.0F / (float)Math.PI), 0.0F, 1.0F, 0.0F);
-                    }
-
-                    if(this.rotateAngleX != 0.0F) {
-                        GL11.glRotatef(this.rotateAngleX * (180.0F / (float)Math.PI), 1.0F, 0.0F, 0.0F);
-                    }
-
-                    GL11.glCallList(this.displayList);
-                    GL11.glPopMatrix();
-                }
-
-            }
-        }
-    }
-
-    public void func_926_b(float var1) {
-        if(!this.field_1402_i) {
-            if(this.field_1403_h) {
-                if(!this.compiled) {
-                    this.compileDisplayList(var1);
-                }
-
-                if(this.rotateAngleX == 0.0F && this.rotateAngleY == 0.0F && this.rotateAngleZ == 0.0F) {
-                    if(this.offsetX != 0.0F || this.offsetY != 0.0F || this.offsetZ != 0.0F) {
-                        GL11.glTranslatef(this.offsetX * var1, this.offsetY * var1, this.offsetZ * var1);
-                    }
-                } else {
-                    GL11.glTranslatef(this.offsetX * var1, this.offsetY * var1, this.offsetZ * var1);
-                    if(this.rotateAngleZ != 0.0F) {
-                        GL11.glRotatef(this.rotateAngleZ * (180.0F / (float)Math.PI), 0.0F, 0.0F, 1.0F);
-                    }
-
-                    if(this.rotateAngleY != 0.0F) {
-                        GL11.glRotatef(this.rotateAngleY * (180.0F / (float)Math.PI), 0.0F, 1.0F, 0.0F);
-                    }
-
-                    if(this.rotateAngleX != 0.0F) {
-                        GL11.glRotatef(this.rotateAngleX * (180.0F / (float)Math.PI), 1.0F, 0.0F, 0.0F);
-                    }
-                }
-
-            }
-        }
-    }
-
-    private void compileDisplayList(float var1) {
-        this.displayList = GLAllocation.generateDisplayLists(1);
-        GL11.glNewList(this.displayList, GL11.GL_COMPILE);
-        Tessellator var2 = Tessellator.instance;
-
-        for(int var3 = 0; var3 < this.faces.length; ++var3) {
-            this.faces[var3].func_808_a(var2, var1);
+    public boolean mirror;
+    public boolean field_1403_h;
+    public boolean field_1402_i;
+    private PositionTexureVertex corners[];
+    private TexturedQuad faces[];
+    private int textureOffsetX;
+    private int textureOffsetY;
+    private boolean compiled;
+    private int displayList;
+    public ModelRenderer(int i, int j) {
+        compiled = false;
+        displayList = 0;
+        mirror = false;
+        field_1403_h = true;
+        field_1402_i = false;
+        textureOffsetX = i;
+        textureOffsetY = j;
+    }
+
+    public void func_921_a(float f, float f1, float f2, int i, int j, int k) {
+        addBox(f, f1, f2, i, j, k, 0.0F);
+    }
+
+    public void addBox(float f, float f1, float f2, int i, int j, int k, float f3) {
+        corners = new PositionTexureVertex[8];
+        faces = new TexturedQuad[6];
+        float f4 = f + (float) i;
+        float f5 = f1 + (float) j;
+        float f6 = f2 + (float) k;
+        f -= f3;
+        f1 -= f3;
+        f2 -= f3;
+        f4 += f3;
+        f5 += f3;
+        f6 += f3;
+        if (mirror) {
+            float f7 = f4;
+            f4 = f;
+            f = f7;
+        }
+        PositionTexureVertex positiontexurevertex = new PositionTexureVertex(f, f1, f2, 0.0F, 0.0F);
+        PositionTexureVertex positiontexurevertex1 = new PositionTexureVertex(f4, f1, f2, 0.0F, 8F);
+        PositionTexureVertex positiontexurevertex2 = new PositionTexureVertex(f4, f5, f2, 8F, 8F);
+        PositionTexureVertex positiontexurevertex3 = new PositionTexureVertex(f, f5, f2, 8F, 0.0F);
+        PositionTexureVertex positiontexurevertex4 = new PositionTexureVertex(f, f1, f6, 0.0F, 0.0F);
+        PositionTexureVertex positiontexurevertex5 = new PositionTexureVertex(f4, f1, f6, 0.0F, 8F);
+        PositionTexureVertex positiontexurevertex6 = new PositionTexureVertex(f4, f5, f6, 8F, 8F);
+        PositionTexureVertex positiontexurevertex7 = new PositionTexureVertex(f, f5, f6, 8F, 0.0F);
+        corners[0] = positiontexurevertex;
+        corners[1] = positiontexurevertex1;
+        corners[2] = positiontexurevertex2;
+        corners[3] = positiontexurevertex3;
+        corners[4] = positiontexurevertex4;
+        corners[5] = positiontexurevertex5;
+        corners[6] = positiontexurevertex6;
+        corners[7] = positiontexurevertex7;
+        faces[0] = new TexturedQuad(new PositionTexureVertex[]{
+                positiontexurevertex5, positiontexurevertex1, positiontexurevertex2, positiontexurevertex6
+        }, textureOffsetX + k + i, textureOffsetY + k, textureOffsetX + k + i + k, textureOffsetY + k + j);
+        faces[1] = new TexturedQuad(new PositionTexureVertex[]{
+                positiontexurevertex, positiontexurevertex4, positiontexurevertex7, positiontexurevertex3
+        }, textureOffsetX + 0, textureOffsetY + k, textureOffsetX + k, textureOffsetY + k + j);
+        faces[2] = new TexturedQuad(new PositionTexureVertex[]{
+                positiontexurevertex5, positiontexurevertex4, positiontexurevertex, positiontexurevertex1
+        }, textureOffsetX + k, textureOffsetY + 0, textureOffsetX + k + i, textureOffsetY + k);
+        faces[3] = new TexturedQuad(new PositionTexureVertex[]{
+                positiontexurevertex2, positiontexurevertex3, positiontexurevertex7, positiontexurevertex6
+        }, textureOffsetX + k + i, textureOffsetY + 0, textureOffsetX + k + i + i, textureOffsetY + k);
+        faces[4] = new TexturedQuad(new PositionTexureVertex[]{
+                positiontexurevertex1, positiontexurevertex, positiontexurevertex3, positiontexurevertex2
+        }, textureOffsetX + k, textureOffsetY + k, textureOffsetX + k + i, textureOffsetY + k + j);
+        faces[5] = new TexturedQuad(new PositionTexureVertex[]{
+                positiontexurevertex4, positiontexurevertex5, positiontexurevertex6, positiontexurevertex7
+        }, textureOffsetX + k + i + k, textureOffsetY + k, textureOffsetX + k + i + k + i, textureOffsetY + k + j);
+        if (mirror) {
+            for (int l = 0; l < faces.length; l++) {
+                faces[l].func_809_a();
+            }
+
+        }
+    }
+
+    public void setPosition(float f, float f1, float f2) {
+        offsetX = f;
+        offsetY = f1;
+        offsetZ = f2;
+    }
+
+    public void render(float f) {
+        if (field_1402_i) {
+            return;
+        }
+        if (!field_1403_h) {
+            return;
+        }
+        if (!compiled) {
+            compileDisplayList(f);
+        }
+        if (rotateAngleX != 0.0F || rotateAngleY != 0.0F || rotateAngleZ != 0.0F) {
+            GL11.glPushMatrix();
+            GL11.glTranslatef(offsetX * f, offsetY * f, offsetZ * f);
+            if (rotateAngleZ != 0.0F) {
+                GL11.glRotatef(rotateAngleZ * 57.29578F, 0.0F, 0.0F, 1.0F);
+            }
+            if (rotateAngleY != 0.0F) {
+                GL11.glRotatef(rotateAngleY * 57.29578F, 0.0F, 1.0F, 0.0F);
+            }
+            if (rotateAngleX != 0.0F) {
+                GL11.glRotatef(rotateAngleX * 57.29578F, 1.0F, 0.0F, 0.0F);
+            }
+            GL11.glCallList(displayList);
+            GL11.glPopMatrix();
+        } else if (offsetX != 0.0F || offsetY != 0.0F || offsetZ != 0.0F) {
+            GL11.glTranslatef(offsetX * f, offsetY * f, offsetZ * f);
+            GL11.glCallList(displayList);
+            GL11.glTranslatef(-offsetX * f, -offsetY * f, -offsetZ * f);
+        } else {
+            GL11.glCallList(displayList);
+        }
+    }
+
+    public void func_926_b(float f) {
+        if (field_1402_i) {
+            return;
+        }
+        if (!field_1403_h) {
+            return;
+        }
+        if (!compiled) {
+            compileDisplayList(f);
+        }
+        if (rotateAngleX != 0.0F || rotateAngleY != 0.0F || rotateAngleZ != 0.0F) {
+            GL11.glTranslatef(offsetX * f, offsetY * f, offsetZ * f);
+            if (rotateAngleZ != 0.0F) {
+                GL11.glRotatef(rotateAngleZ * 57.29578F, 0.0F, 0.0F, 1.0F);
+            }
+            if (rotateAngleY != 0.0F) {
+                GL11.glRotatef(rotateAngleY * 57.29578F, 0.0F, 1.0F, 0.0F);
+            }
+            if (rotateAngleX != 0.0F) {
+                GL11.glRotatef(rotateAngleX * 57.29578F, 1.0F, 0.0F, 0.0F);
+            }
+        } else if (offsetX != 0.0F || offsetY != 0.0F || offsetZ != 0.0F) {
+            GL11.glTranslatef(offsetX * f, offsetY * f, offsetZ * f);
+        }
+    }
+
+    private void compileDisplayList(float f) {
+        displayList = GLAllocation.generateDisplayLists(1);
+        GL11.glNewList(displayList, 4864 /*GL_COMPILE*/);
+        Tessellator tessellator = Tessellator.instance;
+        for (int i = 0; i < faces.length; i++) {
+            faces[i].func_808_a(tessellator, f);
         }
 
         GL11.glEndList();
-        this.compiled = true;
+        compiled = true;
     }
 }
