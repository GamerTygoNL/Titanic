--- net/minecraft/src/FontRenderer.java
+++ net/minecraft/src/FontRenderer.java
@@ -1,201 +1,203 @@
 package net.minecraft.src;
 
+import cc.noxiuam.titanic.Ref;
+import cc.noxiuam.titanic.event.impl.font.DrawStringEvent;
+import org.lwjgl.opengl.GL11;
+
+import javax.imageio.ImageIO;
 import java.awt.image.BufferedImage;
 import java.io.IOException;
 import java.nio.IntBuffer;
-import javax.imageio.ImageIO;
-import org.lwjgl.opengl.GL11;
 
 public class FontRenderer {
-    private int[] charWidth = new int[256];
-    public int fontTextureName = 0;
-    private int fontDisplayLists;
-    private IntBuffer buffer = GLAllocation.createDirectIntBuffer(1024);
-
-    public FontRenderer(GameSettings var1, String var2, RenderEngine var3) {
-        BufferedImage var4;
-        try {
-            var4 = ImageIO.read(RenderEngine.class.getResourceAsStream(var2));
-        } catch (IOException var18) {
-            throw new RuntimeException(var18);
-        }
-
-        int var5 = var4.getWidth();
-        int var6 = var4.getHeight();
-        int[] var7 = new int[var5 * var6];
-        var4.getRGB(0, 0, var5, var6, var7, 0, var5);
-
-        int var9;
-        int var10;
-        int var11;
-        int var12;
-        int var15;
-        int var16;
-        for(int var8 = 0; var8 < 256; ++var8) {
-            var9 = var8 % 16;
-            var10 = var8 / 16;
-
-            for(var11 = 7; var11 >= 0; --var11) {
-                var12 = var9 * 8 + var11;
-                boolean var13 = true;
-
-                for(int var14 = 0; var14 < 8 && var13; ++var14) {
-                    var15 = (var10 * 8 + var14) * var5;
-                    var16 = var7[var12 + var15] & 255;
-                    if(var16 > 0) {
-                        var13 = false;
-                    }
-                }
-
-                if(!var13) {
-                    break;
-                }
-            }
-
-            if(var8 == 32) {
-                var11 = 2;
-            }
-
-            this.charWidth[var8] = var11 + 2;
-        }
-
-        this.fontTextureName = var3.allocateAndSetupTexture(var4);
-        this.fontDisplayLists = GLAllocation.generateDisplayLists(288);
-        Tessellator var19 = Tessellator.instance;
-
-        for(var9 = 0; var9 < 256; ++var9) {
-            GL11.glNewList(this.fontDisplayLists + var9, GL11.GL_COMPILE);
-            var19.startDrawingQuads();
-            var10 = var9 % 16 * 8;
-            var11 = var9 / 16 * 8;
-            float var20 = 7.99F;
-            float var21 = 0.0F;
-            float var23 = 0.0F;
-            var19.addVertexWithUV(0.0D, (double)(0.0F + var20), 0.0D, (double)((float)var10 / 128.0F + var21), (double)(((float)var11 + var20) / 128.0F + var23));
-            var19.addVertexWithUV((double)(0.0F + var20), (double)(0.0F + var20), 0.0D, (double)(((float)var10 + var20) / 128.0F + var21), (double)(((float)var11 + var20) / 128.0F + var23));
-            var19.addVertexWithUV((double)(0.0F + var20), 0.0D, 0.0D, (double)(((float)var10 + var20) / 128.0F + var21), (double)((float)var11 / 128.0F + var23));
-            var19.addVertexWithUV(0.0D, 0.0D, 0.0D, (double)((float)var10 / 128.0F + var21), (double)((float)var11 / 128.0F + var23));
-            var19.draw();
-            GL11.glTranslatef((float)this.charWidth[var9], 0.0F, 0.0F);
-            GL11.glEndList();
-        }
-
-        for(var9 = 0; var9 < 32; ++var9) {
-            var10 = (var9 >> 3 & 1) * 85;
-            var11 = (var9 >> 2 & 1) * 170 + var10;
-            var12 = (var9 >> 1 & 1) * 170 + var10;
-            int var22 = (var9 >> 0 & 1) * 170 + var10;
-            if(var9 == 6) {
-                var11 += 85;
-            }
-
-            boolean var24 = var9 >= 16;
-            if(var1.anaglyph) {
-                var15 = (var11 * 30 + var12 * 59 + var22 * 11) / 100;
-                var16 = (var11 * 30 + var12 * 70) / 100;
-                int var17 = (var11 * 30 + var22 * 70) / 100;
-                var11 = var15;
-                var12 = var16;
-                var22 = var17;
-            }
-
-            if(var24) {
-                var11 /= 4;
-                var12 /= 4;
-                var22 /= 4;
-            }
-
-            GL11.glNewList(this.fontDisplayLists + 256 + var9, GL11.GL_COMPILE);
-            GL11.glColor3f((float)var11 / 255.0F, (float)var12 / 255.0F, (float)var22 / 255.0F);
-            GL11.glEndList();
-        }
-
-    }
-
-    public void drawStringWithShadow(String var1, int var2, int var3, int var4) {
-        this.renderString(var1, var2 + 1, var3 + 1, var4, true);
-        this.drawString(var1, var2, var3, var4);
-    }
-
-    public void drawString(String var1, int var2, int var3, int var4) {
-        this.renderString(var1, var2, var3, var4, false);
-    }
-
-    public void renderString(String var1, int var2, int var3, int var4, boolean var5) {
-        if(var1 != null) {
-            int var6;
-            if(var5) {
-                var6 = var4 & -16777216;
-                var4 = (var4 & 16579836) >> 2;
-                var4 += var6;
-            }
-
-            GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.fontTextureName);
-            float var10 = (float)(var4 >> 16 & 255) / 255.0F;
-            float var7 = (float)(var4 >> 8 & 255) / 255.0F;
-            float var8 = (float)(var4 & 255) / 255.0F;
-            float var9 = (float)(var4 >> 24 & 255) / 255.0F;
-            if(var9 == 0.0F) {
-                var9 = 1.0F;
-            }
-
-            GL11.glColor4f(var10, var7, var8, var9);
-            this.buffer.clear();
-            GL11.glPushMatrix();
-            GL11.glTranslatef((float)var2, (float)var3, 0.0F);
-
-            for(var6 = 0; var6 < var1.length(); ++var6) {
-                int var11;
-                for(; var1.charAt(var6) == 167 && var1.length() > var6 + 1; var6 += 2) {
-                    var11 = "0123456789abcdef".indexOf(var1.toLowerCase().charAt(var6 + 1));
-                    if(var11 < 0 || var11 > 15) {
-                        var11 = 15;
-                    }
-
-                    this.buffer.put(this.fontDisplayLists + 256 + var11 + (var5 ? 16 : 0));
-                    if(this.buffer.remaining() == 0) {
-                        this.buffer.flip();
-                        GL11.glCallLists(this.buffer);
-                        this.buffer.clear();
-                    }
-                }
-
-                var11 = FontAllowedCharacters.field_20157_a.indexOf(var1.charAt(var6));
-                if(var11 >= 0) {
-                    this.buffer.put(this.fontDisplayLists + var11 + 32);
-                }
-
-                if(this.buffer.remaining() == 0) {
-                    this.buffer.flip();
-                    GL11.glCallLists(this.buffer);
-                    this.buffer.clear();
-                }
-            }
-
-            this.buffer.flip();
-            GL11.glCallLists(this.buffer);
-            GL11.glPopMatrix();
-        }
-    }
-
-    public int getStringWidth(String var1) {
-        if(var1 == null) {
+
+    private final int[] charWidth;
+    private final int fontDisplayLists;
+    private final IntBuffer buffer;
+    public int fontTextureName;
+
+    public FontRenderer(GameSettings gamesettings, String s, RenderEngine renderengine) {
+        charWidth = new int[256];
+        fontTextureName = 0;
+        buffer = GLAllocation.createDirectIntBuffer(1024 /*GL_FRONT_LEFT*/);
+        BufferedImage bufferedimage;
+        try {
+            bufferedimage = ImageIO.read((RenderEngine.class).getResourceAsStream(s));
+        } catch (IOException ioexception) {
+            throw new RuntimeException(ioexception);
+        }
+        int i = bufferedimage.getWidth();
+        int j = bufferedimage.getHeight();
+        int[] ai = new int[i * j];
+        bufferedimage.getRGB(0, 0, i, j, ai, 0, i);
+        for (int k = 0; k < 256; k++) {
+            int l = k % 16;
+            int k1 = k / 16;
+            int j2 = 7;
+            do {
+                if (j2 < 0) {
+                    break;
+                }
+                int i3 = l * 8 + j2;
+                boolean flag = true;
+                for (int l3 = 0; l3 < 8 && flag; l3++) {
+                    int i4 = (k1 * 8 + l3) * i;
+                    int k4 = ai[i3 + i4] & 0xff;
+                    if (k4 > 0) {
+                        flag = false;
+                        break;
+                    }
+                }
+
+                if (!flag) {
+                    break;
+                }
+                j2--;
+            } while (true);
+            if (k == 32) {
+                j2 = 2;
+            }
+            charWidth[k] = j2 + 2;
+        }
+
+        fontTextureName = renderengine.allocateAndSetupTexture(bufferedimage);
+        fontDisplayLists = GLAllocation.generateDisplayLists(288);
+        Tessellator tessellator = Tessellator.instance;
+        for (int i1 = 0; i1 < 256; i1++) {
+            GL11.glNewList(fontDisplayLists + i1, 4864 /*GL_COMPILE*/);
+            tessellator.startDrawingQuads();
+            int l1 = (i1 % 16) * 8;
+            int k2 = (i1 / 16) * 8;
+            float f = 7.99F;
+            float f1 = 0.0F;
+            float f2 = 0.0F;
+            tessellator.addVertexWithUV(0.0D, 0.0F + f, 0.0D, (float) l1 / 128F + f1, ((float) k2 + f) / 128F + f2);
+            tessellator.addVertexWithUV(0.0F + f, 0.0F + f, 0.0D, ((float) l1 + f) / 128F + f1, ((float) k2 + f) / 128F + f2);
+            tessellator.addVertexWithUV(0.0F + f, 0.0D, 0.0D, ((float) l1 + f) / 128F + f1, (float) k2 / 128F + f2);
+            tessellator.addVertexWithUV(0.0D, 0.0D, 0.0D, (float) l1 / 128F + f1, (float) k2 / 128F + f2);
+            tessellator.draw();
+            GL11.glTranslatef(charWidth[i1], 0.0F, 0.0F);
+            GL11.glEndList();
+        }
+
+        for (int j1 = 0; j1 < 32; j1++) {
+            int i2 = (j1 >> 3 & 1) * 85;
+            int l2 = (j1 >> 2 & 1) * 170 + i2;
+            int j3 = (j1 >> 1 & 1) * 170 + i2;
+            int k3 = (j1 >> 0 & 1) * 170 + i2;
+            if (j1 == 6) {
+                l2 += 85;
+            }
+            boolean flag1 = j1 >= 16;
+            if (gamesettings.anaglyph) {
+                int j4 = (l2 * 30 + j3 * 59 + k3 * 11) / 100;
+                int l4 = (l2 * 30 + j3 * 70) / 100;
+                int i5 = (l2 * 30 + k3 * 70) / 100;
+                l2 = j4;
+                j3 = l4;
+                k3 = i5;
+            }
+            if (flag1) {
+                l2 /= 4;
+                j3 /= 4;
+                k3 /= 4;
+            }
+            GL11.glNewList(fontDisplayLists + 256 + j1, 4864 /*GL_COMPILE*/);
+            GL11.glColor3f((float) l2 / 255F, (float) j3 / 255F, (float) k3 / 255F);
+            GL11.glEndList();
+        }
+
+    }
+
+    public void drawStringWithShadow(String s, int i, int j, int k) {
+        renderString(s, i + 1, j + 1, k, true);
+        drawString(s, i, j, k);
+    }
+
+    public void drawString(String s, int i, int j, int k) {
+        renderString(s, i, j, k, false);
+    }
+
+    public void renderString(String s, int i, int j, int k, boolean flag) {
+        if (s == null) {
+            return;
+        }
+
+        DrawStringEvent event = new DrawStringEvent(s);
+        Ref.getEventManager().handleEvent(event);
+
+        if (event.isCancelled()) {
+            s = event.getString();
+        }
+
+        if (flag) {
+            int l = k & 0xff000000;
+            k = (k & 0xfcfcfc) >> 2;
+            k += l;
+        }
+        GL11.glBindTexture(3553 /*GL_TEXTURE_2D*/, fontTextureName);
+        float f = (float) (k >> 16 & 0xff) / 255F;
+        float f1 = (float) (k >> 8 & 0xff) / 255F;
+        float f2 = (float) (k & 0xff) / 255F;
+        float f3 = (float) (k >> 24 & 0xff) / 255F;
+        if (f3 == 0.0F) {
+            f3 = 1.0F;
+        }
+        GL11.glColor4f(f, f1, f2, f3);
+        buffer.clear();
+        GL11.glPushMatrix();
+        GL11.glTranslatef(i, j, 0.0F);
+
+        try {
+            for (int i1 = 0; i1 < s.length(); i1++) {
+                for (; s.charAt(i1) == '\247' && s.length() > i1 + 1; i1 += 2) {
+                    int j1 = "0123456789abcdef".indexOf(s.toLowerCase().charAt(i1 + 1));
+                    if (j1 < 0 || j1 > 15) {
+                        j1 = 15;
+                    }
+                    buffer.put(fontDisplayLists + 256 + j1 + (flag ? 16 : 0));
+                    if (buffer.remaining() == 0) {
+                        buffer.flip();
+                        GL11.glCallLists(buffer);
+                        buffer.clear();
+                    }
+                }
+
+                int k1 = FontAllowedCharacters.field_20157_a.indexOf(s.charAt(i1));
+                if (k1 >= 0) {
+                    buffer.put(fontDisplayLists + k1 + 32);
+                }
+                if (buffer.remaining() == 0) {
+                    buffer.flip();
+                    GL11.glCallLists(buffer);
+                    buffer.clear();
+                }
+            }
+        } catch (IndexOutOfBoundsException e) {
+            e.printStackTrace();
+        }
+
+        buffer.flip();
+        GL11.glCallLists(buffer);
+        GL11.glPopMatrix();
+    }
+
+    public int getStringWidth(String s) {
+        if (s == null) {
             return 0;
-        } else {
-            int var2 = 0;
-
-            for(int var3 = 0; var3 < var1.length(); ++var3) {
-                if(var1.charAt(var3) == 167) {
-                    ++var3;
-                } else {
-                    int var4 = FontAllowedCharacters.field_20157_a.indexOf(var1.charAt(var3));
-                    if(var4 >= 0) {
-                        var2 += this.charWidth[var4 + 32];
-                    }
-                }
-            }
-
-            return var2;
-        }
+        }
+        int i = 0;
+        for (int j = 0; j < s.length(); j++) {
+            if (s.charAt(j) == '\247') {
+                j++;
+                continue;
+            }
+            int k = FontAllowedCharacters.field_20157_a.indexOf(s.charAt(j));
+            if (k >= 0) {
+                i += charWidth[k + 32];
+            }
+        }
+
+        return i;
     }
 }
