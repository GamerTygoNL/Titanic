--- net/minecraft/src/WorldProviderHell.java
+++ net/minecraft/src/WorldProviderHell.java
@@ -3,44 +3,53 @@
 import java.io.File;
 
 public class WorldProviderHell extends WorldProvider {
+
+    public WorldProviderHell() {
+    }
+
     public void registerWorldChunkManager() {
-        this.worldChunkMgr = new WorldChunkManagerHell(MobSpawnerBase.hell, 1.0D, 0.0D);
-        this.field_4220_c = true;
-        this.field_6479_d = true;
-        this.field_6478_e = true;
-        this.worldType = -1;
+        worldChunkMgr = new WorldChunkManagerHell(MobSpawnerBase.hell, 1.0D, 0.0D);
+        field_4220_c = true;
+        field_6479_d = true;
+        field_6478_e = true;
+        worldType = -1;
     }
 
-    public Vec3D func_4096_a(float var1, float var2) {
-        return Vec3D.createVector((double)0.2F, (double)0.03F, (double)0.03F);
+    public Vec3D func_4096_a(float f, float f1) {
+        return Vec3D.createVector(0.20000000298023224D, 0.029999999329447746D, 0.029999999329447746D);
     }
 
     protected void generateLightBrightnessTable() {
-        float var1 = 0.1F;
-
-        for(int var2 = 0; var2 <= 15; ++var2) {
-            float var3 = 1.0F - (float)var2 / 15.0F;
-            this.lightBrightnessTable[var2] = (1.0F - var3) / (var3 * 3.0F + 1.0F) * (1.0F - var1) + var1;
+        float f = 0.1F;
+        for (int i = 0; i <= 15; i++) {
+            float f1 = 1.0F - (float) i / 15F;
+            lightBrightnessTable[i] = ((1.0F - f1) / (f1 * 3F + 1.0F)) * (1.0F - f) + f;
         }
 
     }
 
     public IChunkProvider getChunkProvider() {
-        return new ChunkProviderHell(this.worldObj, this.worldObj.randomSeed);
-    }
-
-    public IChunkLoader getChunkLoader(File var1) {
-        File var2 = new File(var1, "DIM-1");
-        var2.mkdirs();
-        return new ChunkLoader(var2, true);
-    }
-
-    public boolean canCoordinateBeSpawn(int var1, int var2) {
-        int var3 = this.worldObj.func_614_g(var1, var2);
-        return var3 == Block.bedrock.blockID ? false : (var3 == 0 ? false : Block.opaqueCubeLookup[var3]);
-    }
-
-    public float calculateCelestialAngle(long var1, float var3) {
+        return new ChunkProviderHell(worldObj, worldObj.randomSeed);
+    }
+
+    public IChunkLoader getChunkLoader(File file) {
+        File file1 = new File(file, "DIM-1");
+        file1.mkdirs();
+        return new ChunkLoader(file1, true);
+    }
+
+    public boolean canCoordinateBeSpawn(int i, int j) {
+        int k = worldObj.func_614_g(i, j);
+        if (k == Block.bedrock.blockID) {
+            return false;
+        }
+        if (k == 0) {
+            return false;
+        }
+        return Block.opaqueCubeLookup[k];
+    }
+
+    public float calculateCelestialAngle(long l, float f) {
         return 0.5F;
     }
 
