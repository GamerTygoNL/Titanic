--- net/minecraft/src/ThreadConnectToServer.java
+++ net/minecraft/src/ThreadConnectToServer.java
@@ -1,50 +1,52 @@
 package net.minecraft.src;
 
+import net.minecraft.client.Minecraft;
+
 import java.net.ConnectException;
 import java.net.UnknownHostException;
-import net.minecraft.client.Minecraft;
 
 class ThreadConnectToServer extends Thread {
-    final Minecraft mc;
-    final String hostName;
-    final int port;
-    final GuiConnecting connectingGui;
 
-    ThreadConnectToServer(GuiConnecting var1, Minecraft var2, String var3, int var4) {
-        this.connectingGui = var1;
-        this.mc = var2;
-        this.hostName = var3;
-        this.port = var4;
+    final Minecraft mc; /* synthetic field */
+    final String hostName; /* synthetic field */
+    final int port; /* synthetic field */
+    final GuiConnecting connectingGui; /* synthetic field */
+    ThreadConnectToServer(GuiConnecting guiconnecting, Minecraft minecraft, String s, int i) {
+        connectingGui = guiconnecting;
+        mc = minecraft;
+        hostName = s;
+        port = i;
     }
 
     public void run() {
         try {
-            GuiConnecting.setNetClientHandler(this.connectingGui, new NetClientHandler(this.mc, this.hostName, this.port));
-            if(GuiConnecting.isCancelled(this.connectingGui)) {
-                return;
-            }
-
-            GuiConnecting.getNetClientHandler(this.connectingGui).addToSendQueue(new Packet2Handshake(this.mc.session.playerName));
-        } catch (UnknownHostException var2) {
-            if(GuiConnecting.isCancelled(this.connectingGui)) {
-                return;
-            }
-
-            this.mc.displayGuiScreen(new GuiConnectFailed("connect.failed", "disconnect.genericReason", new Object[]{"Unknown host \'" + this.hostName + "\'"}));
-        } catch (ConnectException var3) {
-            if(GuiConnecting.isCancelled(this.connectingGui)) {
-                return;
-            }
-
-            this.mc.displayGuiScreen(new GuiConnectFailed("connect.failed", "disconnect.genericReason", new Object[]{var3.getMessage()}));
-        } catch (Exception var4) {
-            if(GuiConnecting.isCancelled(this.connectingGui)) {
-                return;
-            }
-
-            var4.printStackTrace();
-            this.mc.displayGuiScreen(new GuiConnectFailed("connect.failed", "disconnect.genericReason", new Object[]{var4.toString()}));
+            GuiConnecting.setNetClientHandler(connectingGui, new NetClientHandler(mc, hostName, port));
+            if (GuiConnecting.isCancelled(connectingGui)) {
+                return;
+            }
+            GuiConnecting.getNetClientHandler(connectingGui).addToSendQueue(new Packet2Handshake(mc.session.playerName));
+        } catch (UnknownHostException unknownhostexception) {
+            if (GuiConnecting.isCancelled(connectingGui)) {
+                return;
+            }
+            mc.displayGuiScreen(new GuiConnectFailed("connect.failed", "disconnect.genericReason", new Object[]{
+                    "Unknown host '" + hostName + "'"
+            }));
+        } catch (ConnectException connectexception) {
+            if (GuiConnecting.isCancelled(connectingGui)) {
+                return;
+            }
+            mc.displayGuiScreen(new GuiConnectFailed("connect.failed", "disconnect.genericReason", new Object[]{
+                    connectexception.getMessage()
+            }));
+        } catch (Exception exception) {
+            if (GuiConnecting.isCancelled(connectingGui)) {
+                return;
+            }
+            exception.printStackTrace();
+            mc.displayGuiScreen(new GuiConnectFailed("connect.failed", "disconnect.genericReason", new Object[]{
+                    exception.toString()
+            }));
         }
-
     }
 }
