--- net/minecraft/src/NBTBase.java
+++ net/minecraft/src/NBTBase.java
@@ -5,98 +5,126 @@
 import java.io.IOException;
 
 public abstract class NBTBase {
-    private String key = null;
-
-    abstract void writeTagContents(DataOutput var1) throws IOException;
-
-    abstract void readTagContents(DataInput var1) throws IOException;
+
+    private String key;
+
+    public NBTBase() {
+        key = null;
+    }
+
+    public static NBTBase readTag(DataInput datainput) throws IOException {
+        byte byte0 = datainput.readByte();
+        if (byte0 == 0) {
+            return new NBTTagEnd();
+        } else {
+            NBTBase nbtbase = createTagOfType(byte0);
+            nbtbase.key = datainput.readUTF();
+            nbtbase.readTagContents(datainput);
+            return nbtbase;
+        }
+    }
+
+    public static void writeTag(NBTBase nbtbase, DataOutput dataoutput) throws IOException {
+        dataoutput.writeByte(nbtbase.getType());
+        if (nbtbase.getType() == 0) {
+        } else {
+            dataoutput.writeUTF(nbtbase.getKey());
+            nbtbase.writeTagContents(dataoutput);
+        }
+    }
+
+    public static NBTBase createTagOfType(byte byte0) {
+        switch (byte0) {
+            case 0: // '\0'
+                return new NBTTagEnd();
+
+            case 1: // '\001'
+                return new NBTTagByte();
+
+            case 2: // '\002'
+                return new NBTTagShort();
+
+            case 3: // '\003'
+                return new NBTTagInt();
+
+            case 4: // '\004'
+                return new NBTTagLong();
+
+            case 5: // '\005'
+                return new NBTTagFloat();
+
+            case 6: // '\006'
+                return new NBTTagDouble();
+
+            case 7: // '\007'
+                return new NBTTagByteArray();
+
+            case 8: // '\b'
+                return new NBTTagString();
+
+            case 9: // '\t'
+                return new NBTTagList();
+
+            case 10: // '\n'
+                return new NBTTagCompound();
+        }
+        return null;
+    }
+
+    public static String getTagName(byte byte0) {
+        switch (byte0) {
+            case 0: // '\0'
+                return "TAG_End";
+
+            case 1: // '\001'
+                return "TAG_Byte";
+
+            case 2: // '\002'
+                return "TAG_Short";
+
+            case 3: // '\003'
+                return "TAG_Int";
+
+            case 4: // '\004'
+                return "TAG_Long";
+
+            case 5: // '\005'
+                return "TAG_Float";
+
+            case 6: // '\006'
+                return "TAG_Double";
+
+            case 7: // '\007'
+                return "TAG_Byte_Array";
+
+            case 8: // '\b'
+                return "TAG_String";
+
+            case 9: // '\t'
+                return "TAG_List";
+
+            case 10: // '\n'
+                return "TAG_Compound";
+        }
+        return "UNKNOWN";
+    }
+
+    abstract void writeTagContents(DataOutput dataoutput) throws IOException;
+
+    abstract void readTagContents(DataInput datainput) throws IOException;
 
     public abstract byte getType();
 
     public String getKey() {
-        return this.key == null ? "" : this.key;
+        if (key == null) {
+            return "";
+        } else {
+            return key;
+        }
     }
 
-    public NBTBase setKey(String var1) {
-        this.key = var1;
+    public NBTBase setKey(String s) {
+        key = s;
         return this;
-    }
-
-    public static NBTBase readTag(DataInput var0) throws IOException {
-        byte var1 = var0.readByte();
-        if(var1 == 0) {
-            return new NBTTagEnd();
-        } else {
-            NBTBase var2 = createTagOfType(var1);
-            var2.key = var0.readUTF();
-            var2.readTagContents(var0);
-            return var2;
-        }
-    }
-
-    public static void writeTag(NBTBase var0, DataOutput var1) throws IOException {
-        var1.writeByte(var0.getType());
-        if(var0.getType() != 0) {
-            var1.writeUTF(var0.getKey());
-            var0.writeTagContents(var1);
-        }
-    }
-
-    public static NBTBase createTagOfType(byte var0) {
-        switch(var0) {
-        case 0:
-            return new NBTTagEnd();
-        case 1:
-            return new NBTTagByte();
-        case 2:
-            return new NBTTagShort();
-        case 3:
-            return new NBTTagInt();
-        case 4:
-            return new NBTTagLong();
-        case 5:
-            return new NBTTagFloat();
-        case 6:
-            return new NBTTagDouble();
-        case 7:
-            return new NBTTagByteArray();
-        case 8:
-            return new NBTTagString();
-        case 9:
-            return new NBTTagList();
-        case 10:
-            return new NBTTagCompound();
-        default:
-            return null;
-        }
-    }
-
-    public static String getTagName(byte var0) {
-        switch(var0) {
-        case 0:
-            return "TAG_End";
-        case 1:
-            return "TAG_Byte";
-        case 2:
-            return "TAG_Short";
-        case 3:
-            return "TAG_Int";
-        case 4:
-            return "TAG_Long";
-        case 5:
-            return "TAG_Float";
-        case 6:
-            return "TAG_Double";
-        case 7:
-            return "TAG_Byte_Array";
-        case 8:
-            return "TAG_String";
-        case 9:
-            return "TAG_List";
-        case 10:
-            return "TAG_Compound";
-        default:
-            return "UNKNOWN";
-        }
     }
 }
