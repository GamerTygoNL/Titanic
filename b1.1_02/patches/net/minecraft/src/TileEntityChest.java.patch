--- net/minecraft/src/TileEntityChest.java
+++ net/minecraft/src/TileEntityChest.java
@@ -1,87 +1,90 @@
 package net.minecraft.src;
 
-public class TileEntityChest extends TileEntity implements IInventory {
-    private ItemStack[] chestContents = new ItemStack[36];
+public class TileEntityChest extends TileEntity
+        implements IInventory {
+
+    private ItemStack[] chestContents;
+
+    public TileEntityChest() {
+        chestContents = new ItemStack[36];
+    }
 
     public int getSizeInventory() {
         return 27;
     }
 
-    public ItemStack getStackInSlot(int var1) {
-        return this.chestContents[var1];
+    public ItemStack getStackInSlot(int i) {
+        return chestContents[i];
     }
 
-    public ItemStack decrStackSize(int var1, int var2) {
-        if(this.chestContents[var1] != null) {
-            ItemStack var3;
-            if(this.chestContents[var1].stackSize <= var2) {
-                var3 = this.chestContents[var1];
-                this.chestContents[var1] = null;
-                this.onInventoryChanged();
-                return var3;
-            } else {
-                var3 = this.chestContents[var1].splitStack(var2);
-                if(this.chestContents[var1].stackSize == 0) {
-                    this.chestContents[var1] = null;
-                }
-
-                this.onInventoryChanged();
-                return var3;
-            }
+    public ItemStack decrStackSize(int i, int j) {
+        if (chestContents[i] != null) {
+            if (chestContents[i].stackSize <= j) {
+                ItemStack itemstack = chestContents[i];
+                chestContents[i] = null;
+                onInventoryChanged();
+                return itemstack;
+            }
+            ItemStack itemstack1 = chestContents[i].splitStack(j);
+            if (chestContents[i].stackSize == 0) {
+                chestContents[i] = null;
+            }
+            onInventoryChanged();
+            return itemstack1;
         } else {
             return null;
         }
     }
 
-    public void setInventorySlotContents(int var1, ItemStack var2) {
-        this.chestContents[var1] = var2;
-        if(var2 != null && var2.stackSize > this.getInventoryStackLimit()) {
-            var2.stackSize = this.getInventoryStackLimit();
+    public void setInventorySlotContents(int i, ItemStack itemstack) {
+        chestContents[i] = itemstack;
+        if (itemstack != null && itemstack.stackSize > getInventoryStackLimit()) {
+            itemstack.stackSize = getInventoryStackLimit();
         }
-
-        this.onInventoryChanged();
+        onInventoryChanged();
     }
 
     public String getInvName() {
         return "Chest";
     }
 
-    public void readFromNBT(NBTTagCompound var1) {
-        super.readFromNBT(var1);
-        NBTTagList var2 = var1.getTagList("Items");
-        this.chestContents = new ItemStack[this.getSizeInventory()];
-
-        for(int var3 = 0; var3 < var2.tagCount(); ++var3) {
-            NBTTagCompound var4 = (NBTTagCompound)var2.tagAt(var3);
-            int var5 = var4.getByte("Slot") & 255;
-            if(var5 >= 0 && var5 < this.chestContents.length) {
-                this.chestContents[var5] = new ItemStack(var4);
+    public void readFromNBT(NBTTagCompound nbttagcompound) {
+        super.readFromNBT(nbttagcompound);
+        NBTTagList nbttaglist = nbttagcompound.getTagList("Items");
+        chestContents = new ItemStack[getSizeInventory()];
+        for (int i = 0; i < nbttaglist.tagCount(); i++) {
+            NBTTagCompound nbttagcompound1 = (NBTTagCompound) nbttaglist.tagAt(i);
+            int j = nbttagcompound1.getByte("Slot") & 0xff;
+            if (j >= 0 && j < chestContents.length) {
+                chestContents[j] = new ItemStack(nbttagcompound1);
             }
         }
 
     }
 
-    public void writeToNBT(NBTTagCompound var1) {
-        super.writeToNBT(var1);
-        NBTTagList var2 = new NBTTagList();
-
-        for(int var3 = 0; var3 < this.chestContents.length; ++var3) {
-            if(this.chestContents[var3] != null) {
-                NBTTagCompound var4 = new NBTTagCompound();
-                var4.setByte("Slot", (byte)var3);
-                this.chestContents[var3].writeToNBT(var4);
-                var2.setTag(var4);
+    public void writeToNBT(NBTTagCompound nbttagcompound) {
+        super.writeToNBT(nbttagcompound);
+        NBTTagList nbttaglist = new NBTTagList();
+        for (int i = 0; i < chestContents.length; i++) {
+            if (chestContents[i] != null) {
+                NBTTagCompound nbttagcompound1 = new NBTTagCompound();
+                nbttagcompound1.setByte("Slot", (byte) i);
+                chestContents[i].writeToNBT(nbttagcompound1);
+                nbttaglist.setTag(nbttagcompound1);
             }
         }
 
-        var1.setTag("Items", var2);
+        nbttagcompound.setTag("Items", nbttaglist);
     }
 
     public int getInventoryStackLimit() {
         return 64;
     }
 
-    public boolean func_20070_a_(EntityPlayer var1) {
-        return this.worldObj.getBlockTileEntity(this.xCoord, this.yCoord, this.zCoord) != this ? false : var1.getDistanceSq((double)this.xCoord + 0.5D, (double)this.yCoord + 0.5D, (double)this.zCoord + 0.5D) <= 64.0D;
+    public boolean func_20070_a_(EntityPlayer entityplayer) {
+        if (worldObj.getBlockTileEntity(xCoord, yCoord, zCoord) != this) {
+            return false;
+        }
+        return entityplayer.getDistanceSq((double) xCoord + 0.5D, (double) yCoord + 0.5D, (double) zCoord + 0.5D) <= 64D;
     }
 }
