--- net/minecraft/src/BlockRedstoneWire.java
+++ net/minecraft/src/BlockRedstoneWire.java
@@ -3,18 +3,31 @@
 import java.util.Random;
 
 public class BlockRedstoneWire extends Block {
-    private boolean wiresProvidePower = true;
-
-    public BlockRedstoneWire(int var1, int var2) {
-        super(var1, var2, Material.circuits);
-        this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F / 16.0F, 1.0F);
-    }
-
-    public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-        return this.blockIndexInTexture + (var2 > 0 ? 16 : 0);
-    }
-
-    public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+
+    private boolean wiresProvidePower;
+
+    public BlockRedstoneWire(int i, int j) {
+        super(i, j, Material.circuits);
+        wiresProvidePower = true;
+        setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.0625F, 1.0F);
+    }
+
+    public static boolean isPowerProviderOrWire(IBlockAccess iblockaccess, int i, int j, int k) {
+        int l = iblockaccess.getBlockId(i, j, k);
+        if (l == Block.redstoneWire.blockID) {
+            return true;
+        }
+        if (l == 0) {
+            return false;
+        }
+        return Block.blocksList[l].canProvidePower();
+    }
+
+    public int getBlockTextureFromSideAndMetadata(int i, int j) {
+        return blockIndexInTexture + (j <= 0 ? 0 : 16);
+    }
+
+    public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int i, int j, int k) {
         return null;
     }
 
@@ -30,279 +43,272 @@
         return 5;
     }
 
-    public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-        return var1.isBlockOpaqueCube(var2, var3 - 1, var4);
-    }
-
-    private void updateAndPropagateCurrentStrength(World var1, int var2, int var3, int var4) {
-        int var5 = var1.getBlockMetadata(var2, var3, var4);
-        int var6 = 0;
-        this.wiresProvidePower = false;
-        boolean var7 = var1.isBlockIndirectlyGettingPowered(var2, var3, var4);
-        this.wiresProvidePower = true;
-        int var8;
-        int var9;
-        int var10;
-        if(var7) {
-            var6 = 15;
-        } else {
-            for(var8 = 0; var8 < 4; ++var8) {
-                var9 = var2;
-                var10 = var4;
-                if(var8 == 0) {
-                    var9 = var2 - 1;
-                }
-
-                if(var8 == 1) {
-                    ++var9;
-                }
-
-                if(var8 == 2) {
-                    var10 = var4 - 1;
-                }
-
-                if(var8 == 3) {
-                    ++var10;
-                }
-
-                var6 = this.getMaxCurrentStrength(var1, var9, var3, var10, var6);
-                if(var1.isBlockOpaqueCube(var9, var3, var10) && !var1.isBlockOpaqueCube(var2, var3 + 1, var4)) {
-                    var6 = this.getMaxCurrentStrength(var1, var9, var3 + 1, var10, var6);
-                } else if(!var1.isBlockOpaqueCube(var9, var3, var10)) {
-                    var6 = this.getMaxCurrentStrength(var1, var9, var3 - 1, var10, var6);
-                }
-            }
-
-            if(var6 > 0) {
-                --var6;
-            } else {
-                var6 = 0;
-            }
-        }
-
-        if(var5 != var6) {
-            var1.setBlockMetadataWithNotify(var2, var3, var4, var6);
-            var1.func_701_b(var2, var3, var4, var2, var3, var4);
-            if(var6 > 0) {
-                --var6;
-            }
-
-            for(var8 = 0; var8 < 4; ++var8) {
-                var9 = var2;
-                var10 = var4;
-                int var11 = var3 - 1;
-                if(var8 == 0) {
-                    var9 = var2 - 1;
-                }
-
-                if(var8 == 1) {
-                    ++var9;
-                }
-
-                if(var8 == 2) {
-                    var10 = var4 - 1;
-                }
-
-                if(var8 == 3) {
-                    ++var10;
-                }
-
-                if(var1.isBlockOpaqueCube(var9, var3, var10)) {
-                    var11 += 2;
-                }
-
-                int var12 = this.getMaxCurrentStrength(var1, var9, var3, var10, -1);
-                if(var12 >= 0 && var12 != var6) {
-                    this.updateAndPropagateCurrentStrength(var1, var9, var3, var10);
-                }
-
-                var12 = this.getMaxCurrentStrength(var1, var9, var11, var10, -1);
-                if(var12 >= 0 && var12 != var6) {
-                    this.updateAndPropagateCurrentStrength(var1, var9, var11, var10);
-                }
-            }
-
-            if(var5 == 0 || var6 == 0) {
-                var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-                var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-                var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-                var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-                var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
-                var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-                var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
-            }
-        }
-
-    }
-
-    private void notifyWireNeighborsOfNeighborChange(World var1, int var2, int var3, int var4) {
-        if(var1.getBlockId(var2, var3, var4) == this.blockID) {
-            var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-            var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-            var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-            var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-            var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
-            var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-            var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
-        }
-    }
-
-    public void onBlockAdded(World var1, int var2, int var3, int var4) {
-        super.onBlockAdded(var1, var2, var3, var4);
-        if(!var1.multiplayerWorld) {
-            this.updateAndPropagateCurrentStrength(var1, var2, var3, var4);
-            var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
-            var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-            this.notifyWireNeighborsOfNeighborChange(var1, var2 - 1, var3, var4);
-            this.notifyWireNeighborsOfNeighborChange(var1, var2 + 1, var3, var4);
-            this.notifyWireNeighborsOfNeighborChange(var1, var2, var3, var4 - 1);
-            this.notifyWireNeighborsOfNeighborChange(var1, var2, var3, var4 + 1);
-            if(var1.isBlockOpaqueCube(var2 - 1, var3, var4)) {
-                this.notifyWireNeighborsOfNeighborChange(var1, var2 - 1, var3 + 1, var4);
-            } else {
-                this.notifyWireNeighborsOfNeighborChange(var1, var2 - 1, var3 - 1, var4);
-            }
-
-            if(var1.isBlockOpaqueCube(var2 + 1, var3, var4)) {
-                this.notifyWireNeighborsOfNeighborChange(var1, var2 + 1, var3 + 1, var4);
-            } else {
-                this.notifyWireNeighborsOfNeighborChange(var1, var2 + 1, var3 - 1, var4);
-            }
-
-            if(var1.isBlockOpaqueCube(var2, var3, var4 - 1)) {
-                this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 + 1, var4 - 1);
-            } else {
-                this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 - 1, var4 - 1);
-            }
-
-            if(var1.isBlockOpaqueCube(var2, var3, var4 + 1)) {
-                this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 + 1, var4 + 1);
-            } else {
-                this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 - 1, var4 + 1);
-            }
-
-        }
-    }
-
-    public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-        super.onBlockRemoval(var1, var2, var3, var4);
-        if(!var1.multiplayerWorld) {
-            var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
-            var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-            this.updateAndPropagateCurrentStrength(var1, var2, var3, var4);
-            this.notifyWireNeighborsOfNeighborChange(var1, var2 - 1, var3, var4);
-            this.notifyWireNeighborsOfNeighborChange(var1, var2 + 1, var3, var4);
-            this.notifyWireNeighborsOfNeighborChange(var1, var2, var3, var4 - 1);
-            this.notifyWireNeighborsOfNeighborChange(var1, var2, var3, var4 + 1);
-            if(var1.isBlockOpaqueCube(var2 - 1, var3, var4)) {
-                this.notifyWireNeighborsOfNeighborChange(var1, var2 - 1, var3 + 1, var4);
-            } else {
-                this.notifyWireNeighborsOfNeighborChange(var1, var2 - 1, var3 - 1, var4);
-            }
-
-            if(var1.isBlockOpaqueCube(var2 + 1, var3, var4)) {
-                this.notifyWireNeighborsOfNeighborChange(var1, var2 + 1, var3 + 1, var4);
-            } else {
-                this.notifyWireNeighborsOfNeighborChange(var1, var2 + 1, var3 - 1, var4);
-            }
-
-            if(var1.isBlockOpaqueCube(var2, var3, var4 - 1)) {
-                this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 + 1, var4 - 1);
-            } else {
-                this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 - 1, var4 - 1);
-            }
-
-            if(var1.isBlockOpaqueCube(var2, var3, var4 + 1)) {
-                this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 + 1, var4 + 1);
-            } else {
-                this.notifyWireNeighborsOfNeighborChange(var1, var2, var3 - 1, var4 + 1);
-            }
-
-        }
-    }
-
-    private int getMaxCurrentStrength(World var1, int var2, int var3, int var4, int var5) {
-        if(var1.getBlockId(var2, var3, var4) != this.blockID) {
-            return var5;
-        } else {
-            int var6 = var1.getBlockMetadata(var2, var3, var4);
-            return var6 > var5 ? var6 : var5;
-        }
-    }
-
-    public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-        if(!var1.multiplayerWorld) {
-            int var6 = var1.getBlockMetadata(var2, var3, var4);
-            boolean var7 = this.canPlaceBlockAt(var1, var2, var3, var4);
-            if(!var7) {
-                this.dropBlockAsItem(var1, var2, var3, var4, var6);
-                var1.setBlockWithNotify(var2, var3, var4, 0);
-            } else {
-                this.updateAndPropagateCurrentStrength(var1, var2, var3, var4);
-            }
-
-            super.onNeighborBlockChange(var1, var2, var3, var4, var5);
-        }
-    }
-
-    public int idDropped(int var1, Random var2) {
+    public boolean canPlaceBlockAt(World world, int i, int j, int k) {
+        return world.isBlockOpaqueCube(i, j - 1, k);
+    }
+
+    private void updateAndPropagateCurrentStrength(World world, int i, int j, int k) {
+        int l = world.getBlockMetadata(i, j, k);
+        int i1 = 0;
+        wiresProvidePower = false;
+        boolean flag = world.isBlockIndirectlyGettingPowered(i, j, k);
+        wiresProvidePower = true;
+        if (flag) {
+            i1 = 15;
+        } else {
+            for (int j1 = 0; j1 < 4; j1++) {
+                int l1 = i;
+                int j2 = k;
+                if (j1 == 0) {
+                    l1--;
+                }
+                if (j1 == 1) {
+                    l1++;
+                }
+                if (j1 == 2) {
+                    j2--;
+                }
+                if (j1 == 3) {
+                    j2++;
+                }
+                i1 = getMaxCurrentStrength(world, l1, j, j2, i1);
+                if (world.isBlockOpaqueCube(l1, j, j2) && !world.isBlockOpaqueCube(i, j + 1, k)) {
+                    i1 = getMaxCurrentStrength(world, l1, j + 1, j2, i1);
+                    continue;
+                }
+                if (!world.isBlockOpaqueCube(l1, j, j2)) {
+                    i1 = getMaxCurrentStrength(world, l1, j - 1, j2, i1);
+                }
+            }
+
+            if (i1 > 0) {
+                i1--;
+            } else {
+                i1 = 0;
+            }
+        }
+        if (l != i1) {
+            world.setBlockMetadataWithNotify(i, j, k, i1);
+            world.func_701_b(i, j, k, i, j, k);
+            if (i1 > 0) {
+                i1--;
+            }
+            for (int k1 = 0; k1 < 4; k1++) {
+                int i2 = i;
+                int k2 = k;
+                int l2 = j - 1;
+                if (k1 == 0) {
+                    i2--;
+                }
+                if (k1 == 1) {
+                    i2++;
+                }
+                if (k1 == 2) {
+                    k2--;
+                }
+                if (k1 == 3) {
+                    k2++;
+                }
+                if (world.isBlockOpaqueCube(i2, j, k2)) {
+                    l2 += 2;
+                }
+                int i3 = getMaxCurrentStrength(world, i2, j, k2, -1);
+                if (i3 >= 0 && i3 != i1) {
+                    updateAndPropagateCurrentStrength(world, i2, j, k2);
+                }
+                i3 = getMaxCurrentStrength(world, i2, l2, k2, -1);
+                if (i3 >= 0 && i3 != i1) {
+                    updateAndPropagateCurrentStrength(world, i2, l2, k2);
+                }
+            }
+
+            if (l == 0 || i1 == 0) {
+                world.notifyBlocksOfNeighborChange(i, j, k, blockID);
+                world.notifyBlocksOfNeighborChange(i - 1, j, k, blockID);
+                world.notifyBlocksOfNeighborChange(i + 1, j, k, blockID);
+                world.notifyBlocksOfNeighborChange(i, j, k - 1, blockID);
+                world.notifyBlocksOfNeighborChange(i, j, k + 1, blockID);
+                world.notifyBlocksOfNeighborChange(i, j - 1, k, blockID);
+                world.notifyBlocksOfNeighborChange(i, j + 1, k, blockID);
+            }
+        }
+    }
+
+    private void notifyWireNeighborsOfNeighborChange(World world, int i, int j, int k) {
+        if (world.getBlockId(i, j, k) != blockID) {
+            return;
+        } else {
+            world.notifyBlocksOfNeighborChange(i, j, k, blockID);
+            world.notifyBlocksOfNeighborChange(i - 1, j, k, blockID);
+            world.notifyBlocksOfNeighborChange(i + 1, j, k, blockID);
+            world.notifyBlocksOfNeighborChange(i, j, k - 1, blockID);
+            world.notifyBlocksOfNeighborChange(i, j, k + 1, blockID);
+            world.notifyBlocksOfNeighborChange(i, j - 1, k, blockID);
+            world.notifyBlocksOfNeighborChange(i, j + 1, k, blockID);
+            return;
+        }
+    }
+
+    public void onBlockAdded(World world, int i, int j, int k) {
+        super.onBlockAdded(world, i, j, k);
+        if (world.multiplayerWorld) {
+            return;
+        }
+        updateAndPropagateCurrentStrength(world, i, j, k);
+        world.notifyBlocksOfNeighborChange(i, j + 1, k, blockID);
+        world.notifyBlocksOfNeighborChange(i, j - 1, k, blockID);
+        notifyWireNeighborsOfNeighborChange(world, i - 1, j, k);
+        notifyWireNeighborsOfNeighborChange(world, i + 1, j, k);
+        notifyWireNeighborsOfNeighborChange(world, i, j, k - 1);
+        notifyWireNeighborsOfNeighborChange(world, i, j, k + 1);
+        if (world.isBlockOpaqueCube(i - 1, j, k)) {
+            notifyWireNeighborsOfNeighborChange(world, i - 1, j + 1, k);
+        } else {
+            notifyWireNeighborsOfNeighborChange(world, i - 1, j - 1, k);
+        }
+        if (world.isBlockOpaqueCube(i + 1, j, k)) {
+            notifyWireNeighborsOfNeighborChange(world, i + 1, j + 1, k);
+        } else {
+            notifyWireNeighborsOfNeighborChange(world, i + 1, j - 1, k);
+        }
+        if (world.isBlockOpaqueCube(i, j, k - 1)) {
+            notifyWireNeighborsOfNeighborChange(world, i, j + 1, k - 1);
+        } else {
+            notifyWireNeighborsOfNeighborChange(world, i, j - 1, k - 1);
+        }
+        if (world.isBlockOpaqueCube(i, j, k + 1)) {
+            notifyWireNeighborsOfNeighborChange(world, i, j + 1, k + 1);
+        } else {
+            notifyWireNeighborsOfNeighborChange(world, i, j - 1, k + 1);
+        }
+    }
+
+    public void onBlockRemoval(World world, int i, int j, int k) {
+        super.onBlockRemoval(world, i, j, k);
+        if (world.multiplayerWorld) {
+            return;
+        }
+        world.notifyBlocksOfNeighborChange(i, j + 1, k, blockID);
+        world.notifyBlocksOfNeighborChange(i, j - 1, k, blockID);
+        updateAndPropagateCurrentStrength(world, i, j, k);
+        notifyWireNeighborsOfNeighborChange(world, i - 1, j, k);
+        notifyWireNeighborsOfNeighborChange(world, i + 1, j, k);
+        notifyWireNeighborsOfNeighborChange(world, i, j, k - 1);
+        notifyWireNeighborsOfNeighborChange(world, i, j, k + 1);
+        if (world.isBlockOpaqueCube(i - 1, j, k)) {
+            notifyWireNeighborsOfNeighborChange(world, i - 1, j + 1, k);
+        } else {
+            notifyWireNeighborsOfNeighborChange(world, i - 1, j - 1, k);
+        }
+        if (world.isBlockOpaqueCube(i + 1, j, k)) {
+            notifyWireNeighborsOfNeighborChange(world, i + 1, j + 1, k);
+        } else {
+            notifyWireNeighborsOfNeighborChange(world, i + 1, j - 1, k);
+        }
+        if (world.isBlockOpaqueCube(i, j, k - 1)) {
+            notifyWireNeighborsOfNeighborChange(world, i, j + 1, k - 1);
+        } else {
+            notifyWireNeighborsOfNeighborChange(world, i, j - 1, k - 1);
+        }
+        if (world.isBlockOpaqueCube(i, j, k + 1)) {
+            notifyWireNeighborsOfNeighborChange(world, i, j + 1, k + 1);
+        } else {
+            notifyWireNeighborsOfNeighborChange(world, i, j - 1, k + 1);
+        }
+    }
+
+    private int getMaxCurrentStrength(World world, int i, int j, int k, int l) {
+        if (world.getBlockId(i, j, k) != blockID) {
+            return l;
+        }
+        int i1 = world.getBlockMetadata(i, j, k);
+        if (i1 > l) {
+            return i1;
+        } else {
+            return l;
+        }
+    }
+
+    public void onNeighborBlockChange(World world, int i, int j, int k, int l) {
+        if (world.multiplayerWorld) {
+            return;
+        }
+        int i1 = world.getBlockMetadata(i, j, k);
+        boolean flag = canPlaceBlockAt(world, i, j, k);
+        if (!flag) {
+            dropBlockAsItem(world, i, j, k, i1);
+            world.setBlockWithNotify(i, j, k, 0);
+        } else {
+            updateAndPropagateCurrentStrength(world, i, j, k);
+        }
+        super.onNeighborBlockChange(world, i, j, k, l);
+    }
+
+    public int idDropped(int i, Random random) {
         return Item.redstone.shiftedIndex;
     }
 
-    public boolean isIndirectlyPoweringTo(World var1, int var2, int var3, int var4, int var5) {
-        return !this.wiresProvidePower ? false : this.isPoweringTo(var1, var2, var3, var4, var5);
-    }
-
-    public boolean isPoweringTo(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-        if(!this.wiresProvidePower) {
-            return false;
-        } else if(var1.getBlockMetadata(var2, var3, var4) == 0) {
-            return false;
-        } else if(var5 == 1) {
-            return true;
+    public boolean isIndirectlyPoweringTo(World world, int i, int j, int k, int l) {
+        if (!wiresProvidePower) {
+            return false;
         } else {
-            boolean var6 = isPowerProviderOrWire(var1, var2 - 1, var3, var4) || !var1.isBlockOpaqueCube(var2 - 1, var3, var4) && isPowerProviderOrWire(var1, var2 - 1, var3 - 1, var4);
-            boolean var7 = isPowerProviderOrWire(var1, var2 + 1, var3, var4) || !var1.isBlockOpaqueCube(var2 + 1, var3, var4) && isPowerProviderOrWire(var1, var2 + 1, var3 - 1, var4);
-            boolean var8 = isPowerProviderOrWire(var1, var2, var3, var4 - 1) || !var1.isBlockOpaqueCube(var2, var3, var4 - 1) && isPowerProviderOrWire(var1, var2, var3 - 1, var4 - 1);
-            boolean var9 = isPowerProviderOrWire(var1, var2, var3, var4 + 1) || !var1.isBlockOpaqueCube(var2, var3, var4 + 1) && isPowerProviderOrWire(var1, var2, var3 - 1, var4 + 1);
-            if(!var1.isBlockOpaqueCube(var2, var3 + 1, var4)) {
-                if(var1.isBlockOpaqueCube(var2 - 1, var3, var4) && isPowerProviderOrWire(var1, var2 - 1, var3 + 1, var4)) {
-                    var6 = true;
-                }
-
-                if(var1.isBlockOpaqueCube(var2 + 1, var3, var4) && isPowerProviderOrWire(var1, var2 + 1, var3 + 1, var4)) {
-                    var7 = true;
-                }
-
-                if(var1.isBlockOpaqueCube(var2, var3, var4 - 1) && isPowerProviderOrWire(var1, var2, var3 + 1, var4 - 1)) {
-                    var8 = true;
-                }
-
-                if(var1.isBlockOpaqueCube(var2, var3, var4 + 1) && isPowerProviderOrWire(var1, var2, var3 + 1, var4 + 1)) {
-                    var9 = true;
-                }
-            }
-
-            return !var8 && !var7 && !var6 && !var9 && var5 >= 2 && var5 <= 5 ? true : (var5 == 2 && var8 && !var6 && !var7 ? true : (var5 == 3 && var9 && !var6 && !var7 ? true : (var5 == 4 && var6 && !var8 && !var9 ? true : var5 == 5 && var7 && !var8 && !var9)));
-        }
+            return isPoweringTo(world, i, j, k, l);
+        }
+    }
+
+    public boolean isPoweringTo(IBlockAccess iblockaccess, int i, int j, int k, int l) {
+        if (!wiresProvidePower) {
+            return false;
+        }
+        if (iblockaccess.getBlockMetadata(i, j, k) == 0) {
+            return false;
+        }
+        if (l == 1) {
+            return true;
+        }
+        boolean flag = isPowerProviderOrWire(iblockaccess, i - 1, j, k) || !iblockaccess.isBlockOpaqueCube(i - 1, j, k) && isPowerProviderOrWire(iblockaccess, i - 1, j - 1, k);
+        boolean flag1 = isPowerProviderOrWire(iblockaccess, i + 1, j, k) || !iblockaccess.isBlockOpaqueCube(i + 1, j, k) && isPowerProviderOrWire(iblockaccess, i + 1, j - 1, k);
+        boolean flag2 = isPowerProviderOrWire(iblockaccess, i, j, k - 1) || !iblockaccess.isBlockOpaqueCube(i, j, k - 1) && isPowerProviderOrWire(iblockaccess, i, j - 1, k - 1);
+        boolean flag3 = isPowerProviderOrWire(iblockaccess, i, j, k + 1) || !iblockaccess.isBlockOpaqueCube(i, j, k + 1) && isPowerProviderOrWire(iblockaccess, i, j - 1, k + 1);
+        if (!iblockaccess.isBlockOpaqueCube(i, j + 1, k)) {
+            if (iblockaccess.isBlockOpaqueCube(i - 1, j, k) && isPowerProviderOrWire(iblockaccess, i - 1, j + 1, k)) {
+                flag = true;
+            }
+            if (iblockaccess.isBlockOpaqueCube(i + 1, j, k) && isPowerProviderOrWire(iblockaccess, i + 1, j + 1, k)) {
+                flag1 = true;
+            }
+            if (iblockaccess.isBlockOpaqueCube(i, j, k - 1) && isPowerProviderOrWire(iblockaccess, i, j + 1, k - 1)) {
+                flag2 = true;
+            }
+            if (iblockaccess.isBlockOpaqueCube(i, j, k + 1) && isPowerProviderOrWire(iblockaccess, i, j + 1, k + 1)) {
+                flag3 = true;
+            }
+        }
+        if (!flag2 && !flag1 && !flag && !flag3 && l >= 2 && l <= 5) {
+            return true;
+        }
+        if (l == 2 && flag2 && !flag && !flag1) {
+            return true;
+        }
+        if (l == 3 && flag3 && !flag && !flag1) {
+            return true;
+        }
+        if (l == 4 && flag && !flag2 && !flag3) {
+            return true;
+        }
+        return l == 5 && flag1 && !flag2 && !flag3;
     }
 
     public boolean canProvidePower() {
-        return this.wiresProvidePower;
+        return wiresProvidePower;
     }
 
-    public void randomDisplayTick(World var1, int var2, int var3, int var4, Random var5) {
-        if(var1.getBlockMetadata(var2, var3, var4) > 0) {
-            double var6 = (double)var2 + 0.5D + ((double)var5.nextFloat() - 0.5D) * 0.2D;
-            double var8 = (double)((float)var3 + 1.0F / 16.0F);
-            double var10 = (double)var4 + 0.5D + ((double)var5.nextFloat() - 0.5D) * 0.2D;
-            var1.spawnParticle("reddust", var6, var8, var10, 0.0D, 0.0D, 0.0D);
+    public void randomDisplayTick(World world, int i, int j, int k, Random random) {
+        if (world.getBlockMetadata(i, j, k) > 0) {
+            double d = (double) i + 0.5D + ((double) random.nextFloat() - 0.5D) * 0.20000000000000001D;
+            double d1 = (float) j + 0.0625F;
+            double d2 = (double) k + 0.5D + ((double) random.nextFloat() - 0.5D) * 0.20000000000000001D;
+            world.spawnParticle("reddust", d, d1, d2, 0.0D, 0.0D, 0.0D);
         }
-
-    }
-
-    public static boolean isPowerProviderOrWire(IBlockAccess var0, int var1, int var2, int var3) {
-        int var4 = var0.getBlockId(var1, var2, var3);
-        return var4 == Block.redstoneWire.blockID ? true : (var4 == 0 ? false : Block.blocksList[var4].canProvidePower());
     }
 }
