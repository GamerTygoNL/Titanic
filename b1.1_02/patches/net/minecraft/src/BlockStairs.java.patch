--- net/minecraft/src/BlockStairs.java
+++ net/minecraft/src/BlockStairs.java
@@ -4,22 +4,23 @@
 import java.util.Random;
 
 public class BlockStairs extends Block {
+
     private Block modelBlock;
 
-    protected BlockStairs(int var1, Block var2) {
-        super(var1, var2.blockIndexInTexture, var2.blockMaterial);
-        this.modelBlock = var2;
-        this.setHardness(var2.blockHardness);
-        this.setResistance(var2.blockResistance / 3.0F);
-        this.setStepSound(var2.stepSound);
-    }
-
-    public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-        this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-    }
-
-    public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-        return super.getCollisionBoundingBoxFromPool(var1, var2, var3, var4);
+    protected BlockStairs(int i, Block block) {
+        super(i, block.blockIndexInTexture, block.blockMaterial);
+        modelBlock = block;
+        setHardness(block.blockHardness);
+        setResistance(block.blockResistance / 3F);
+        setStepSound(block.stepSound);
+    }
+
+    public void setBlockBoundsBasedOnState(IBlockAccess iblockaccess, int i, int j, int k) {
+        setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+    }
+
+    public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int i, int j, int k) {
+        return super.getCollisionBoundingBoxFromPool(world, i, j, k);
     }
 
     public boolean isOpaqueCube() {
@@ -34,155 +35,150 @@
         return 10;
     }
 
-    public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-        return super.shouldSideBeRendered(var1, var2, var3, var4, var5);
+    public boolean shouldSideBeRendered(IBlockAccess iblockaccess, int i, int j, int k, int l) {
+        return super.shouldSideBeRendered(iblockaccess, i, j, k, l);
     }
 
-    public void getCollidingBoundingBoxes(World var1, int var2, int var3, int var4, AxisAlignedBB var5, ArrayList var6) {
-        int var7 = var1.getBlockMetadata(var2, var3, var4);
-        if(var7 == 0) {
-            this.setBlockBounds(0.0F, 0.0F, 0.0F, 0.5F, 0.5F, 1.0F);
-            super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
-            this.setBlockBounds(0.5F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-            super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
-        } else if(var7 == 1) {
-            this.setBlockBounds(0.0F, 0.0F, 0.0F, 0.5F, 1.0F, 1.0F);
-            super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
-            this.setBlockBounds(0.5F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
-            super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
-        } else if(var7 == 2) {
-            this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 0.5F);
-            super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
-            this.setBlockBounds(0.0F, 0.0F, 0.5F, 1.0F, 1.0F, 1.0F);
-            super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
-        } else if(var7 == 3) {
-            this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.5F);
-            super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
-            this.setBlockBounds(0.0F, 0.0F, 0.5F, 1.0F, 0.5F, 1.0F);
-            super.getCollidingBoundingBoxes(var1, var2, var3, var4, var5, var6);
+    public void getCollidingBoundingBoxes(World world, int i, int j, int k, AxisAlignedBB axisalignedbb, ArrayList arraylist) {
+        int l = world.getBlockMetadata(i, j, k);
+        if (l == 0) {
+            setBlockBounds(0.0F, 0.0F, 0.0F, 0.5F, 0.5F, 1.0F);
+            super.getCollidingBoundingBoxes(world, i, j, k, axisalignedbb, arraylist);
+            setBlockBounds(0.5F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+            super.getCollidingBoundingBoxes(world, i, j, k, axisalignedbb, arraylist);
+        } else if (l == 1) {
+            setBlockBounds(0.0F, 0.0F, 0.0F, 0.5F, 1.0F, 1.0F);
+            super.getCollidingBoundingBoxes(world, i, j, k, axisalignedbb, arraylist);
+            setBlockBounds(0.5F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
+            super.getCollidingBoundingBoxes(world, i, j, k, axisalignedbb, arraylist);
+        } else if (l == 2) {
+            setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 0.5F);
+            super.getCollidingBoundingBoxes(world, i, j, k, axisalignedbb, arraylist);
+            setBlockBounds(0.0F, 0.0F, 0.5F, 1.0F, 1.0F, 1.0F);
+            super.getCollidingBoundingBoxes(world, i, j, k, axisalignedbb, arraylist);
+        } else if (l == 3) {
+            setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.5F);
+            super.getCollidingBoundingBoxes(world, i, j, k, axisalignedbb, arraylist);
+            setBlockBounds(0.0F, 0.0F, 0.5F, 1.0F, 0.5F, 1.0F);
+            super.getCollidingBoundingBoxes(world, i, j, k, axisalignedbb, arraylist);
         }
-
-        this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-    }
-
-    public void randomDisplayTick(World var1, int var2, int var3, int var4, Random var5) {
-        this.modelBlock.randomDisplayTick(var1, var2, var3, var4, var5);
-    }
-
-    public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-        this.modelBlock.onBlockClicked(var1, var2, var3, var4, var5);
-    }
-
-    public void onBlockDestroyedByPlayer(World var1, int var2, int var3, int var4, int var5) {
-        this.modelBlock.onBlockDestroyedByPlayer(var1, var2, var3, var4, var5);
-    }
-
-    public float getBlockBrightness(IBlockAccess var1, int var2, int var3, int var4) {
-        return this.modelBlock.getBlockBrightness(var1, var2, var3, var4);
-    }
-
-    public float getExplosionResistance(Entity var1) {
-        return this.modelBlock.getExplosionResistance(var1);
+        setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+    }
+
+    public void randomDisplayTick(World world, int i, int j, int k, Random random) {
+        modelBlock.randomDisplayTick(world, i, j, k, random);
+    }
+
+    public void onBlockClicked(World world, int i, int j, int k, EntityPlayer entityplayer) {
+        modelBlock.onBlockClicked(world, i, j, k, entityplayer);
+    }
+
+    public void onBlockDestroyedByPlayer(World world, int i, int j, int k, int l) {
+        modelBlock.onBlockDestroyedByPlayer(world, i, j, k, l);
+    }
+
+    public float getBlockBrightness(IBlockAccess iblockaccess, int i, int j, int k) {
+        return modelBlock.getBlockBrightness(iblockaccess, i, j, k);
+    }
+
+    public float getExplosionResistance(Entity entity) {
+        return modelBlock.getExplosionResistance(entity);
     }
 
     public int getRenderBlockPass() {
-        return this.modelBlock.getRenderBlockPass();
-    }
-
-    public int idDropped(int var1, Random var2) {
-        return this.modelBlock.idDropped(var1, var2);
-    }
-
-    public int quantityDropped(Random var1) {
-        return this.modelBlock.quantityDropped(var1);
-    }
-
-    public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-        return this.modelBlock.getBlockTextureFromSideAndMetadata(var1, var2);
-    }
-
-    public int getBlockTextureFromSide(int var1) {
-        return this.modelBlock.getBlockTextureFromSide(var1);
-    }
-
-    public int getBlockTexture(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-        return this.modelBlock.getBlockTexture(var1, var2, var3, var4, var5);
+        return modelBlock.getRenderBlockPass();
+    }
+
+    public int idDropped(int i, Random random) {
+        return modelBlock.idDropped(i, random);
+    }
+
+    public int quantityDropped(Random random) {
+        return modelBlock.quantityDropped(random);
+    }
+
+    public int getBlockTextureFromSideAndMetadata(int i, int j) {
+        return modelBlock.getBlockTextureFromSideAndMetadata(i, j);
+    }
+
+    public int getBlockTextureFromSide(int i) {
+        return modelBlock.getBlockTextureFromSide(i);
+    }
+
+    public int getBlockTexture(IBlockAccess iblockaccess, int i, int j, int k, int l) {
+        return modelBlock.getBlockTexture(iblockaccess, i, j, k, l);
     }
 
     public int tickRate() {
-        return this.modelBlock.tickRate();
-    }
-
-    public AxisAlignedBB getSelectedBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-        return this.modelBlock.getSelectedBoundingBoxFromPool(var1, var2, var3, var4);
-    }
-
-    public void velocityToAddToEntity(World var1, int var2, int var3, int var4, Entity var5, Vec3D var6) {
-        this.modelBlock.velocityToAddToEntity(var1, var2, var3, var4, var5, var6);
+        return modelBlock.tickRate();
+    }
+
+    public AxisAlignedBB getSelectedBoundingBoxFromPool(World world, int i, int j, int k) {
+        return modelBlock.getSelectedBoundingBoxFromPool(world, i, j, k);
+    }
+
+    public void velocityToAddToEntity(World world, int i, int j, int k, Entity entity, Vec3D vec3d) {
+        modelBlock.velocityToAddToEntity(world, i, j, k, entity, vec3d);
     }
 
     public boolean isCollidable() {
-        return this.modelBlock.isCollidable();
-    }
-
-    public boolean canCollideCheck(int var1, boolean var2) {
-        return this.modelBlock.canCollideCheck(var1, var2);
-    }
-
-    public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-        return this.modelBlock.canPlaceBlockAt(var1, var2, var3, var4);
-    }
-
-    public void onBlockAdded(World var1, int var2, int var3, int var4) {
-        this.onNeighborBlockChange(var1, var2, var3, var4, 0);
-        this.modelBlock.onBlockAdded(var1, var2, var3, var4);
-    }
-
-    public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-        this.modelBlock.onBlockRemoval(var1, var2, var3, var4);
-    }
-
-    public void dropBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6) {
-        this.modelBlock.dropBlockAsItemWithChance(var1, var2, var3, var4, var5, var6);
-    }
-
-    public void dropBlockAsItem(World var1, int var2, int var3, int var4, int var5) {
-        this.modelBlock.dropBlockAsItem(var1, var2, var3, var4, var5);
-    }
-
-    public void onEntityWalking(World var1, int var2, int var3, int var4, Entity var5) {
-        this.modelBlock.onEntityWalking(var1, var2, var3, var4, var5);
-    }
-
-    public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-        this.modelBlock.updateTick(var1, var2, var3, var4, var5);
-    }
-
-    public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-        return this.modelBlock.blockActivated(var1, var2, var3, var4, var5);
-    }
-
-    public void onBlockDestroyedByExplosion(World var1, int var2, int var3, int var4) {
-        this.modelBlock.onBlockDestroyedByExplosion(var1, var2, var3, var4);
-    }
-
-    public void onBlockPlacedBy(World var1, int var2, int var3, int var4, EntityLiving var5) {
-        int var6 = MathHelper.floor_double((double)(var5.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3;
-        if(var6 == 0) {
-            var1.setBlockMetadataWithNotify(var2, var3, var4, 2);
-        }
-
-        if(var6 == 1) {
-            var1.setBlockMetadataWithNotify(var2, var3, var4, 1);
-        }
-
-        if(var6 == 2) {
-            var1.setBlockMetadataWithNotify(var2, var3, var4, 3);
-        }
-
-        if(var6 == 3) {
-            var1.setBlockMetadataWithNotify(var2, var3, var4, 0);
-        }
-
+        return modelBlock.isCollidable();
+    }
+
+    public boolean canCollideCheck(int i, boolean flag) {
+        return modelBlock.canCollideCheck(i, flag);
+    }
+
+    public boolean canPlaceBlockAt(World world, int i, int j, int k) {
+        return modelBlock.canPlaceBlockAt(world, i, j, k);
+    }
+
+    public void onBlockAdded(World world, int i, int j, int k) {
+        onNeighborBlockChange(world, i, j, k, 0);
+        modelBlock.onBlockAdded(world, i, j, k);
+    }
+
+    public void onBlockRemoval(World world, int i, int j, int k) {
+        modelBlock.onBlockRemoval(world, i, j, k);
+    }
+
+    public void dropBlockAsItemWithChance(World world, int i, int j, int k, int l, float f) {
+        modelBlock.dropBlockAsItemWithChance(world, i, j, k, l, f);
+    }
+
+    public void dropBlockAsItem(World world, int i, int j, int k, int l) {
+        modelBlock.dropBlockAsItem(world, i, j, k, l);
+    }
+
+    public void onEntityWalking(World world, int i, int j, int k, Entity entity) {
+        modelBlock.onEntityWalking(world, i, j, k, entity);
+    }
+
+    public void updateTick(World world, int i, int j, int k, Random random) {
+        modelBlock.updateTick(world, i, j, k, random);
+    }
+
+    public boolean blockActivated(World world, int i, int j, int k, EntityPlayer entityplayer) {
+        return modelBlock.blockActivated(world, i, j, k, entityplayer);
+    }
+
+    public void onBlockDestroyedByExplosion(World world, int i, int j, int k) {
+        modelBlock.onBlockDestroyedByExplosion(world, i, j, k);
+    }
+
+    public void onBlockPlacedBy(World world, int i, int j, int k, EntityLiving entityliving) {
+        int l = MathHelper.floor_double((double) ((entityliving.rotationYaw * 4F) / 360F) + 0.5D) & 3;
+        if (l == 0) {
+            world.setBlockMetadataWithNotify(i, j, k, 2);
+        }
+        if (l == 1) {
+            world.setBlockMetadataWithNotify(i, j, k, 1);
+        }
+        if (l == 2) {
+            world.setBlockMetadataWithNotify(i, j, k, 3);
+        }
+        if (l == 3) {
+            world.setBlockMetadataWithNotify(i, j, k, 0);
+        }
     }
 }
