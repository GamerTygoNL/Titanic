--- net/minecraft/src/ChunkProviderLoadOrGenerate.java
+++ net/minecraft/src/ChunkProviderLoadOrGenerate.java
@@ -2,197 +2,182 @@
 
 import java.io.IOException;
 
-public class ChunkProviderLoadOrGenerate implements IChunkProvider {
+public class ChunkProviderLoadOrGenerate
+        implements IChunkProvider {
+
+    int lastQueriedChunkXPos;
+    int lastQueriedChunkZPos;
     private Chunk blankChunk;
     private IChunkProvider chunkProvider;
     private IChunkLoader chunkLoader;
-    private Chunk[] chunks = new Chunk[1024];
+    private Chunk chunks[];
     private World worldObj;
-    int lastQueriedChunkXPos = -999999999;
-    int lastQueriedChunkZPos = -999999999;
     private Chunk lastQueriedChunk;
 
-    public ChunkProviderLoadOrGenerate(World var1, IChunkLoader var2, IChunkProvider var3) {
-        this.blankChunk = new Chunk(var1, new byte[-Short.MIN_VALUE], 0, 0);
-        this.blankChunk.field_1524_q = true;
-        this.blankChunk.neverSave = true;
-        this.worldObj = var1;
-        this.chunkLoader = var2;
-        this.chunkProvider = var3;
+    public ChunkProviderLoadOrGenerate(World world, IChunkLoader ichunkloader, IChunkProvider ichunkprovider) {
+        chunks = new Chunk[1024];
+        lastQueriedChunkXPos = 0xc4653601;
+        lastQueriedChunkZPos = 0xc4653601;
+        blankChunk = new Chunk(world, new byte[32768], 0, 0);
+        blankChunk.field_1524_q = true;
+        blankChunk.neverSave = true;
+        worldObj = world;
+        chunkLoader = ichunkloader;
+        chunkProvider = ichunkprovider;
     }
 
-    public boolean chunkExists(int var1, int var2) {
-        if(var1 == this.lastQueriedChunkXPos && var2 == this.lastQueriedChunkZPos && this.lastQueriedChunk != null) {
+    public boolean chunkExists(int i, int j) {
+        if (i == lastQueriedChunkXPos && j == lastQueriedChunkZPos && lastQueriedChunk != null) {
             return true;
         } else {
-            int var3 = var1 & 31;
-            int var4 = var2 & 31;
-            int var5 = var3 + var4 * 32;
-            return this.chunks[var5] != null && (this.chunks[var5] == this.blankChunk || this.chunks[var5].isAtLocation(var1, var2));
-        }
-    }
-
-    public Chunk provideChunk(int var1, int var2) {
-        if(var1 == this.lastQueriedChunkXPos && var2 == this.lastQueriedChunkZPos && this.lastQueriedChunk != null) {
-            return this.lastQueriedChunk;
-        } else {
-            int var3 = var1 & 31;
-            int var4 = var2 & 31;
-            int var5 = var3 + var4 * 32;
-            if(!this.chunkExists(var1, var2)) {
-                if(this.chunks[var5] != null) {
-                    this.chunks[var5].onChunkUnload();
-                    this.saveChunk(this.chunks[var5]);
-                    this.saveExtraChunkData(this.chunks[var5]);
-                }
-
-                Chunk var6 = this.func_542_c(var1, var2);
-                if(var6 == null) {
-                    if(this.chunkProvider == null) {
-                        var6 = this.blankChunk;
-                    } else {
-                        var6 = this.chunkProvider.provideChunk(var1, var2);
-                    }
-                }
-
-                this.chunks[var5] = var6;
-                var6.func_4143_d();
-                if(this.chunks[var5] != null) {
-                    this.chunks[var5].onChunkLoad();
-                }
-
-                if(!this.chunks[var5].isTerrainPopulated && this.chunkExists(var1 + 1, var2 + 1) && this.chunkExists(var1, var2 + 1) && this.chunkExists(var1 + 1, var2)) {
-                    this.populate(this, var1, var2);
-                }
-
-                if(this.chunkExists(var1 - 1, var2) && !this.provideChunk(var1 - 1, var2).isTerrainPopulated && this.chunkExists(var1 - 1, var2 + 1) && this.chunkExists(var1, var2 + 1) && this.chunkExists(var1 - 1, var2)) {
-                    this.populate(this, var1 - 1, var2);
-                }
-
-                if(this.chunkExists(var1, var2 - 1) && !this.provideChunk(var1, var2 - 1).isTerrainPopulated && this.chunkExists(var1 + 1, var2 - 1) && this.chunkExists(var1, var2 - 1) && this.chunkExists(var1 + 1, var2)) {
-                    this.populate(this, var1, var2 - 1);
-                }
-
-                if(this.chunkExists(var1 - 1, var2 - 1) && !this.provideChunk(var1 - 1, var2 - 1).isTerrainPopulated && this.chunkExists(var1 - 1, var2 - 1) && this.chunkExists(var1, var2 - 1) && this.chunkExists(var1 - 1, var2)) {
-                    this.populate(this, var1 - 1, var2 - 1);
-                }
-            }
-
-            this.lastQueriedChunkXPos = var1;
-            this.lastQueriedChunkZPos = var2;
-            this.lastQueriedChunk = this.chunks[var5];
-            return this.chunks[var5];
-        }
-    }
-
-    private Chunk func_542_c(int var1, int var2) {
-        if(this.chunkLoader == null) {
+            int k = i & 0x1f;
+            int l = j & 0x1f;
+            int i1 = k + l * 32;
+            return chunks[i1] != null && (chunks[i1] == blankChunk || chunks[i1].isAtLocation(i, j));
+        }
+    }
+
+    public Chunk provideChunk(int i, int j) {
+        if (i == lastQueriedChunkXPos && j == lastQueriedChunkZPos && lastQueriedChunk != null) {
+            return lastQueriedChunk;
+        }
+        int k = i & 0x1f;
+        int l = j & 0x1f;
+        int i1 = k + l * 32;
+        if (!chunkExists(i, j)) {
+            if (chunks[i1] != null) {
+                chunks[i1].onChunkUnload();
+                saveChunk(chunks[i1]);
+                saveExtraChunkData(chunks[i1]);
+            }
+            Chunk chunk = func_542_c(i, j);
+            if (chunk == null) {
+                if (chunkProvider == null) {
+                    chunk = blankChunk;
+                } else {
+                    chunk = chunkProvider.provideChunk(i, j);
+                }
+            }
+            chunks[i1] = chunk;
+            chunk.func_4143_d();
+            if (chunks[i1] != null) {
+                chunks[i1].onChunkLoad();
+            }
+            if (!chunks[i1].isTerrainPopulated && chunkExists(i + 1, j + 1) && chunkExists(i, j + 1) && chunkExists(i + 1, j)) {
+                populate(this, i, j);
+            }
+            if (chunkExists(i - 1, j) && !provideChunk(i - 1, j).isTerrainPopulated && chunkExists(i - 1, j + 1) && chunkExists(i, j + 1) && chunkExists(i - 1, j)) {
+                populate(this, i - 1, j);
+            }
+            if (chunkExists(i, j - 1) && !provideChunk(i, j - 1).isTerrainPopulated && chunkExists(i + 1, j - 1) && chunkExists(i, j - 1) && chunkExists(i + 1, j)) {
+                populate(this, i, j - 1);
+            }
+            if (chunkExists(i - 1, j - 1) && !provideChunk(i - 1, j - 1).isTerrainPopulated && chunkExists(i - 1, j - 1) && chunkExists(i, j - 1) && chunkExists(i - 1, j)) {
+                populate(this, i - 1, j - 1);
+            }
+        }
+        lastQueriedChunkXPos = i;
+        lastQueriedChunkZPos = j;
+        lastQueriedChunk = chunks[i1];
+        return chunks[i1];
+    }
+
+    private Chunk func_542_c(int i, int j) {
+        if (chunkLoader == null) {
             return null;
-        } else {
-            try {
-                Chunk var3 = this.chunkLoader.loadChunk(this.worldObj, var1, var2);
-                if(var3 != null) {
-                    var3.lastSaveTime = this.worldObj.worldTime;
-                }
-
-                return var3;
-            } catch (Exception var4) {
-                var4.printStackTrace();
-                return null;
-            }
-        }
-    }
-
-    private void saveExtraChunkData(Chunk var1) {
-        if(this.chunkLoader != null) {
-            try {
-                this.chunkLoader.saveExtraChunkData(this.worldObj, var1);
-            } catch (Exception var3) {
-                var3.printStackTrace();
-            }
-
-        }
-    }
-
-    private void saveChunk(Chunk var1) {
-        if(this.chunkLoader != null) {
-            try {
-                var1.lastSaveTime = this.worldObj.worldTime;
-                this.chunkLoader.saveChunk(this.worldObj, var1);
-            } catch (IOException var3) {
-                var3.printStackTrace();
-            }
-
-        }
-    }
-
-    public void populate(IChunkProvider var1, int var2, int var3) {
-        Chunk var4 = this.provideChunk(var2, var3);
-        if(!var4.isTerrainPopulated) {
-            var4.isTerrainPopulated = true;
-            if(this.chunkProvider != null) {
-                this.chunkProvider.populate(var1, var2, var3);
-                var4.setChunkModified();
-            }
-        }
-
-    }
-
-    public boolean saveChunks(boolean var1, IProgressUpdate var2) {
-        int var3 = 0;
-        int var4 = 0;
-        int var5;
-        if(var2 != null) {
-            for(var5 = 0; var5 < this.chunks.length; ++var5) {
-                if(this.chunks[var5] != null && this.chunks[var5].needsSaving(var1)) {
-                    ++var4;
-                }
-            }
-        }
-
-        var5 = 0;
-
-        for(int var6 = 0; var6 < this.chunks.length; ++var6) {
-            if(this.chunks[var6] != null) {
-                if(var1 && !this.chunks[var6].neverSave) {
-                    this.saveExtraChunkData(this.chunks[var6]);
-                }
-
-                if(this.chunks[var6].needsSaving(var1)) {
-                    this.saveChunk(this.chunks[var6]);
-                    this.chunks[var6].isModified = false;
-                    ++var3;
-                    if(var3 == 2 && !var1) {
-                        return false;
-                    }
-
-                    if(var2 != null) {
-                        ++var5;
-                        if(var5 % 10 == 0) {
-                            var2.setLoadingProgress(var5 * 100 / var4);
-                        }
-                    }
-                }
-            }
-        }
-
-        if(var1) {
-            if(this.chunkLoader == null) {
+        }
+        try {
+            Chunk chunk = chunkLoader.loadChunk(worldObj, i, j);
+            if (chunk != null) {
+                chunk.lastSaveTime = worldObj.worldTime;
+            }
+            return chunk;
+        } catch (Exception exception) {
+            exception.printStackTrace();
+        }
+        return null;
+    }
+
+    private void saveExtraChunkData(Chunk chunk) {
+        if (chunkLoader == null) {
+            return;
+        }
+        try {
+            chunkLoader.saveExtraChunkData(worldObj, chunk);
+        } catch (Exception exception) {
+            exception.printStackTrace();
+        }
+    }
+
+    private void saveChunk(Chunk chunk) {
+        if (chunkLoader == null) {
+            return;
+        }
+        try {
+            chunk.lastSaveTime = worldObj.worldTime;
+            chunkLoader.saveChunk(worldObj, chunk);
+        } catch (IOException ioexception) {
+            ioexception.printStackTrace();
+        }
+    }
+
+    public void populate(IChunkProvider ichunkprovider, int i, int j) {
+        Chunk chunk = provideChunk(i, j);
+        if (!chunk.isTerrainPopulated) {
+            chunk.isTerrainPopulated = true;
+            if (chunkProvider != null) {
+                chunkProvider.populate(ichunkprovider, i, j);
+                chunk.setChunkModified();
+            }
+        }
+    }
+
+    public boolean saveChunks(boolean flag, IProgressUpdate iprogressupdate) {
+        int i = 0;
+        int j = 0;
+        if (iprogressupdate != null) {
+            for (int k = 0; k < chunks.length; k++) {
+                if (chunks[k] != null && chunks[k].needsSaving(flag)) {
+                    j++;
+                }
+            }
+
+        }
+        int l = 0;
+        for (int i1 = 0; i1 < chunks.length; i1++) {
+            if (chunks[i1] == null) {
+                continue;
+            }
+            if (flag && !chunks[i1].neverSave) {
+                saveExtraChunkData(chunks[i1]);
+            }
+            if (!chunks[i1].needsSaving(flag)) {
+                continue;
+            }
+            saveChunk(chunks[i1]);
+            chunks[i1].isModified = false;
+            if (++i == 2 && !flag) {
+                return false;
+            }
+            if (iprogressupdate != null && ++l % 10 == 0) {
+                iprogressupdate.setLoadingProgress((l * 100) / j);
+            }
+        }
+
+        if (flag) {
+            if (chunkLoader == null) {
                 return true;
             }
-
-            this.chunkLoader.saveExtraData();
+            chunkLoader.saveExtraData();
         }
-
         return true;
     }
 
     public boolean func_532_a() {
-        if(this.chunkLoader != null) {
-            this.chunkLoader.func_814_a();
+        if (chunkLoader != null) {
+            chunkLoader.func_814_a();
         }
-
-        return this.chunkProvider.func_532_a();
+        return chunkProvider.func_532_a();
     }
 
     public boolean func_536_b() {
