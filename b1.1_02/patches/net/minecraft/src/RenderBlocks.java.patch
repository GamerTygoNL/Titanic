--- net/minecraft/src/RenderBlocks.java
+++ net/minecraft/src/RenderBlocks.java
@@ -1,1908 +1,1799 @@
 package net.minecraft.src;
 
+import cc.noxiuam.titanic.Ref;
+import cc.noxiuam.titanic.event.impl.world.block.BlockRenderEvent;
 import org.lwjgl.opengl.GL11;
 
 public class RenderBlocks {
+
+    private final boolean renderAllFaces;
     private IBlockAccess blockAccess;
-    private int overrideBlockTexture = -1;
-    private boolean flipTexture = false;
-    private boolean renderAllFaces = false;
+    private int overrideBlockTexture;
+    private boolean flipTexture;
 
-    public RenderBlocks(IBlockAccess var1) {
-        this.blockAccess = var1;
+    public RenderBlocks(IBlockAccess iblockaccess) {
+        overrideBlockTexture = -1;
+        flipTexture = false;
+        renderAllFaces = false;
+        blockAccess = iblockaccess;
     }
 
     public RenderBlocks() {
-    }
-
-    public void renderBlockUsingTexture(Block var1, int var2, int var3, int var4, int var5) {
-        this.overrideBlockTexture = var5;
-        this.renderBlockByRenderType(var1, var2, var3, var4);
-        this.overrideBlockTexture = -1;
-    }
-
-    public boolean renderBlockByRenderType(Block var1, int var2, int var3, int var4) {
-        int var5 = var1.getRenderType();
-        var1.setBlockBoundsBasedOnState(this.blockAccess, var2, var3, var4);
-        return var5 == 0 ? this.renderStandardBlock(var1, var2, var3, var4) : (var5 == 4 ? this.renderBlockFluids(var1, var2, var3, var4) : (var5 == 13 ? this.renderBlockCactus(var1, var2, var3, var4) : (var5 == 1 ? this.renderBlockReed(var1, var2, var3, var4) : (var5 == 6 ? this.renderBlockCrops(var1, var2, var3, var4) : (var5 == 2 ? this.renderBlockTorch(var1, var2, var3, var4) : (var5 == 3 ? this.renderBlockFire(var1, var2, var3, var4) : (var5 == 5 ? this.renderBlockRedstoneWire(var1, var2, var3, var4) : (var5 == 8 ? this.renderBlockLadder(var1, var2, var3, var4) : (var5 == 7 ? this.renderBlockDoor(var1, var2, var3, var4) : (var5 == 9 ? this.renderBlockMinecartTrack(var1, var2, var3, var4) : (var5 == 10 ? this.renderBlockStairs(var1, var2, var3, var4) : (var5 == 11 ? this.renderBlockFence(var1, var2, var3, var4) : (var5 == 12 ? this.renderBlockLever(var1, var2, var3, var4) : false)))))))))))));
-    }
-
-    public boolean renderBlockTorch(Block var1, int var2, int var3, int var4) {
-        int var5 = this.blockAccess.getBlockMetadata(var2, var3, var4);
-        Tessellator var6 = Tessellator.instance;
-        float var7 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-        if(Block.lightValue[var1.blockID] > 0) {
-            var7 = 1.0F;
-        }
-
-        var6.setColorOpaque_F(var7, var7, var7);
-        double var8 = (double)0.4F;
-        double var10 = 0.5D - var8;
-        double var12 = (double)0.2F;
-        if(var5 == 1) {
-            this.renderTorchAtAngle(var1, (double)var2 - var10, (double)var3 + var12, (double)var4, -var8, 0.0D);
-        } else if(var5 == 2) {
-            this.renderTorchAtAngle(var1, (double)var2 + var10, (double)var3 + var12, (double)var4, var8, 0.0D);
-        } else if(var5 == 3) {
-            this.renderTorchAtAngle(var1, (double)var2, (double)var3 + var12, (double)var4 - var10, 0.0D, -var8);
-        } else if(var5 == 4) {
-            this.renderTorchAtAngle(var1, (double)var2, (double)var3 + var12, (double)var4 + var10, 0.0D, var8);
-        } else {
-            this.renderTorchAtAngle(var1, (double)var2, (double)var3, (double)var4, 0.0D, 0.0D);
-        }
-
-        return true;
-    }
-
-    public boolean renderBlockLever(Block var1, int var2, int var3, int var4) {
-        int var5 = this.blockAccess.getBlockMetadata(var2, var3, var4);
-        int var6 = var5 & 7;
-        boolean var7 = (var5 & 8) > 0;
-        Tessellator var8 = Tessellator.instance;
-        boolean var9 = this.overrideBlockTexture >= 0;
-        if(!var9) {
-            this.overrideBlockTexture = Block.cobblestone.blockIndexInTexture;
-        }
-
-        float var10 = 0.25F;
-        float var11 = 3.0F / 16.0F;
-        float var12 = 3.0F / 16.0F;
-        if(var6 == 5) {
-            var1.setBlockBounds(0.5F - var11, 0.0F, 0.5F - var10, 0.5F + var11, var12, 0.5F + var10);
-        } else if(var6 == 6) {
-            var1.setBlockBounds(0.5F - var10, 0.0F, 0.5F - var11, 0.5F + var10, var12, 0.5F + var11);
-        } else if(var6 == 4) {
-            var1.setBlockBounds(0.5F - var11, 0.5F - var10, 1.0F - var12, 0.5F + var11, 0.5F + var10, 1.0F);
-        } else if(var6 == 3) {
-            var1.setBlockBounds(0.5F - var11, 0.5F - var10, 0.0F, 0.5F + var11, 0.5F + var10, var12);
-        } else if(var6 == 2) {
-            var1.setBlockBounds(1.0F - var12, 0.5F - var10, 0.5F - var11, 1.0F, 0.5F + var10, 0.5F + var11);
-        } else if(var6 == 1) {
-            var1.setBlockBounds(0.0F, 0.5F - var10, 0.5F - var11, var12, 0.5F + var10, 0.5F + var11);
-        }
-
-        this.renderStandardBlock(var1, var2, var3, var4);
-        if(!var9) {
-            this.overrideBlockTexture = -1;
-        }
-
-        float var13 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-        if(Block.lightValue[var1.blockID] > 0) {
-            var13 = 1.0F;
-        }
-
-        var8.setColorOpaque_F(var13, var13, var13);
-        int var14 = var1.getBlockTextureFromSide(0);
-        if(this.overrideBlockTexture >= 0) {
-            var14 = this.overrideBlockTexture;
-        }
-
-        int var15 = (var14 & 15) << 4;
-        int var16 = var14 & 240;
-        float var17 = (float)var15 / 256.0F;
-        float var18 = ((float)var15 + 15.99F) / 256.0F;
-        float var19 = (float)var16 / 256.0F;
-        float var20 = ((float)var16 + 15.99F) / 256.0F;
-        Vec3D[] var21 = new Vec3D[8];
-        float var22 = 1.0F / 16.0F;
-        float var23 = 1.0F / 16.0F;
-        float var24 = 10.0F / 16.0F;
-        var21[0] = Vec3D.createVector((double)(-var22), 0.0D, (double)(-var23));
-        var21[1] = Vec3D.createVector((double)var22, 0.0D, (double)(-var23));
-        var21[2] = Vec3D.createVector((double)var22, 0.0D, (double)var23);
-        var21[3] = Vec3D.createVector((double)(-var22), 0.0D, (double)var23);
-        var21[4] = Vec3D.createVector((double)(-var22), (double)var24, (double)(-var23));
-        var21[5] = Vec3D.createVector((double)var22, (double)var24, (double)(-var23));
-        var21[6] = Vec3D.createVector((double)var22, (double)var24, (double)var23);
-        var21[7] = Vec3D.createVector((double)(-var22), (double)var24, (double)var23);
-
-        for(int var25 = 0; var25 < 8; ++var25) {
-            if(var7) {
-                var21[var25].zCoord -= 1.0D / 16.0D;
-                var21[var25].rotateAroundX((float)Math.PI * 2.0F / 9.0F);
-            } else {
-                var21[var25].zCoord += 1.0D / 16.0D;
-                var21[var25].rotateAroundX(-((float)Math.PI * 2.0F / 9.0F));
-            }
-
-            if(var6 == 6) {
-                var21[var25].rotateAroundY((float)Math.PI * 0.5F);
-            }
-
-            if(var6 < 5) {
-                var21[var25].yCoord -= 0.375D;
-                var21[var25].rotateAroundX((float)Math.PI * 0.5F);
-                if(var6 == 4) {
-                    var21[var25].rotateAroundY(0.0F);
-                }
-
-                if(var6 == 3) {
-                    var21[var25].rotateAroundY((float)Math.PI);
-                }
-
-                if(var6 == 2) {
-                    var21[var25].rotateAroundY((float)Math.PI * 0.5F);
-                }
-
-                if(var6 == 1) {
-                    var21[var25].rotateAroundY((float)Math.PI * -0.5F);
-                }
-
-                var21[var25].xCoord += (double)var2 + 0.5D;
-                var21[var25].yCoord += (double)((float)var3 + 0.5F);
-                var21[var25].zCoord += (double)var4 + 0.5D;
-            } else {
-                var21[var25].xCoord += (double)var2 + 0.5D;
-                var21[var25].yCoord += (double)((float)var3 + 2.0F / 16.0F);
-                var21[var25].zCoord += (double)var4 + 0.5D;
-            }
-        }
-
-        Vec3D var30 = null;
-        Vec3D var26 = null;
-        Vec3D var27 = null;
-        Vec3D var28 = null;
-
-        for(int var29 = 0; var29 < 6; ++var29) {
-            if(var29 == 0) {
-                var17 = (float)(var15 + 7) / 256.0F;
-                var18 = ((float)(var15 + 9) - 0.01F) / 256.0F;
-                var19 = (float)(var16 + 6) / 256.0F;
-                var20 = ((float)(var16 + 8) - 0.01F) / 256.0F;
-            } else if(var29 == 2) {
-                var17 = (float)(var15 + 7) / 256.0F;
-                var18 = ((float)(var15 + 9) - 0.01F) / 256.0F;
-                var19 = (float)(var16 + 6) / 256.0F;
-                var20 = ((float)(var16 + 16) - 0.01F) / 256.0F;
-            }
-
-            if(var29 == 0) {
-                var30 = var21[0];
-                var26 = var21[1];
-                var27 = var21[2];
-                var28 = var21[3];
-            } else if(var29 == 1) {
-                var30 = var21[7];
-                var26 = var21[6];
-                var27 = var21[5];
-                var28 = var21[4];
-            } else if(var29 == 2) {
-                var30 = var21[1];
-                var26 = var21[0];
-                var27 = var21[4];
-                var28 = var21[5];
-            } else if(var29 == 3) {
-                var30 = var21[2];
-                var26 = var21[1];
-                var27 = var21[5];
-                var28 = var21[6];
-            } else if(var29 == 4) {
-                var30 = var21[3];
-                var26 = var21[2];
-                var27 = var21[6];
-                var28 = var21[7];
-            } else if(var29 == 5) {
-                var30 = var21[0];
-                var26 = var21[3];
-                var27 = var21[7];
-                var28 = var21[4];
-            }
-
-            var8.addVertexWithUV(var30.xCoord, var30.yCoord, var30.zCoord, (double)var17, (double)var20);
-            var8.addVertexWithUV(var26.xCoord, var26.yCoord, var26.zCoord, (double)var18, (double)var20);
-            var8.addVertexWithUV(var27.xCoord, var27.yCoord, var27.zCoord, (double)var18, (double)var19);
-            var8.addVertexWithUV(var28.xCoord, var28.yCoord, var28.zCoord, (double)var17, (double)var19);
-        }
-
-        return true;
-    }
-
-    public boolean renderBlockFire(Block var1, int var2, int var3, int var4) {
-        Tessellator var5 = Tessellator.instance;
-        int var6 = var1.getBlockTextureFromSide(0);
-        if(this.overrideBlockTexture >= 0) {
-            var6 = this.overrideBlockTexture;
-        }
-
-        float var7 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-        var5.setColorOpaque_F(var7, var7, var7);
-        int var8 = (var6 & 15) << 4;
-        int var9 = var6 & 240;
-        double var10 = (double)((float)var8 / 256.0F);
-        double var12 = (double)(((float)var8 + 15.99F) / 256.0F);
-        double var14 = (double)((float)var9 / 256.0F);
-        double var16 = (double)(((float)var9 + 15.99F) / 256.0F);
-        float var18 = 1.4F;
-        double var21;
-        double var23;
-        double var25;
-        double var27;
-        double var29;
-        double var31;
-        double var33;
-        if(!this.blockAccess.isBlockOpaqueCube(var2, var3 - 1, var4) && !Block.fire.canBlockCatchFire(this.blockAccess, var2, var3 - 1, var4)) {
-            float var37 = 0.2F;
-            float var20 = 1.0F / 16.0F;
-            if((var2 + var3 + var4 & 1) == 1) {
-                var10 = (double)((float)var8 / 256.0F);
-                var12 = (double)(((float)var8 + 15.99F) / 256.0F);
-                var14 = (double)((float)(var9 + 16) / 256.0F);
-                var16 = (double)(((float)var9 + 15.99F + 16.0F) / 256.0F);
-            }
-
-            if((var2 / 2 + var3 / 2 + var4 / 2 & 1) == 1) {
-                var21 = var12;
-                var12 = var10;
-                var10 = var21;
-            }
-
-            if(Block.fire.canBlockCatchFire(this.blockAccess, var2 - 1, var3, var4)) {
-                var5.addVertexWithUV((double)((float)var2 + var37), (double)((float)var3 + var18 + var20), (double)(var4 + 1), var12, var14);
-                var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 1), var12, var16);
-                var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var10, var16);
-                var5.addVertexWithUV((double)((float)var2 + var37), (double)((float)var3 + var18 + var20), (double)(var4 + 0), var10, var14);
-                var5.addVertexWithUV((double)((float)var2 + var37), (double)((float)var3 + var18 + var20), (double)(var4 + 0), var10, var14);
-                var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var10, var16);
-                var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 1), var12, var16);
-                var5.addVertexWithUV((double)((float)var2 + var37), (double)((float)var3 + var18 + var20), (double)(var4 + 1), var12, var14);
-            }
-
-            if(Block.fire.canBlockCatchFire(this.blockAccess, var2 + 1, var3, var4)) {
-                var5.addVertexWithUV((double)((float)(var2 + 1) - var37), (double)((float)var3 + var18 + var20), (double)(var4 + 0), var10, var14);
-                var5.addVertexWithUV((double)(var2 + 1 - 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var10, var16);
-                var5.addVertexWithUV((double)(var2 + 1 - 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 1), var12, var16);
-                var5.addVertexWithUV((double)((float)(var2 + 1) - var37), (double)((float)var3 + var18 + var20), (double)(var4 + 1), var12, var14);
-                var5.addVertexWithUV((double)((float)(var2 + 1) - var37), (double)((float)var3 + var18 + var20), (double)(var4 + 1), var12, var14);
-                var5.addVertexWithUV((double)(var2 + 1 - 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 1), var12, var16);
-                var5.addVertexWithUV((double)(var2 + 1 - 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var10, var16);
-                var5.addVertexWithUV((double)((float)(var2 + 1) - var37), (double)((float)var3 + var18 + var20), (double)(var4 + 0), var10, var14);
-            }
-
-            if(Block.fire.canBlockCatchFire(this.blockAccess, var2, var3, var4 - 1)) {
-                var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18 + var20), (double)((float)var4 + var37), var12, var14);
-                var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var12, var16);
-                var5.addVertexWithUV((double)(var2 + 1), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var10, var16);
-                var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18 + var20), (double)((float)var4 + var37), var10, var14);
-                var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18 + var20), (double)((float)var4 + var37), var10, var14);
-                var5.addVertexWithUV((double)(var2 + 1), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var10, var16);
-                var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 0), var12, var16);
-                var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18 + var20), (double)((float)var4 + var37), var12, var14);
-            }
-
-            if(Block.fire.canBlockCatchFire(this.blockAccess, var2, var3, var4 + 1)) {
-                var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18 + var20), (double)((float)(var4 + 1) - var37), var10, var14);
-                var5.addVertexWithUV((double)(var2 + 1), (double)((float)(var3 + 0) + var20), (double)(var4 + 1 - 0), var10, var16);
-                var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 1 - 0), var12, var16);
-                var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18 + var20), (double)((float)(var4 + 1) - var37), var12, var14);
-                var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18 + var20), (double)((float)(var4 + 1) - var37), var12, var14);
-                var5.addVertexWithUV((double)(var2 + 0), (double)((float)(var3 + 0) + var20), (double)(var4 + 1 - 0), var12, var16);
-                var5.addVertexWithUV((double)(var2 + 1), (double)((float)(var3 + 0) + var20), (double)(var4 + 1 - 0), var10, var16);
-                var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18 + var20), (double)((float)(var4 + 1) - var37), var10, var14);
-            }
-
-            if(Block.fire.canBlockCatchFire(this.blockAccess, var2, var3 + 1, var4)) {
-                var21 = (double)var2 + 0.5D + 0.5D;
-                var23 = (double)var2 + 0.5D - 0.5D;
-                var25 = (double)var4 + 0.5D + 0.5D;
-                var27 = (double)var4 + 0.5D - 0.5D;
-                var29 = (double)var2 + 0.5D - 0.5D;
-                var31 = (double)var2 + 0.5D + 0.5D;
-                var33 = (double)var4 + 0.5D - 0.5D;
-                double var35 = (double)var4 + 0.5D + 0.5D;
-                var10 = (double)((float)var8 / 256.0F);
-                var12 = (double)(((float)var8 + 15.99F) / 256.0F);
-                var14 = (double)((float)var9 / 256.0F);
-                var16 = (double)(((float)var9 + 15.99F) / 256.0F);
-                ++var3;
-                var18 = -0.2F;
-                if((var2 + var3 + var4 & 1) == 0) {
-                    var5.addVertexWithUV(var29, (double)((float)var3 + var18), (double)(var4 + 0), var12, var14);
-                    var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 0), var12, var16);
-                    var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 1), var10, var16);
-                    var5.addVertexWithUV(var29, (double)((float)var3 + var18), (double)(var4 + 1), var10, var14);
-                    var10 = (double)((float)var8 / 256.0F);
-                    var12 = (double)(((float)var8 + 15.99F) / 256.0F);
-                    var14 = (double)((float)(var9 + 16) / 256.0F);
-                    var16 = (double)(((float)var9 + 15.99F + 16.0F) / 256.0F);
-                    var5.addVertexWithUV(var31, (double)((float)var3 + var18), (double)(var4 + 1), var12, var14);
-                    var5.addVertexWithUV(var23, (double)(var3 + 0), (double)(var4 + 1), var12, var16);
-                    var5.addVertexWithUV(var23, (double)(var3 + 0), (double)(var4 + 0), var10, var16);
-                    var5.addVertexWithUV(var31, (double)((float)var3 + var18), (double)(var4 + 0), var10, var14);
-                } else {
-                    var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18), var35, var12, var14);
-                    var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var27, var12, var16);
-                    var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var27, var10, var16);
-                    var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var35, var10, var14);
-                    var10 = (double)((float)var8 / 256.0F);
-                    var12 = (double)(((float)var8 + 15.99F) / 256.0F);
-                    var14 = (double)((float)(var9 + 16) / 256.0F);
-                    var16 = (double)(((float)var9 + 15.99F + 16.0F) / 256.0F);
-                    var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var33, var12, var14);
-                    var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var25, var12, var16);
-                    var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var25, var10, var16);
-                    var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18), var33, var10, var14);
-                }
-            }
-        } else {
-            double var19 = (double)var2 + 0.5D + 0.2D;
-            var21 = (double)var2 + 0.5D - 0.2D;
-            var23 = (double)var4 + 0.5D + 0.2D;
-            var25 = (double)var4 + 0.5D - 0.2D;
-            var27 = (double)var2 + 0.5D - 0.3D;
-            var29 = (double)var2 + 0.5D + 0.3D;
-            var31 = (double)var4 + 0.5D - 0.3D;
-            var33 = (double)var4 + 0.5D + 0.3D;
-            var5.addVertexWithUV(var27, (double)((float)var3 + var18), (double)(var4 + 1), var12, var14);
-            var5.addVertexWithUV(var19, (double)(var3 + 0), (double)(var4 + 1), var12, var16);
-            var5.addVertexWithUV(var19, (double)(var3 + 0), (double)(var4 + 0), var10, var16);
-            var5.addVertexWithUV(var27, (double)((float)var3 + var18), (double)(var4 + 0), var10, var14);
-            var5.addVertexWithUV(var29, (double)((float)var3 + var18), (double)(var4 + 0), var12, var14);
-            var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 0), var12, var16);
-            var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 1), var10, var16);
-            var5.addVertexWithUV(var29, (double)((float)var3 + var18), (double)(var4 + 1), var10, var14);
-            var10 = (double)((float)var8 / 256.0F);
-            var12 = (double)(((float)var8 + 15.99F) / 256.0F);
-            var14 = (double)((float)(var9 + 16) / 256.0F);
-            var16 = (double)(((float)var9 + 15.99F + 16.0F) / 256.0F);
-            var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var33, var12, var14);
-            var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var25, var12, var16);
-            var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var25, var10, var16);
-            var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18), var33, var10, var14);
-            var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18), var31, var12, var14);
-            var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var23, var12, var16);
-            var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var23, var10, var16);
-            var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var31, var10, var14);
-            var19 = (double)var2 + 0.5D - 0.5D;
-            var21 = (double)var2 + 0.5D + 0.5D;
-            var23 = (double)var4 + 0.5D - 0.5D;
-            var25 = (double)var4 + 0.5D + 0.5D;
-            var27 = (double)var2 + 0.5D - 0.4D;
-            var29 = (double)var2 + 0.5D + 0.4D;
-            var31 = (double)var4 + 0.5D - 0.4D;
-            var33 = (double)var4 + 0.5D + 0.4D;
-            var5.addVertexWithUV(var27, (double)((float)var3 + var18), (double)(var4 + 0), var10, var14);
-            var5.addVertexWithUV(var19, (double)(var3 + 0), (double)(var4 + 0), var10, var16);
-            var5.addVertexWithUV(var19, (double)(var3 + 0), (double)(var4 + 1), var12, var16);
-            var5.addVertexWithUV(var27, (double)((float)var3 + var18), (double)(var4 + 1), var12, var14);
-            var5.addVertexWithUV(var29, (double)((float)var3 + var18), (double)(var4 + 1), var10, var14);
-            var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 1), var10, var16);
-            var5.addVertexWithUV(var21, (double)(var3 + 0), (double)(var4 + 0), var12, var16);
-            var5.addVertexWithUV(var29, (double)((float)var3 + var18), (double)(var4 + 0), var12, var14);
-            var10 = (double)((float)var8 / 256.0F);
-            var12 = (double)(((float)var8 + 15.99F) / 256.0F);
-            var14 = (double)((float)var9 / 256.0F);
-            var16 = (double)(((float)var9 + 15.99F) / 256.0F);
-            var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18), var33, var10, var14);
-            var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var25, var10, var16);
-            var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var25, var12, var16);
-            var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var33, var12, var14);
-            var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var18), var31, var10, var14);
-            var5.addVertexWithUV((double)(var2 + 1), (double)(var3 + 0), var23, var10, var16);
-            var5.addVertexWithUV((double)(var2 + 0), (double)(var3 + 0), var23, var12, var16);
-            var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var18), var31, var12, var14);
-        }
-
-        return true;
-    }
-
-    public boolean renderBlockRedstoneWire(Block var1, int var2, int var3, int var4) {
-        Tessellator var5 = Tessellator.instance;
-        int var6 = var1.getBlockTextureFromSideAndMetadata(1, this.blockAccess.getBlockMetadata(var2, var3, var4));
-        if(this.overrideBlockTexture >= 0) {
-            var6 = this.overrideBlockTexture;
-        }
-
-        float var7 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-        var5.setColorOpaque_F(var7, var7, var7);
-        int var8 = (var6 & 15) << 4;
-        int var9 = var6 & 240;
-        double var10 = (double)((float)var8 / 256.0F);
-        double var12 = (double)(((float)var8 + 15.99F) / 256.0F);
-        double var14 = (double)((float)var9 / 256.0F);
-        double var16 = (double)(((float)var9 + 15.99F) / 256.0F);
-        float var18 = 0.0F;
-        float var19 = 0.03125F;
-        boolean var20 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 - 1, var3, var4) || !this.blockAccess.isBlockOpaqueCube(var2 - 1, var3, var4) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 - 1, var3 - 1, var4);
-        boolean var21 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 + 1, var3, var4) || !this.blockAccess.isBlockOpaqueCube(var2 + 1, var3, var4) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 + 1, var3 - 1, var4);
-        boolean var22 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2, var3, var4 - 1) || !this.blockAccess.isBlockOpaqueCube(var2, var3, var4 - 1) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2, var3 - 1, var4 - 1);
-        boolean var23 = BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2, var3, var4 + 1) || !this.blockAccess.isBlockOpaqueCube(var2, var3, var4 + 1) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2, var3 - 1, var4 + 1);
-        if(!this.blockAccess.isBlockOpaqueCube(var2, var3 + 1, var4)) {
-            if(this.blockAccess.isBlockOpaqueCube(var2 - 1, var3, var4) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 - 1, var3 + 1, var4)) {
-                var20 = true;
-            }
-
-            if(this.blockAccess.isBlockOpaqueCube(var2 + 1, var3, var4) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2 + 1, var3 + 1, var4)) {
-                var21 = true;
-            }
-
-            if(this.blockAccess.isBlockOpaqueCube(var2, var3, var4 - 1) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2, var3 + 1, var4 - 1)) {
-                var22 = true;
-            }
-
-            if(this.blockAccess.isBlockOpaqueCube(var2, var3, var4 + 1) && BlockRedstoneWire.isPowerProviderOrWire(this.blockAccess, var2, var3 + 1, var4 + 1)) {
-                var23 = true;
-            }
-        }
-
-        float var24 = 5.0F / 16.0F;
-        float var25 = (float)(var2 + 0);
-        float var26 = (float)(var2 + 1);
-        float var27 = (float)(var4 + 0);
-        float var28 = (float)(var4 + 1);
-        byte var29 = 0;
-        if((var20 || var21) && !var22 && !var23) {
-            var29 = 1;
-        }
-
-        if((var22 || var23) && !var21 && !var20) {
-            var29 = 2;
-        }
-
-        if(var29 != 0) {
-            var10 = (double)((float)(var8 + 16) / 256.0F);
-            var12 = (double)(((float)(var8 + 16) + 15.99F) / 256.0F);
-            var14 = (double)((float)var9 / 256.0F);
-            var16 = (double)(((float)var9 + 15.99F) / 256.0F);
-        }
-
-        if(var29 == 0) {
-            if(var21 || var22 || var23 || var20) {
-                if(!var20) {
-                    var25 += var24;
-                }
-
-                if(!var20) {
-                    var10 += (double)(var24 / 16.0F);
-                }
-
-                if(!var21) {
-                    var26 -= var24;
-                }
-
-                if(!var21) {
-                    var12 -= (double)(var24 / 16.0F);
-                }
-
-                if(!var22) {
-                    var27 += var24;
-                }
-
-                if(!var22) {
-                    var14 += (double)(var24 / 16.0F);
-                }
-
-                if(!var23) {
-                    var28 -= var24;
-                }
-
-                if(!var23) {
-                    var16 -= (double)(var24 / 16.0F);
-                }
-            }
-
-            var5.addVertexWithUV((double)(var26 + var18), (double)((float)var3 + var19), (double)(var28 + var18), var12, var16);
-            var5.addVertexWithUV((double)(var26 + var18), (double)((float)var3 + var19), (double)(var27 - var18), var12, var14);
-            var5.addVertexWithUV((double)(var25 - var18), (double)((float)var3 + var19), (double)(var27 - var18), var10, var14);
-            var5.addVertexWithUV((double)(var25 - var18), (double)((float)var3 + var19), (double)(var28 + var18), var10, var16);
-        }
-
-        if(var29 == 1) {
-            var5.addVertexWithUV((double)(var26 + var18), (double)((float)var3 + var19), (double)(var28 + var18), var12, var16);
-            var5.addVertexWithUV((double)(var26 + var18), (double)((float)var3 + var19), (double)(var27 - var18), var12, var14);
-            var5.addVertexWithUV((double)(var25 - var18), (double)((float)var3 + var19), (double)(var27 - var18), var10, var14);
-            var5.addVertexWithUV((double)(var25 - var18), (double)((float)var3 + var19), (double)(var28 + var18), var10, var16);
-        }
-
-        if(var29 == 2) {
-            var5.addVertexWithUV((double)(var26 + var18), (double)((float)var3 + var19), (double)(var28 + var18), var12, var16);
-            var5.addVertexWithUV((double)(var26 + var18), (double)((float)var3 + var19), (double)(var27 - var18), var10, var16);
-            var5.addVertexWithUV((double)(var25 - var18), (double)((float)var3 + var19), (double)(var27 - var18), var10, var14);
-            var5.addVertexWithUV((double)(var25 - var18), (double)((float)var3 + var19), (double)(var28 + var18), var12, var14);
-        }
-
-        var10 = (double)((float)(var8 + 16) / 256.0F);
-        var12 = (double)(((float)(var8 + 16) + 15.99F) / 256.0F);
-        var14 = (double)((float)var9 / 256.0F);
-        var16 = (double)(((float)var9 + 15.99F) / 256.0F);
-        if(!this.blockAccess.isBlockOpaqueCube(var2, var3 + 1, var4)) {
-            if(this.blockAccess.isBlockOpaqueCube(var2 - 1, var3, var4) && this.blockAccess.getBlockId(var2 - 1, var3 + 1, var4) == Block.redstoneWire.blockID) {
-                var5.addVertexWithUV((double)((float)var2 + var19), (double)((float)(var3 + 1) + var18), (double)((float)(var4 + 1) + var18), var12, var14);
-                var5.addVertexWithUV((double)((float)var2 + var19), (double)((float)(var3 + 0) - var18), (double)((float)(var4 + 1) + var18), var10, var14);
-                var5.addVertexWithUV((double)((float)var2 + var19), (double)((float)(var3 + 0) - var18), (double)((float)(var4 + 0) - var18), var10, var16);
-                var5.addVertexWithUV((double)((float)var2 + var19), (double)((float)(var3 + 1) + var18), (double)((float)(var4 + 0) - var18), var12, var16);
-            }
-
-            if(this.blockAccess.isBlockOpaqueCube(var2 + 1, var3, var4) && this.blockAccess.getBlockId(var2 + 1, var3 + 1, var4) == Block.redstoneWire.blockID) {
-                var5.addVertexWithUV((double)((float)(var2 + 1) - var19), (double)((float)(var3 + 0) - var18), (double)((float)(var4 + 1) + var18), var10, var16);
-                var5.addVertexWithUV((double)((float)(var2 + 1) - var19), (double)((float)(var3 + 1) + var18), (double)((float)(var4 + 1) + var18), var12, var16);
-                var5.addVertexWithUV((double)((float)(var2 + 1) - var19), (double)((float)(var3 + 1) + var18), (double)((float)(var4 + 0) - var18), var12, var14);
-                var5.addVertexWithUV((double)((float)(var2 + 1) - var19), (double)((float)(var3 + 0) - var18), (double)((float)(var4 + 0) - var18), var10, var14);
-            }
-
-            if(this.blockAccess.isBlockOpaqueCube(var2, var3, var4 - 1) && this.blockAccess.getBlockId(var2, var3 + 1, var4 - 1) == Block.redstoneWire.blockID) {
-                var5.addVertexWithUV((double)((float)(var2 + 1) + var18), (double)((float)(var3 + 0) - var18), (double)((float)var4 + var19), var10, var16);
-                var5.addVertexWithUV((double)((float)(var2 + 1) + var18), (double)((float)(var3 + 1) + var18), (double)((float)var4 + var19), var12, var16);
-                var5.addVertexWithUV((double)((float)(var2 + 0) - var18), (double)((float)(var3 + 1) + var18), (double)((float)var4 + var19), var12, var14);
-                var5.addVertexWithUV((double)((float)(var2 + 0) - var18), (double)((float)(var3 + 0) - var18), (double)((float)var4 + var19), var10, var14);
-            }
-
-            if(this.blockAccess.isBlockOpaqueCube(var2, var3, var4 + 1) && this.blockAccess.getBlockId(var2, var3 + 1, var4 + 1) == Block.redstoneWire.blockID) {
-                var5.addVertexWithUV((double)((float)(var2 + 1) + var18), (double)((float)(var3 + 1) + var18), (double)((float)(var4 + 1) - var19), var12, var14);
-                var5.addVertexWithUV((double)((float)(var2 + 1) + var18), (double)((float)(var3 + 0) - var18), (double)((float)(var4 + 1) - var19), var10, var14);
-                var5.addVertexWithUV((double)((float)(var2 + 0) - var18), (double)((float)(var3 + 0) - var18), (double)((float)(var4 + 1) - var19), var10, var16);
-                var5.addVertexWithUV((double)((float)(var2 + 0) - var18), (double)((float)(var3 + 1) + var18), (double)((float)(var4 + 1) - var19), var12, var16);
-            }
-        }
-
-        return true;
-    }
-
-    public boolean renderBlockMinecartTrack(Block var1, int var2, int var3, int var4) {
-        Tessellator var5 = Tessellator.instance;
-        int var6 = this.blockAccess.getBlockMetadata(var2, var3, var4);
-        int var7 = var1.getBlockTextureFromSideAndMetadata(0, var6);
-        if(this.overrideBlockTexture >= 0) {
-            var7 = this.overrideBlockTexture;
-        }
-
-        float var8 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-        var5.setColorOpaque_F(var8, var8, var8);
-        int var9 = (var7 & 15) << 4;
-        int var10 = var7 & 240;
-        double var11 = (double)((float)var9 / 256.0F);
-        double var13 = (double)(((float)var9 + 15.99F) / 256.0F);
-        double var15 = (double)((float)var10 / 256.0F);
-        double var17 = (double)(((float)var10 + 15.99F) / 256.0F);
-        float var19 = 1.0F / 16.0F;
-        float var20 = (float)(var2 + 1);
-        float var21 = (float)(var2 + 1);
-        float var22 = (float)(var2 + 0);
-        float var23 = (float)(var2 + 0);
-        float var24 = (float)(var4 + 0);
-        float var25 = (float)(var4 + 1);
-        float var26 = (float)(var4 + 1);
-        float var27 = (float)(var4 + 0);
-        float var28 = (float)var3 + var19;
-        float var29 = (float)var3 + var19;
-        float var30 = (float)var3 + var19;
-        float var31 = (float)var3 + var19;
-        if(var6 != 1 && var6 != 2 && var6 != 3 && var6 != 7) {
-            if(var6 == 8) {
-                var21 = (float)(var2 + 0);
-                var20 = var21;
-                var23 = (float)(var2 + 1);
-                var22 = var23;
-                var27 = (float)(var4 + 1);
-                var24 = var27;
-                var26 = (float)(var4 + 0);
-                var25 = var26;
-            } else if(var6 == 9) {
-                var23 = (float)(var2 + 0);
-                var20 = var23;
-                var22 = (float)(var2 + 1);
-                var21 = var22;
-                var25 = (float)(var4 + 0);
-                var24 = var25;
-                var27 = (float)(var4 + 1);
-                var26 = var27;
-            }
-        } else {
-            var23 = (float)(var2 + 1);
-            var20 = var23;
-            var22 = (float)(var2 + 0);
-            var21 = var22;
-            var25 = (float)(var4 + 1);
-            var24 = var25;
-            var27 = (float)(var4 + 0);
-            var26 = var27;
-        }
-
-        if(var6 != 2 && var6 != 4) {
-            if(var6 == 3 || var6 == 5) {
-                ++var29;
-                ++var30;
-            }
-        } else {
-            ++var28;
-            ++var31;
-        }
-
-        var5.addVertexWithUV((double)var20, (double)var28, (double)var24, var13, var15);
-        var5.addVertexWithUV((double)var21, (double)var29, (double)var25, var13, var17);
-        var5.addVertexWithUV((double)var22, (double)var30, (double)var26, var11, var17);
-        var5.addVertexWithUV((double)var23, (double)var31, (double)var27, var11, var15);
-        var5.addVertexWithUV((double)var23, (double)var31, (double)var27, var11, var15);
-        var5.addVertexWithUV((double)var22, (double)var30, (double)var26, var11, var17);
-        var5.addVertexWithUV((double)var21, (double)var29, (double)var25, var13, var17);
-        var5.addVertexWithUV((double)var20, (double)var28, (double)var24, var13, var15);
-        return true;
-    }
-
-    public boolean renderBlockLadder(Block var1, int var2, int var3, int var4) {
-        Tessellator var5 = Tessellator.instance;
-        int var6 = var1.getBlockTextureFromSide(0);
-        if(this.overrideBlockTexture >= 0) {
-            var6 = this.overrideBlockTexture;
-        }
-
-        float var7 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-        var5.setColorOpaque_F(var7, var7, var7);
-        int var8 = (var6 & 15) << 4;
-        int var9 = var6 & 240;
-        double var10 = (double)((float)var8 / 256.0F);
-        double var12 = (double)(((float)var8 + 15.99F) / 256.0F);
-        double var14 = (double)((float)var9 / 256.0F);
-        double var16 = (double)(((float)var9 + 15.99F) / 256.0F);
-        int var18 = this.blockAccess.getBlockMetadata(var2, var3, var4);
-        float var19 = 0.0F;
-        float var20 = 0.05F;
-        if(var18 == 5) {
-            var5.addVertexWithUV((double)((float)var2 + var20), (double)((float)(var3 + 1) + var19), (double)((float)(var4 + 1) + var19), var10, var14);
-            var5.addVertexWithUV((double)((float)var2 + var20), (double)((float)(var3 + 0) - var19), (double)((float)(var4 + 1) + var19), var10, var16);
-            var5.addVertexWithUV((double)((float)var2 + var20), (double)((float)(var3 + 0) - var19), (double)((float)(var4 + 0) - var19), var12, var16);
-            var5.addVertexWithUV((double)((float)var2 + var20), (double)((float)(var3 + 1) + var19), (double)((float)(var4 + 0) - var19), var12, var14);
-        }
-
-        if(var18 == 4) {
-            var5.addVertexWithUV((double)((float)(var2 + 1) - var20), (double)((float)(var3 + 0) - var19), (double)((float)(var4 + 1) + var19), var12, var16);
-            var5.addVertexWithUV((double)((float)(var2 + 1) - var20), (double)((float)(var3 + 1) + var19), (double)((float)(var4 + 1) + var19), var12, var14);
-            var5.addVertexWithUV((double)((float)(var2 + 1) - var20), (double)((float)(var3 + 1) + var19), (double)((float)(var4 + 0) - var19), var10, var14);
-            var5.addVertexWithUV((double)((float)(var2 + 1) - var20), (double)((float)(var3 + 0) - var19), (double)((float)(var4 + 0) - var19), var10, var16);
-        }
-
-        if(var18 == 3) {
-            var5.addVertexWithUV((double)((float)(var2 + 1) + var19), (double)((float)(var3 + 0) - var19), (double)((float)var4 + var20), var12, var16);
-            var5.addVertexWithUV((double)((float)(var2 + 1) + var19), (double)((float)(var3 + 1) + var19), (double)((float)var4 + var20), var12, var14);
-            var5.addVertexWithUV((double)((float)(var2 + 0) - var19), (double)((float)(var3 + 1) + var19), (double)((float)var4 + var20), var10, var14);
-            var5.addVertexWithUV((double)((float)(var2 + 0) - var19), (double)((float)(var3 + 0) - var19), (double)((float)var4 + var20), var10, var16);
-        }
-
-        if(var18 == 2) {
-            var5.addVertexWithUV((double)((float)(var2 + 1) + var19), (double)((float)(var3 + 1) + var19), (double)((float)(var4 + 1) - var20), var10, var14);
-            var5.addVertexWithUV((double)((float)(var2 + 1) + var19), (double)((float)(var3 + 0) - var19), (double)((float)(var4 + 1) - var20), var10, var16);
-            var5.addVertexWithUV((double)((float)(var2 + 0) - var19), (double)((float)(var3 + 0) - var19), (double)((float)(var4 + 1) - var20), var12, var16);
-            var5.addVertexWithUV((double)((float)(var2 + 0) - var19), (double)((float)(var3 + 1) + var19), (double)((float)(var4 + 1) - var20), var12, var14);
-        }
-
-        return true;
-    }
-
-    public boolean renderBlockReed(Block var1, int var2, int var3, int var4) {
-        Tessellator var5 = Tessellator.instance;
-        float var6 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-        var5.setColorOpaque_F(var6, var6, var6);
-        this.func_1239_a(var1, this.blockAccess.getBlockMetadata(var2, var3, var4), (double)var2, (double)var3, (double)var4);
-        return true;
-    }
-
-    public boolean renderBlockCrops(Block var1, int var2, int var3, int var4) {
-        Tessellator var5 = Tessellator.instance;
-        float var6 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-        var5.setColorOpaque_F(var6, var6, var6);
-        this.func_1245_b(var1, this.blockAccess.getBlockMetadata(var2, var3, var4), (double)var2, (double)((float)var3 - 1.0F / 16.0F), (double)var4);
-        return true;
-    }
-
-    public void renderTorchAtAngle(Block var1, double var2, double var4, double var6, double var8, double var10) {
-        Tessellator var12 = Tessellator.instance;
-        int var13 = var1.getBlockTextureFromSide(0);
-        if(this.overrideBlockTexture >= 0) {
-            var13 = this.overrideBlockTexture;
-        }
-
-        int var14 = (var13 & 15) << 4;
-        int var15 = var13 & 240;
-        float var16 = (float)var14 / 256.0F;
-        float var17 = ((float)var14 + 15.99F) / 256.0F;
-        float var18 = (float)var15 / 256.0F;
-        float var19 = ((float)var15 + 15.99F) / 256.0F;
-        double var20 = (double)var16 + 1.75D / 64.0D;
-        double var22 = (double)var18 + 6.0D / 256.0D;
-        double var24 = (double)var16 + 9.0D / 256.0D;
-        double var26 = (double)var18 + 1.0D / 32.0D;
-        var2 += 0.5D;
-        var6 += 0.5D;
-        double var28 = var2 - 0.5D;
-        double var30 = var2 + 0.5D;
-        double var32 = var6 - 0.5D;
-        double var34 = var6 + 0.5D;
-        double var36 = 1.0D / 16.0D;
-        double var38 = 0.625D;
-        var12.addVertexWithUV(var2 + var8 * (1.0D - var38) - var36, var4 + var38, var6 + var10 * (1.0D - var38) - var36, var20, var22);
-        var12.addVertexWithUV(var2 + var8 * (1.0D - var38) - var36, var4 + var38, var6 + var10 * (1.0D - var38) + var36, var20, var26);
-        var12.addVertexWithUV(var2 + var8 * (1.0D - var38) + var36, var4 + var38, var6 + var10 * (1.0D - var38) + var36, var24, var26);
-        var12.addVertexWithUV(var2 + var8 * (1.0D - var38) + var36, var4 + var38, var6 + var10 * (1.0D - var38) - var36, var24, var22);
-        var12.addVertexWithUV(var2 - var36, var4 + 1.0D, var32, (double)var16, (double)var18);
-        var12.addVertexWithUV(var2 - var36 + var8, var4 + 0.0D, var32 + var10, (double)var16, (double)var19);
-        var12.addVertexWithUV(var2 - var36 + var8, var4 + 0.0D, var34 + var10, (double)var17, (double)var19);
-        var12.addVertexWithUV(var2 - var36, var4 + 1.0D, var34, (double)var17, (double)var18);
-        var12.addVertexWithUV(var2 + var36, var4 + 1.0D, var34, (double)var16, (double)var18);
-        var12.addVertexWithUV(var2 + var8 + var36, var4 + 0.0D, var34 + var10, (double)var16, (double)var19);
-        var12.addVertexWithUV(var2 + var8 + var36, var4 + 0.0D, var32 + var10, (double)var17, (double)var19);
-        var12.addVertexWithUV(var2 + var36, var4 + 1.0D, var32, (double)var17, (double)var18);
-        var12.addVertexWithUV(var28, var4 + 1.0D, var6 + var36, (double)var16, (double)var18);
-        var12.addVertexWithUV(var28 + var8, var4 + 0.0D, var6 + var36 + var10, (double)var16, (double)var19);
-        var12.addVertexWithUV(var30 + var8, var4 + 0.0D, var6 + var36 + var10, (double)var17, (double)var19);
-        var12.addVertexWithUV(var30, var4 + 1.0D, var6 + var36, (double)var17, (double)var18);
-        var12.addVertexWithUV(var30, var4 + 1.0D, var6 - var36, (double)var16, (double)var18);
-        var12.addVertexWithUV(var30 + var8, var4 + 0.0D, var6 - var36 + var10, (double)var16, (double)var19);
-        var12.addVertexWithUV(var28 + var8, var4 + 0.0D, var6 - var36 + var10, (double)var17, (double)var19);
-        var12.addVertexWithUV(var28, var4 + 1.0D, var6 - var36, (double)var17, (double)var18);
-    }
-
-    public void func_1239_a(Block var1, int var2, double var3, double var5, double var7) {
-        Tessellator var9 = Tessellator.instance;
-        int var10 = var1.getBlockTextureFromSideAndMetadata(0, var2);
-        if(this.overrideBlockTexture >= 0) {
-            var10 = this.overrideBlockTexture;
-        }
-
-        int var11 = (var10 & 15) << 4;
-        int var12 = var10 & 240;
-        double var13 = (double)((float)var11 / 256.0F);
-        double var15 = (double)(((float)var11 + 15.99F) / 256.0F);
-        double var17 = (double)((float)var12 / 256.0F);
-        double var19 = (double)(((float)var12 + 15.99F) / 256.0F);
-        double var21 = var3 + 0.5D - (double)0.45F;
-        double var23 = var3 + 0.5D + (double)0.45F;
-        double var25 = var7 + 0.5D - (double)0.45F;
-        double var27 = var7 + 0.5D + (double)0.45F;
-        var9.addVertexWithUV(var21, var5 + 1.0D, var25, var13, var17);
-        var9.addVertexWithUV(var21, var5 + 0.0D, var25, var13, var19);
-        var9.addVertexWithUV(var23, var5 + 0.0D, var27, var15, var19);
-        var9.addVertexWithUV(var23, var5 + 1.0D, var27, var15, var17);
-        var9.addVertexWithUV(var23, var5 + 1.0D, var27, var13, var17);
-        var9.addVertexWithUV(var23, var5 + 0.0D, var27, var13, var19);
-        var9.addVertexWithUV(var21, var5 + 0.0D, var25, var15, var19);
-        var9.addVertexWithUV(var21, var5 + 1.0D, var25, var15, var17);
-        var9.addVertexWithUV(var21, var5 + 1.0D, var27, var13, var17);
-        var9.addVertexWithUV(var21, var5 + 0.0D, var27, var13, var19);
-        var9.addVertexWithUV(var23, var5 + 0.0D, var25, var15, var19);
-        var9.addVertexWithUV(var23, var5 + 1.0D, var25, var15, var17);
-        var9.addVertexWithUV(var23, var5 + 1.0D, var25, var13, var17);
-        var9.addVertexWithUV(var23, var5 + 0.0D, var25, var13, var19);
-        var9.addVertexWithUV(var21, var5 + 0.0D, var27, var15, var19);
-        var9.addVertexWithUV(var21, var5 + 1.0D, var27, var15, var17);
-    }
-
-    public void func_1245_b(Block var1, int var2, double var3, double var5, double var7) {
-        Tessellator var9 = Tessellator.instance;
-        int var10 = var1.getBlockTextureFromSideAndMetadata(0, var2);
-        if(this.overrideBlockTexture >= 0) {
-            var10 = this.overrideBlockTexture;
-        }
-
-        int var11 = (var10 & 15) << 4;
-        int var12 = var10 & 240;
-        double var13 = (double)((float)var11 / 256.0F);
-        double var15 = (double)(((float)var11 + 15.99F) / 256.0F);
-        double var17 = (double)((float)var12 / 256.0F);
-        double var19 = (double)(((float)var12 + 15.99F) / 256.0F);
-        double var21 = var3 + 0.5D - 0.25D;
-        double var23 = var3 + 0.5D + 0.25D;
-        double var25 = var7 + 0.5D - 0.5D;
-        double var27 = var7 + 0.5D + 0.5D;
-        var9.addVertexWithUV(var21, var5 + 1.0D, var25, var13, var17);
-        var9.addVertexWithUV(var21, var5 + 0.0D, var25, var13, var19);
-        var9.addVertexWithUV(var21, var5 + 0.0D, var27, var15, var19);
-        var9.addVertexWithUV(var21, var5 + 1.0D, var27, var15, var17);
-        var9.addVertexWithUV(var21, var5 + 1.0D, var27, var13, var17);
-        var9.addVertexWithUV(var21, var5 + 0.0D, var27, var13, var19);
-        var9.addVertexWithUV(var21, var5 + 0.0D, var25, var15, var19);
-        var9.addVertexWithUV(var21, var5 + 1.0D, var25, var15, var17);
-        var9.addVertexWithUV(var23, var5 + 1.0D, var27, var13, var17);
-        var9.addVertexWithUV(var23, var5 + 0.0D, var27, var13, var19);
-        var9.addVertexWithUV(var23, var5 + 0.0D, var25, var15, var19);
-        var9.addVertexWithUV(var23, var5 + 1.0D, var25, var15, var17);
-        var9.addVertexWithUV(var23, var5 + 1.0D, var25, var13, var17);
-        var9.addVertexWithUV(var23, var5 + 0.0D, var25, var13, var19);
-        var9.addVertexWithUV(var23, var5 + 0.0D, var27, var15, var19);
-        var9.addVertexWithUV(var23, var5 + 1.0D, var27, var15, var17);
-        var21 = var3 + 0.5D - 0.5D;
-        var23 = var3 + 0.5D + 0.5D;
-        var25 = var7 + 0.5D - 0.25D;
-        var27 = var7 + 0.5D + 0.25D;
-        var9.addVertexWithUV(var21, var5 + 1.0D, var25, var13, var17);
-        var9.addVertexWithUV(var21, var5 + 0.0D, var25, var13, var19);
-        var9.addVertexWithUV(var23, var5 + 0.0D, var25, var15, var19);
-        var9.addVertexWithUV(var23, var5 + 1.0D, var25, var15, var17);
-        var9.addVertexWithUV(var23, var5 + 1.0D, var25, var13, var17);
-        var9.addVertexWithUV(var23, var5 + 0.0D, var25, var13, var19);
-        var9.addVertexWithUV(var21, var5 + 0.0D, var25, var15, var19);
-        var9.addVertexWithUV(var21, var5 + 1.0D, var25, var15, var17);
-        var9.addVertexWithUV(var23, var5 + 1.0D, var27, var13, var17);
-        var9.addVertexWithUV(var23, var5 + 0.0D, var27, var13, var19);
-        var9.addVertexWithUV(var21, var5 + 0.0D, var27, var15, var19);
-        var9.addVertexWithUV(var21, var5 + 1.0D, var27, var15, var17);
-        var9.addVertexWithUV(var21, var5 + 1.0D, var27, var13, var17);
-        var9.addVertexWithUV(var21, var5 + 0.0D, var27, var13, var19);
-        var9.addVertexWithUV(var23, var5 + 0.0D, var27, var15, var19);
-        var9.addVertexWithUV(var23, var5 + 1.0D, var27, var15, var17);
-    }
-
-    public boolean renderBlockFluids(Block var1, int var2, int var3, int var4) {
-        Tessellator var5 = Tessellator.instance;
-        boolean var6 = var1.shouldSideBeRendered(this.blockAccess, var2, var3 + 1, var4, 1);
-        boolean var7 = var1.shouldSideBeRendered(this.blockAccess, var2, var3 - 1, var4, 0);
-        boolean[] var8 = new boolean[]{var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 - 1, 2), var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 + 1, 3), var1.shouldSideBeRendered(this.blockAccess, var2 - 1, var3, var4, 4), var1.shouldSideBeRendered(this.blockAccess, var2 + 1, var3, var4, 5)};
-        if(!var6 && !var7 && !var8[0] && !var8[1] && !var8[2] && !var8[3]) {
-            return false;
-        } else {
-            boolean var9 = false;
-            float var10 = 0.5F;
-            float var11 = 1.0F;
-            float var12 = 0.8F;
-            float var13 = 0.6F;
-            double var14 = 0.0D;
-            double var16 = 1.0D;
-            Material var18 = var1.blockMaterial;
-            int var19 = this.blockAccess.getBlockMetadata(var2, var3, var4);
-            float var20 = this.func_1224_a(var2, var3, var4, var18);
-            float var21 = this.func_1224_a(var2, var3, var4 + 1, var18);
-            float var22 = this.func_1224_a(var2 + 1, var3, var4 + 1, var18);
-            float var23 = this.func_1224_a(var2 + 1, var3, var4, var18);
-            int var24;
-            int var27;
-            float var32;
-            float var33;
-            float var34;
-            if(this.renderAllFaces || var6) {
-                var9 = true;
-                var24 = var1.getBlockTextureFromSideAndMetadata(1, var19);
-                float var25 = (float)BlockFluids.func_293_a(this.blockAccess, var2, var3, var4, var18);
-                if(var25 > -999.0F) {
-                    var24 = var1.getBlockTextureFromSideAndMetadata(2, var19);
-                }
-
-                int var26 = (var24 & 15) << 4;
-                var27 = var24 & 240;
-                double var28 = ((double)var26 + 8.0D) / 256.0D;
-                double var30 = ((double)var27 + 8.0D) / 256.0D;
-                if(var25 < -999.0F) {
-                    var25 = 0.0F;
-                } else {
-                    var28 = (double)((float)(var26 + 16) / 256.0F);
-                    var30 = (double)((float)(var27 + 16) / 256.0F);
-                }
-
-                var32 = MathHelper.sin(var25) * 8.0F / 256.0F;
-                var33 = MathHelper.cos(var25) * 8.0F / 256.0F;
-                var34 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-                var5.setColorOpaque_F(var11 * var34, var11 * var34, var11 * var34);
-                var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var20), (double)(var4 + 0), var28 - (double)var33 - (double)var32, var30 - (double)var33 + (double)var32);
-                var5.addVertexWithUV((double)(var2 + 0), (double)((float)var3 + var21), (double)(var4 + 1), var28 - (double)var33 + (double)var32, var30 + (double)var33 + (double)var32);
-                var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var22), (double)(var4 + 1), var28 + (double)var33 + (double)var32, var30 + (double)var33 - (double)var32);
-                var5.addVertexWithUV((double)(var2 + 1), (double)((float)var3 + var23), (double)(var4 + 0), var28 + (double)var33 - (double)var32, var30 - (double)var33 - (double)var32);
-            }
-
-            if(this.renderAllFaces || var7) {
-                float var48 = var1.getBlockBrightness(this.blockAccess, var2, var3 - 1, var4);
-                var5.setColorOpaque_F(var10 * var48, var10 * var48, var10 * var48);
-                this.renderBottomFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTextureFromSide(0));
-                var9 = true;
-            }
-
-            for(var24 = 0; var24 < 4; ++var24) {
-                int var49 = var2;
-                var27 = var4;
-                if(var24 == 0) {
-                    var27 = var4 - 1;
-                }
-
-                if(var24 == 1) {
-                    ++var27;
-                }
-
-                if(var24 == 2) {
-                    var49 = var2 - 1;
-                }
-
-                if(var24 == 3) {
-                    ++var49;
-                }
-
-                int var50 = var1.getBlockTextureFromSideAndMetadata(var24 + 2, var19);
-                int var29 = (var50 & 15) << 4;
-                int var51 = var50 & 240;
-                if(this.renderAllFaces || var8[var24]) {
-                    float var31;
-                    float var35;
-                    float var36;
-                    if(var24 == 0) {
-                        var31 = var20;
-                        var32 = var23;
-                        var33 = (float)var2;
-                        var35 = (float)(var2 + 1);
-                        var34 = (float)var4;
-                        var36 = (float)var4;
-                    } else if(var24 == 1) {
-                        var31 = var22;
-                        var32 = var21;
-                        var33 = (float)(var2 + 1);
-                        var35 = (float)var2;
-                        var34 = (float)(var4 + 1);
-                        var36 = (float)(var4 + 1);
-                    } else if(var24 == 2) {
-                        var31 = var21;
-                        var32 = var20;
-                        var33 = (float)var2;
-                        var35 = (float)var2;
-                        var34 = (float)(var4 + 1);
-                        var36 = (float)var4;
-                    } else {
-                        var31 = var23;
-                        var32 = var22;
-                        var33 = (float)(var2 + 1);
-                        var35 = (float)(var2 + 1);
-                        var34 = (float)var4;
-                        var36 = (float)(var4 + 1);
-                    }
-
-                    var9 = true;
-                    double var37 = (double)((float)(var29 + 0) / 256.0F);
-                    double var39 = ((double)(var29 + 16) - 0.01D) / 256.0D;
-                    double var41 = (double)(((float)var51 + (1.0F - var31) * 16.0F) / 256.0F);
-                    double var43 = (double)(((float)var51 + (1.0F - var32) * 16.0F) / 256.0F);
-                    double var45 = ((double)(var51 + 16) - 0.01D) / 256.0D;
-                    float var47 = var1.getBlockBrightness(this.blockAccess, var49, var3, var27);
-                    if(var24 < 2) {
-                        var47 *= var12;
-                    } else {
-                        var47 *= var13;
-                    }
-
-                    var5.setColorOpaque_F(var11 * var47, var11 * var47, var11 * var47);
-                    var5.addVertexWithUV((double)var33, (double)((float)var3 + var31), (double)var34, var37, var41);
-                    var5.addVertexWithUV((double)var35, (double)((float)var3 + var32), (double)var36, var39, var43);
-                    var5.addVertexWithUV((double)var35, (double)(var3 + 0), (double)var36, var39, var45);
-                    var5.addVertexWithUV((double)var33, (double)(var3 + 0), (double)var34, var37, var45);
-                }
-            }
-
-            var1.minY = var14;
-            var1.maxY = var16;
-            return var9;
-        }
-    }
-
-    private float func_1224_a(int var1, int var2, int var3, Material var4) {
-        int var5 = 0;
-        float var6 = 0.0F;
-
-        for(int var7 = 0; var7 < 4; ++var7) {
-            int var8 = var1 - (var7 & 1);
-            int var10 = var3 - (var7 >> 1 & 1);
-            if(this.blockAccess.getBlockMaterial(var8, var2 + 1, var10) == var4) {
+        overrideBlockTexture = -1;
+        flipTexture = false;
+        renderAllFaces = false;
+    }
+
+    public static boolean func_1219_a(int i) {
+        if (i == 0) {
+            return true;
+        }
+        if (i == 13) {
+            return true;
+        }
+        if (i == 10) {
+            return true;
+        }
+        return i == 11;
+    }
+
+    public void renderBlockUsingTexture(Block block, int i, int j, int k, int l) {
+        overrideBlockTexture = l;
+        renderBlockByRenderType(block, i, j, k);
+        overrideBlockTexture = -1;
+    }
+
+    public boolean renderBlockByRenderType(Block block, int i, int j, int k) {
+
+        BlockRenderEvent event = new BlockRenderEvent(block);
+        Ref.getEventManager().handleEvent(event);
+
+        if (event.isCancelled()) {
+            return false;
+        }
+
+        int l = block.getRenderType();
+        block.setBlockBoundsBasedOnState(blockAccess, i, j, k);
+        if (l == 0) {
+            return renderStandardBlock(block, i, j, k);
+        }
+        if (l == 4) {
+            return renderBlockFluids(block, i, j, k);
+        }
+        if (l == 13) {
+            return renderBlockCactus(block, i, j, k);
+        }
+        if (l == 1) {
+            return renderBlockReed(block, i, j, k);
+        }
+        if (l == 6) {
+            return renderBlockCrops(block, i, j, k);
+        }
+        if (l == 2) {
+            return renderBlockTorch(block, i, j, k);
+        }
+        if (l == 3) {
+            return renderBlockFire(block, i, j, k);
+        }
+        if (l == 5) {
+            return renderBlockRedstoneWire(block, i, j, k);
+        }
+        if (l == 8) {
+            return renderBlockLadder(block, i, j, k);
+        }
+        if (l == 7) {
+            return renderBlockDoor(block, i, j, k);
+        }
+        if (l == 9) {
+            return renderBlockMinecartTrack(block, i, j, k);
+        }
+        if (l == 10) {
+            return renderBlockStairs(block, i, j, k);
+        }
+        if (l == 11) {
+            return renderBlockFence(block, i, j, k);
+        }
+        if (l == 12) {
+            return renderBlockLever(block, i, j, k);
+        } else {
+            return false;
+        }
+    }
+
+    public boolean renderBlockTorch(Block block, int i, int j, int k) {
+        int l = blockAccess.getBlockMetadata(i, j, k);
+        Tessellator tessellator = Tessellator.instance;
+        float f = block.getBlockBrightness(blockAccess, i, j, k);
+        if (Block.lightValue[block.blockID] > 0) {
+            f = 1.0F;
+        }
+        tessellator.setColorOpaque_F(f, f, f);
+        double d = 0.40000000596046448D;
+        double d1 = 0.5D - d;
+        double d2 = 0.20000000298023224D;
+        if (l == 1) {
+            renderTorchAtAngle(block, (double) i - d1, (double) j + d2, k, -d, 0.0D);
+        } else if (l == 2) {
+            renderTorchAtAngle(block, (double) i + d1, (double) j + d2, k, d, 0.0D);
+        } else if (l == 3) {
+            renderTorchAtAngle(block, i, (double) j + d2, (double) k - d1, 0.0D, -d);
+        } else if (l == 4) {
+            renderTorchAtAngle(block, i, (double) j + d2, (double) k + d1, 0.0D, d);
+        } else {
+            renderTorchAtAngle(block, i, j, k, 0.0D, 0.0D);
+        }
+        return true;
+    }
+
+    public boolean renderBlockLever(Block block, int i, int j, int k) {
+        int l = blockAccess.getBlockMetadata(i, j, k);
+        int i1 = l & 7;
+        boolean flag = (l & 8) > 0;
+        Tessellator tessellator = Tessellator.instance;
+        boolean flag1 = overrideBlockTexture >= 0;
+        if (!flag1) {
+            overrideBlockTexture = Block.cobblestone.blockIndexInTexture;
+        }
+        float f = 0.25F;
+        float f1 = 0.1875F;
+        float f2 = 0.1875F;
+        if (i1 == 5) {
+            block.setBlockBounds(0.5F - f1, 0.0F, 0.5F - f, 0.5F + f1, f2, 0.5F + f);
+        } else if (i1 == 6) {
+            block.setBlockBounds(0.5F - f, 0.0F, 0.5F - f1, 0.5F + f, f2, 0.5F + f1);
+        } else if (i1 == 4) {
+            block.setBlockBounds(0.5F - f1, 0.5F - f, 1.0F - f2, 0.5F + f1, 0.5F + f, 1.0F);
+        } else if (i1 == 3) {
+            block.setBlockBounds(0.5F - f1, 0.5F - f, 0.0F, 0.5F + f1, 0.5F + f, f2);
+        } else if (i1 == 2) {
+            block.setBlockBounds(1.0F - f2, 0.5F - f, 0.5F - f1, 1.0F, 0.5F + f, 0.5F + f1);
+        } else if (i1 == 1) {
+            block.setBlockBounds(0.0F, 0.5F - f, 0.5F - f1, f2, 0.5F + f, 0.5F + f1);
+        }
+        renderStandardBlock(block, i, j, k);
+        if (!flag1) {
+            overrideBlockTexture = -1;
+        }
+        float f3 = block.getBlockBrightness(blockAccess, i, j, k);
+        if (Block.lightValue[block.blockID] > 0) {
+            f3 = 1.0F;
+        }
+        tessellator.setColorOpaque_F(f3, f3, f3);
+        int j1 = block.getBlockTextureFromSide(0);
+        if (overrideBlockTexture >= 0) {
+            j1 = overrideBlockTexture;
+        }
+        int k1 = (j1 & 0xf) << 4;
+        int l1 = j1 & 0xf0;
+        float f4 = (float) k1 / 256F;
+        float f5 = ((float) k1 + 15.99F) / 256F;
+        float f6 = (float) l1 / 256F;
+        float f7 = ((float) l1 + 15.99F) / 256F;
+        Vec3D[] avec3d = new Vec3D[8];
+        float f8 = 0.0625F;
+        float f9 = 0.0625F;
+        float f10 = 0.625F;
+        avec3d[0] = Vec3D.createVector(-f8, 0.0D, -f9);
+        avec3d[1] = Vec3D.createVector(f8, 0.0D, -f9);
+        avec3d[2] = Vec3D.createVector(f8, 0.0D, f9);
+        avec3d[3] = Vec3D.createVector(-f8, 0.0D, f9);
+        avec3d[4] = Vec3D.createVector(-f8, f10, -f9);
+        avec3d[5] = Vec3D.createVector(f8, f10, -f9);
+        avec3d[6] = Vec3D.createVector(f8, f10, f9);
+        avec3d[7] = Vec3D.createVector(-f8, f10, f9);
+        for (int i2 = 0; i2 < 8; i2++) {
+            if (flag) {
+                avec3d[i2].zCoord -= 0.0625D;
+                avec3d[i2].rotateAroundX(0.6981317F);
+            } else {
+                avec3d[i2].zCoord += 0.0625D;
+                avec3d[i2].rotateAroundX(-0.6981317F);
+            }
+            if (i1 == 6) {
+                avec3d[i2].rotateAroundY(1.570796F);
+            }
+            if (i1 < 5) {
+                avec3d[i2].yCoord -= 0.375D;
+                avec3d[i2].rotateAroundX(1.570796F);
+                if (i1 == 4) {
+                    avec3d[i2].rotateAroundY(0.0F);
+                }
+                if (i1 == 3) {
+                    avec3d[i2].rotateAroundY(3.141593F);
+                }
+                if (i1 == 2) {
+                    avec3d[i2].rotateAroundY(1.570796F);
+                }
+                if (i1 == 1) {
+                    avec3d[i2].rotateAroundY(-1.570796F);
+                }
+                avec3d[i2].xCoord += (double) i + 0.5D;
+                avec3d[i2].yCoord += (float) j + 0.5F;
+                avec3d[i2].zCoord += (double) k + 0.5D;
+            } else {
+                avec3d[i2].xCoord += (double) i + 0.5D;
+                avec3d[i2].yCoord += (float) j + 0.125F;
+                avec3d[i2].zCoord += (double) k + 0.5D;
+            }
+        }
+
+        Vec3D vec3d = null;
+        Vec3D vec3d1 = null;
+        Vec3D vec3d2 = null;
+        Vec3D vec3d3 = null;
+        for (int j2 = 0; j2 < 6; j2++) {
+            if (j2 == 0) {
+                f4 = (float) (k1 + 7) / 256F;
+                f5 = ((float) (k1 + 9) - 0.01F) / 256F;
+                f6 = (float) (l1 + 6) / 256F;
+                f7 = ((float) (l1 + 8) - 0.01F) / 256F;
+            } else if (j2 == 2) {
+                f4 = (float) (k1 + 7) / 256F;
+                f5 = ((float) (k1 + 9) - 0.01F) / 256F;
+                f6 = (float) (l1 + 6) / 256F;
+                f7 = ((float) (l1 + 16) - 0.01F) / 256F;
+            }
+            if (j2 == 0) {
+                vec3d = avec3d[0];
+                vec3d1 = avec3d[1];
+                vec3d2 = avec3d[2];
+                vec3d3 = avec3d[3];
+            } else if (j2 == 1) {
+                vec3d = avec3d[7];
+                vec3d1 = avec3d[6];
+                vec3d2 = avec3d[5];
+                vec3d3 = avec3d[4];
+            } else if (j2 == 2) {
+                vec3d = avec3d[1];
+                vec3d1 = avec3d[0];
+                vec3d2 = avec3d[4];
+                vec3d3 = avec3d[5];
+            } else if (j2 == 3) {
+                vec3d = avec3d[2];
+                vec3d1 = avec3d[1];
+                vec3d2 = avec3d[5];
+                vec3d3 = avec3d[6];
+            } else if (j2 == 4) {
+                vec3d = avec3d[3];
+                vec3d1 = avec3d[2];
+                vec3d2 = avec3d[6];
+                vec3d3 = avec3d[7];
+            } else if (j2 == 5) {
+                vec3d = avec3d[0];
+                vec3d1 = avec3d[3];
+                vec3d2 = avec3d[7];
+                vec3d3 = avec3d[4];
+            }
+            tessellator.addVertexWithUV(vec3d.xCoord, vec3d.yCoord, vec3d.zCoord, f4, f7);
+            tessellator.addVertexWithUV(vec3d1.xCoord, vec3d1.yCoord, vec3d1.zCoord, f5, f7);
+            tessellator.addVertexWithUV(vec3d2.xCoord, vec3d2.yCoord, vec3d2.zCoord, f5, f6);
+            tessellator.addVertexWithUV(vec3d3.xCoord, vec3d3.yCoord, vec3d3.zCoord, f4, f6);
+        }
+
+        return true;
+    }
+
+    public boolean renderBlockFire(Block block, int i, int j, int k) {
+        Tessellator tessellator = Tessellator.instance;
+        int l = block.getBlockTextureFromSide(0);
+        if (overrideBlockTexture >= 0) {
+            l = overrideBlockTexture;
+        }
+        float f = block.getBlockBrightness(blockAccess, i, j, k);
+        tessellator.setColorOpaque_F(f, f, f);
+        int i1 = (l & 0xf) << 4;
+        int j1 = l & 0xf0;
+        double d = (float) i1 / 256F;
+        double d2 = ((float) i1 + 15.99F) / 256F;
+        double d4 = (float) j1 / 256F;
+        double d6 = ((float) j1 + 15.99F) / 256F;
+        float f1 = 1.4F;
+        if (blockAccess.isBlockOpaqueCube(i, j - 1, k) || Block.fire.canBlockCatchFire(blockAccess, i, j - 1, k)) {
+            double d8 = (double) i + 0.5D + 0.20000000000000001D;
+            double d9 = ((double) i + 0.5D) - 0.20000000000000001D;
+            double d12 = (double) k + 0.5D + 0.20000000000000001D;
+            double d14 = ((double) k + 0.5D) - 0.20000000000000001D;
+            double d16 = ((double) i + 0.5D) - 0.29999999999999999D;
+            double d18 = (double) i + 0.5D + 0.29999999999999999D;
+            double d20 = ((double) k + 0.5D) - 0.29999999999999999D;
+            double d22 = (double) k + 0.5D + 0.29999999999999999D;
+            tessellator.addVertexWithUV(d16, (float) j + f1, k + 1, d2, d4);
+            tessellator.addVertexWithUV(d8, j, k + 1, d2, d6);
+            tessellator.addVertexWithUV(d8, j, k, d, d6);
+            tessellator.addVertexWithUV(d16, (float) j + f1, k, d, d4);
+            tessellator.addVertexWithUV(d18, (float) j + f1, k, d2, d4);
+            tessellator.addVertexWithUV(d9, j, k, d2, d6);
+            tessellator.addVertexWithUV(d9, j, k + 1, d, d6);
+            tessellator.addVertexWithUV(d18, (float) j + f1, k + 1, d, d4);
+            d = (float) i1 / 256F;
+            d2 = ((float) i1 + 15.99F) / 256F;
+            d4 = (float) (j1 + 16) / 256F;
+            d6 = ((float) j1 + 15.99F + 16F) / 256F;
+            tessellator.addVertexWithUV(i + 1, (float) j + f1, d22, d2, d4);
+            tessellator.addVertexWithUV(i + 1, j, d14, d2, d6);
+            tessellator.addVertexWithUV(i, j, d14, d, d6);
+            tessellator.addVertexWithUV(i, (float) j + f1, d22, d, d4);
+            tessellator.addVertexWithUV(i, (float) j + f1, d20, d2, d4);
+            tessellator.addVertexWithUV(i, j, d12, d2, d6);
+            tessellator.addVertexWithUV(i + 1, j, d12, d, d6);
+            tessellator.addVertexWithUV(i + 1, (float) j + f1, d20, d, d4);
+            d8 = ((double) i + 0.5D) - 0.5D;
+            d9 = (double) i + 0.5D + 0.5D;
+            d12 = ((double) k + 0.5D) - 0.5D;
+            d14 = (double) k + 0.5D + 0.5D;
+            d16 = ((double) i + 0.5D) - 0.40000000000000002D;
+            d18 = (double) i + 0.5D + 0.40000000000000002D;
+            d20 = ((double) k + 0.5D) - 0.40000000000000002D;
+            d22 = (double) k + 0.5D + 0.40000000000000002D;
+            tessellator.addVertexWithUV(d16, (float) j + f1, k, d, d4);
+            tessellator.addVertexWithUV(d8, j, k, d, d6);
+            tessellator.addVertexWithUV(d8, j, k + 1, d2, d6);
+            tessellator.addVertexWithUV(d16, (float) j + f1, k + 1, d2, d4);
+            tessellator.addVertexWithUV(d18, (float) j + f1, k + 1, d, d4);
+            tessellator.addVertexWithUV(d9, j, k + 1, d, d6);
+            tessellator.addVertexWithUV(d9, j, k, d2, d6);
+            tessellator.addVertexWithUV(d18, (float) j + f1, k, d2, d4);
+            d = (float) i1 / 256F;
+            d2 = ((float) i1 + 15.99F) / 256F;
+            d4 = (float) j1 / 256F;
+            d6 = ((float) j1 + 15.99F) / 256F;
+            tessellator.addVertexWithUV(i, (float) j + f1, d22, d, d4);
+            tessellator.addVertexWithUV(i, j, d14, d, d6);
+            tessellator.addVertexWithUV(i + 1, j, d14, d2, d6);
+            tessellator.addVertexWithUV(i + 1, (float) j + f1, d22, d2, d4);
+            tessellator.addVertexWithUV(i + 1, (float) j + f1, d20, d, d4);
+            tessellator.addVertexWithUV(i + 1, j, d12, d, d6);
+            tessellator.addVertexWithUV(i, j, d12, d2, d6);
+            tessellator.addVertexWithUV(i, (float) j + f1, d20, d2, d4);
+        } else {
+            float f3 = 0.2F;
+            float f4 = 0.0625F;
+            if ((i + j + k & 1) == 1) {
+                d = (float) i1 / 256F;
+                d2 = ((float) i1 + 15.99F) / 256F;
+                d4 = (float) (j1 + 16) / 256F;
+                d6 = ((float) j1 + 15.99F + 16F) / 256F;
+            }
+            if ((i / 2 + j / 2 + k / 2 & 1) == 1) {
+                double d10 = d2;
+                d2 = d;
+                d = d10;
+            }
+            if (Block.fire.canBlockCatchFire(blockAccess, i - 1, j, k)) {
+                tessellator.addVertexWithUV((float) i + f3, (float) j + f1 + f4, k + 1, d2, d4);
+                tessellator.addVertexWithUV(i, (float) (j) + f4, k + 1, d2, d6);
+                tessellator.addVertexWithUV(i, (float) (j) + f4, k, d, d6);
+                tessellator.addVertexWithUV((float) i + f3, (float) j + f1 + f4, k, d, d4);
+                tessellator.addVertexWithUV((float) i + f3, (float) j + f1 + f4, k, d, d4);
+                tessellator.addVertexWithUV(i, (float) (j) + f4, k, d, d6);
+                tessellator.addVertexWithUV(i, (float) (j) + f4, k + 1, d2, d6);
+                tessellator.addVertexWithUV((float) i + f3, (float) j + f1 + f4, k + 1, d2, d4);
+            }
+            if (Block.fire.canBlockCatchFire(blockAccess, i + 1, j, k)) {
+                tessellator.addVertexWithUV((float) (i + 1) - f3, (float) j + f1 + f4, k, d, d4);
+                tessellator.addVertexWithUV((i + 1), (float) (j) + f4, k, d, d6);
+                tessellator.addVertexWithUV((i + 1), (float) (j) + f4, k + 1, d2, d6);
+                tessellator.addVertexWithUV((float) (i + 1) - f3, (float) j + f1 + f4, k + 1, d2, d4);
+                tessellator.addVertexWithUV((float) (i + 1) - f3, (float) j + f1 + f4, k + 1, d2, d4);
+                tessellator.addVertexWithUV((i + 1), (float) (j) + f4, k + 1, d2, d6);
+                tessellator.addVertexWithUV((i + 1), (float) (j) + f4, k, d, d6);
+                tessellator.addVertexWithUV((float) (i + 1) - f3, (float) j + f1 + f4, k, d, d4);
+            }
+            if (Block.fire.canBlockCatchFire(blockAccess, i, j, k - 1)) {
+                tessellator.addVertexWithUV(i, (float) j + f1 + f4, (float) k + f3, d2, d4);
+                tessellator.addVertexWithUV(i, (float) (j) + f4, k, d2, d6);
+                tessellator.addVertexWithUV(i + 1, (float) (j) + f4, k, d, d6);
+                tessellator.addVertexWithUV(i + 1, (float) j + f1 + f4, (float) k + f3, d, d4);
+                tessellator.addVertexWithUV(i + 1, (float) j + f1 + f4, (float) k + f3, d, d4);
+                tessellator.addVertexWithUV(i + 1, (float) (j) + f4, k, d, d6);
+                tessellator.addVertexWithUV(i, (float) (j) + f4, k, d2, d6);
+                tessellator.addVertexWithUV(i, (float) j + f1 + f4, (float) k + f3, d2, d4);
+            }
+            if (Block.fire.canBlockCatchFire(blockAccess, i, j, k + 1)) {
+                tessellator.addVertexWithUV(i + 1, (float) j + f1 + f4, (float) (k + 1) - f3, d, d4);
+                tessellator.addVertexWithUV(i + 1, (float) (j) + f4, (k + 1), d, d6);
+                tessellator.addVertexWithUV(i, (float) (j) + f4, (k + 1), d2, d6);
+                tessellator.addVertexWithUV(i, (float) j + f1 + f4, (float) (k + 1) - f3, d2, d4);
+                tessellator.addVertexWithUV(i, (float) j + f1 + f4, (float) (k + 1) - f3, d2, d4);
+                tessellator.addVertexWithUV(i, (float) (j) + f4, (k + 1), d2, d6);
+                tessellator.addVertexWithUV(i + 1, (float) (j) + f4, (k + 1), d, d6);
+                tessellator.addVertexWithUV(i + 1, (float) j + f1 + f4, (float) (k + 1) - f3, d, d4);
+            }
+            if (Block.fire.canBlockCatchFire(blockAccess, i, j + 1, k)) {
+                double d11 = (double) i + 0.5D + 0.5D;
+                double d13 = ((double) i + 0.5D) - 0.5D;
+                double d15 = (double) k + 0.5D + 0.5D;
+                double d17 = ((double) k + 0.5D) - 0.5D;
+                double d19 = ((double) i + 0.5D) - 0.5D;
+                double d21 = (double) i + 0.5D + 0.5D;
+                double d23 = ((double) k + 0.5D) - 0.5D;
+                double d24 = (double) k + 0.5D + 0.5D;
+                double d1 = (float) i1 / 256F;
+                double d3 = ((float) i1 + 15.99F) / 256F;
+                double d5 = (float) j1 / 256F;
+                double d7 = ((float) j1 + 15.99F) / 256F;
+                j++;
+                float f2 = -0.2F;
+                if ((i + j + k & 1) == 0) {
+                    tessellator.addVertexWithUV(d19, (float) j + f2, k, d3, d5);
+                    tessellator.addVertexWithUV(d11, j, k, d3, d7);
+                    tessellator.addVertexWithUV(d11, j, k + 1, d1, d7);
+                    tessellator.addVertexWithUV(d19, (float) j + f2, k + 1, d1, d5);
+                    d1 = (float) i1 / 256F;
+                    d3 = ((float) i1 + 15.99F) / 256F;
+                    d5 = (float) (j1 + 16) / 256F;
+                    d7 = ((float) j1 + 15.99F + 16F) / 256F;
+                    tessellator.addVertexWithUV(d21, (float) j + f2, k + 1, d3, d5);
+                    tessellator.addVertexWithUV(d13, j, k + 1, d3, d7);
+                    tessellator.addVertexWithUV(d13, j, k, d1, d7);
+                    tessellator.addVertexWithUV(d21, (float) j + f2, k, d1, d5);
+                } else {
+                    tessellator.addVertexWithUV(i, (float) j + f2, d24, d3, d5);
+                    tessellator.addVertexWithUV(i, j, d17, d3, d7);
+                    tessellator.addVertexWithUV(i + 1, j, d17, d1, d7);
+                    tessellator.addVertexWithUV(i + 1, (float) j + f2, d24, d1, d5);
+                    d1 = (float) i1 / 256F;
+                    d3 = ((float) i1 + 15.99F) / 256F;
+                    d5 = (float) (j1 + 16) / 256F;
+                    d7 = ((float) j1 + 15.99F + 16F) / 256F;
+                    tessellator.addVertexWithUV(i + 1, (float) j + f2, d23, d3, d5);
+                    tessellator.addVertexWithUV(i + 1, j, d15, d3, d7);
+                    tessellator.addVertexWithUV(i, j, d15, d1, d7);
+                    tessellator.addVertexWithUV(i, (float) j + f2, d23, d1, d5);
+                }
+            }
+        }
+        return true;
+    }
+
+    public boolean renderBlockRedstoneWire(Block block, int i, int j, int k) {
+        Tessellator tessellator = Tessellator.instance;
+        int l = block.getBlockTextureFromSideAndMetadata(1, blockAccess.getBlockMetadata(i, j, k));
+        if (overrideBlockTexture >= 0) {
+            l = overrideBlockTexture;
+        }
+        float f = block.getBlockBrightness(blockAccess, i, j, k);
+        tessellator.setColorOpaque_F(f, f, f);
+        int i1 = (l & 0xf) << 4;
+        int j1 = l & 0xf0;
+        double d = (float) i1 / 256F;
+        double d1 = ((float) i1 + 15.99F) / 256F;
+        double d2 = (float) j1 / 256F;
+        double d3 = ((float) j1 + 15.99F) / 256F;
+        float f1 = 0.0F;
+        float f2 = 0.03125F;
+        boolean flag = BlockRedstoneWire.isPowerProviderOrWire(blockAccess, i - 1, j, k) || !blockAccess.isBlockOpaqueCube(i - 1, j, k) && BlockRedstoneWire.isPowerProviderOrWire(blockAccess, i - 1, j - 1, k);
+        boolean flag1 = BlockRedstoneWire.isPowerProviderOrWire(blockAccess, i + 1, j, k) || !blockAccess.isBlockOpaqueCube(i + 1, j, k) && BlockRedstoneWire.isPowerProviderOrWire(blockAccess, i + 1, j - 1, k);
+        boolean flag2 = BlockRedstoneWire.isPowerProviderOrWire(blockAccess, i, j, k - 1) || !blockAccess.isBlockOpaqueCube(i, j, k - 1) && BlockRedstoneWire.isPowerProviderOrWire(blockAccess, i, j - 1, k - 1);
+        boolean flag3 = BlockRedstoneWire.isPowerProviderOrWire(blockAccess, i, j, k + 1) || !blockAccess.isBlockOpaqueCube(i, j, k + 1) && BlockRedstoneWire.isPowerProviderOrWire(blockAccess, i, j - 1, k + 1);
+        if (!blockAccess.isBlockOpaqueCube(i, j + 1, k)) {
+            if (blockAccess.isBlockOpaqueCube(i - 1, j, k) && BlockRedstoneWire.isPowerProviderOrWire(blockAccess, i - 1, j + 1, k)) {
+                flag = true;
+            }
+            if (blockAccess.isBlockOpaqueCube(i + 1, j, k) && BlockRedstoneWire.isPowerProviderOrWire(blockAccess, i + 1, j + 1, k)) {
+                flag1 = true;
+            }
+            if (blockAccess.isBlockOpaqueCube(i, j, k - 1) && BlockRedstoneWire.isPowerProviderOrWire(blockAccess, i, j + 1, k - 1)) {
+                flag2 = true;
+            }
+            if (blockAccess.isBlockOpaqueCube(i, j, k + 1) && BlockRedstoneWire.isPowerProviderOrWire(blockAccess, i, j + 1, k + 1)) {
+                flag3 = true;
+            }
+        }
+        float f3 = 0.3125F;
+        float f4 = i;
+        float f5 = i + 1;
+        float f6 = k;
+        float f7 = k + 1;
+        byte byte0 = 0;
+        if ((flag || flag1) && !flag2 && !flag3) {
+            byte0 = 1;
+        }
+        if ((flag2 || flag3) && !flag1 && !flag) {
+            byte0 = 2;
+        }
+        if (byte0 != 0) {
+            d = (float) (i1 + 16) / 256F;
+            d1 = ((float) (i1 + 16) + 15.99F) / 256F;
+            d2 = (float) j1 / 256F;
+            d3 = ((float) j1 + 15.99F) / 256F;
+        }
+        if (byte0 == 0) {
+            if (flag1 || flag2 || flag3 || flag) {
+                if (!flag) {
+                    f4 += f3;
+                }
+                if (!flag) {
+                    d += f3 / 16F;
+                }
+                if (!flag1) {
+                    f5 -= f3;
+                }
+                if (!flag1) {
+                    d1 -= f3 / 16F;
+                }
+                if (!flag2) {
+                    f6 += f3;
+                }
+                if (!flag2) {
+                    d2 += f3 / 16F;
+                }
+                if (!flag3) {
+                    f7 -= f3;
+                }
+                if (!flag3) {
+                    d3 -= f3 / 16F;
+                }
+            }
+            tessellator.addVertexWithUV(f5 + f1, (float) j + f2, f7 + f1, d1, d3);
+            tessellator.addVertexWithUV(f5 + f1, (float) j + f2, f6 - f1, d1, d2);
+            tessellator.addVertexWithUV(f4 - f1, (float) j + f2, f6 - f1, d, d2);
+            tessellator.addVertexWithUV(f4 - f1, (float) j + f2, f7 + f1, d, d3);
+        }
+        if (byte0 == 1) {
+            tessellator.addVertexWithUV(f5 + f1, (float) j + f2, f7 + f1, d1, d3);
+            tessellator.addVertexWithUV(f5 + f1, (float) j + f2, f6 - f1, d1, d2);
+            tessellator.addVertexWithUV(f4 - f1, (float) j + f2, f6 - f1, d, d2);
+            tessellator.addVertexWithUV(f4 - f1, (float) j + f2, f7 + f1, d, d3);
+        }
+        if (byte0 == 2) {
+            tessellator.addVertexWithUV(f5 + f1, (float) j + f2, f7 + f1, d1, d3);
+            tessellator.addVertexWithUV(f5 + f1, (float) j + f2, f6 - f1, d, d3);
+            tessellator.addVertexWithUV(f4 - f1, (float) j + f2, f6 - f1, d, d2);
+            tessellator.addVertexWithUV(f4 - f1, (float) j + f2, f7 + f1, d1, d2);
+        }
+        d = (float) (i1 + 16) / 256F;
+        d1 = ((float) (i1 + 16) + 15.99F) / 256F;
+        d2 = (float) j1 / 256F;
+        d3 = ((float) j1 + 15.99F) / 256F;
+        if (!blockAccess.isBlockOpaqueCube(i, j + 1, k)) {
+            if (blockAccess.isBlockOpaqueCube(i - 1, j, k) && blockAccess.getBlockId(i - 1, j + 1, k) == Block.redstoneWire.blockID) {
+                tessellator.addVertexWithUV((float) i + f2, (float) (j + 1) + f1, (float) (k + 1) + f1, d1, d2);
+                tessellator.addVertexWithUV((float) i + f2, (float) (j) - f1, (float) (k + 1) + f1, d, d2);
+                tessellator.addVertexWithUV((float) i + f2, (float) (j) - f1, (float) (k) - f1, d, d3);
+                tessellator.addVertexWithUV((float) i + f2, (float) (j + 1) + f1, (float) (k) - f1, d1, d3);
+            }
+            if (blockAccess.isBlockOpaqueCube(i + 1, j, k) && blockAccess.getBlockId(i + 1, j + 1, k) == Block.redstoneWire.blockID) {
+                tessellator.addVertexWithUV((float) (i + 1) - f2, (float) (j) - f1, (float) (k + 1) + f1, d, d3);
+                tessellator.addVertexWithUV((float) (i + 1) - f2, (float) (j + 1) + f1, (float) (k + 1) + f1, d1, d3);
+                tessellator.addVertexWithUV((float) (i + 1) - f2, (float) (j + 1) + f1, (float) (k) - f1, d1, d2);
+                tessellator.addVertexWithUV((float) (i + 1) - f2, (float) (j) - f1, (float) (k) - f1, d, d2);
+            }
+            if (blockAccess.isBlockOpaqueCube(i, j, k - 1) && blockAccess.getBlockId(i, j + 1, k - 1) == Block.redstoneWire.blockID) {
+                tessellator.addVertexWithUV((float) (i + 1) + f1, (float) (j) - f1, (float) k + f2, d, d3);
+                tessellator.addVertexWithUV((float) (i + 1) + f1, (float) (j + 1) + f1, (float) k + f2, d1, d3);
+                tessellator.addVertexWithUV((float) (i) - f1, (float) (j + 1) + f1, (float) k + f2, d1, d2);
+                tessellator.addVertexWithUV((float) (i) - f1, (float) (j) - f1, (float) k + f2, d, d2);
+            }
+            if (blockAccess.isBlockOpaqueCube(i, j, k + 1) && blockAccess.getBlockId(i, j + 1, k + 1) == Block.redstoneWire.blockID) {
+                tessellator.addVertexWithUV((float) (i + 1) + f1, (float) (j + 1) + f1, (float) (k + 1) - f2, d1, d2);
+                tessellator.addVertexWithUV((float) (i + 1) + f1, (float) (j) - f1, (float) (k + 1) - f2, d, d2);
+                tessellator.addVertexWithUV((float) (i) - f1, (float) (j) - f1, (float) (k + 1) - f2, d, d3);
+                tessellator.addVertexWithUV((float) (i) - f1, (float) (j + 1) + f1, (float) (k + 1) - f2, d1, d3);
+            }
+        }
+        return true;
+    }
+
+    public boolean renderBlockMinecartTrack(Block block, int i, int j, int k) {
+        Tessellator tessellator = Tessellator.instance;
+        int l = blockAccess.getBlockMetadata(i, j, k);
+        int i1 = block.getBlockTextureFromSideAndMetadata(0, l);
+        if (overrideBlockTexture >= 0) {
+            i1 = overrideBlockTexture;
+        }
+        float f = block.getBlockBrightness(blockAccess, i, j, k);
+        tessellator.setColorOpaque_F(f, f, f);
+        int j1 = (i1 & 0xf) << 4;
+        int k1 = i1 & 0xf0;
+        double d = (float) j1 / 256F;
+        double d1 = ((float) j1 + 15.99F) / 256F;
+        double d2 = (float) k1 / 256F;
+        double d3 = ((float) k1 + 15.99F) / 256F;
+        float f1 = 0.0625F;
+        float f2 = i + 1;
+        float f3 = i + 1;
+        float f4 = i;
+        float f5 = i;
+        float f6 = k;
+        float f7 = k + 1;
+        float f8 = k + 1;
+        float f9 = k;
+        float f10 = (float) j + f1;
+        float f11 = (float) j + f1;
+        float f12 = (float) j + f1;
+        float f13 = (float) j + f1;
+        if (l == 1 || l == 2 || l == 3 || l == 7) {
+            f2 = f5 = i + 1;
+            f3 = f4 = i;
+            f6 = f7 = k + 1;
+            f8 = f9 = k;
+        } else if (l == 8) {
+            f2 = f3 = i;
+            f4 = f5 = i + 1;
+            f6 = f9 = k + 1;
+            f7 = f8 = k;
+        } else if (l == 9) {
+            f2 = f5 = i;
+            f3 = f4 = i + 1;
+            f6 = f7 = k;
+            f8 = f9 = k + 1;
+        }
+        if (l == 2 || l == 4) {
+            f10++;
+            f13++;
+        } else if (l == 3 || l == 5) {
+            f11++;
+            f12++;
+        }
+        tessellator.addVertexWithUV(f2, f10, f6, d1, d2);
+        tessellator.addVertexWithUV(f3, f11, f7, d1, d3);
+        tessellator.addVertexWithUV(f4, f12, f8, d, d3);
+        tessellator.addVertexWithUV(f5, f13, f9, d, d2);
+        tessellator.addVertexWithUV(f5, f13, f9, d, d2);
+        tessellator.addVertexWithUV(f4, f12, f8, d, d3);
+        tessellator.addVertexWithUV(f3, f11, f7, d1, d3);
+        tessellator.addVertexWithUV(f2, f10, f6, d1, d2);
+        return true;
+    }
+
+    public boolean renderBlockLadder(Block block, int i, int j, int k) {
+        Tessellator tessellator = Tessellator.instance;
+        int l = block.getBlockTextureFromSide(0);
+        if (overrideBlockTexture >= 0) {
+            l = overrideBlockTexture;
+        }
+        float f = block.getBlockBrightness(blockAccess, i, j, k);
+        tessellator.setColorOpaque_F(f, f, f);
+        int i1 = (l & 0xf) << 4;
+        int j1 = l & 0xf0;
+        double d = (float) i1 / 256F;
+        double d1 = ((float) i1 + 15.99F) / 256F;
+        double d2 = (float) j1 / 256F;
+        double d3 = ((float) j1 + 15.99F) / 256F;
+        int k1 = blockAccess.getBlockMetadata(i, j, k);
+        float f1 = 0.0F;
+        float f2 = 0.05F;
+        if (k1 == 5) {
+            tessellator.addVertexWithUV((float) i + f2, (float) (j + 1) + f1, (float) (k + 1) + f1, d, d2);
+            tessellator.addVertexWithUV((float) i + f2, (float) (j) - f1, (float) (k + 1) + f1, d, d3);
+            tessellator.addVertexWithUV((float) i + f2, (float) (j) - f1, (float) (k) - f1, d1, d3);
+            tessellator.addVertexWithUV((float) i + f2, (float) (j + 1) + f1, (float) (k) - f1, d1, d2);
+        }
+        if (k1 == 4) {
+            tessellator.addVertexWithUV((float) (i + 1) - f2, (float) (j) - f1, (float) (k + 1) + f1, d1, d3);
+            tessellator.addVertexWithUV((float) (i + 1) - f2, (float) (j + 1) + f1, (float) (k + 1) + f1, d1, d2);
+            tessellator.addVertexWithUV((float) (i + 1) - f2, (float) (j + 1) + f1, (float) (k) - f1, d, d2);
+            tessellator.addVertexWithUV((float) (i + 1) - f2, (float) (j) - f1, (float) (k) - f1, d, d3);
+        }
+        if (k1 == 3) {
+            tessellator.addVertexWithUV((float) (i + 1) + f1, (float) (j) - f1, (float) k + f2, d1, d3);
+            tessellator.addVertexWithUV((float) (i + 1) + f1, (float) (j + 1) + f1, (float) k + f2, d1, d2);
+            tessellator.addVertexWithUV((float) (i) - f1, (float) (j + 1) + f1, (float) k + f2, d, d2);
+            tessellator.addVertexWithUV((float) (i) - f1, (float) (j) - f1, (float) k + f2, d, d3);
+        }
+        if (k1 == 2) {
+            tessellator.addVertexWithUV((float) (i + 1) + f1, (float) (j + 1) + f1, (float) (k + 1) - f2, d, d2);
+            tessellator.addVertexWithUV((float) (i + 1) + f1, (float) (j) - f1, (float) (k + 1) - f2, d, d3);
+            tessellator.addVertexWithUV((float) (i) - f1, (float) (j) - f1, (float) (k + 1) - f2, d1, d3);
+            tessellator.addVertexWithUV((float) (i) - f1, (float) (j + 1) + f1, (float) (k + 1) - f2, d1, d2);
+        }
+        return true;
+    }
+
+    public boolean renderBlockReed(Block block, int i, int j, int k) {
+        Tessellator tessellator = Tessellator.instance;
+        float f = block.getBlockBrightness(blockAccess, i, j, k);
+        tessellator.setColorOpaque_F(f, f, f);
+        func_1239_a(block, blockAccess.getBlockMetadata(i, j, k), i, j, k);
+        return true;
+    }
+
+    public boolean renderBlockCrops(Block block, int i, int j, int k) {
+        Tessellator tessellator = Tessellator.instance;
+        float f = block.getBlockBrightness(blockAccess, i, j, k);
+        tessellator.setColorOpaque_F(f, f, f);
+        func_1245_b(block, blockAccess.getBlockMetadata(i, j, k), i, (float) j - 0.0625F, k);
+        return true;
+    }
+
+    public void renderTorchAtAngle(Block block, double d, double d1, double d2, double d3, double d4) {
+        Tessellator tessellator = Tessellator.instance;
+        int i = block.getBlockTextureFromSide(0);
+        if (overrideBlockTexture >= 0) {
+            i = overrideBlockTexture;
+        }
+        int j = (i & 0xf) << 4;
+        int k = i & 0xf0;
+        float f = (float) j / 256F;
+        float f1 = ((float) j + 15.99F) / 256F;
+        float f2 = (float) k / 256F;
+        float f3 = ((float) k + 15.99F) / 256F;
+        double d5 = (double) f + 0.02734375D;
+        double d6 = (double) f2 + 0.0234375D;
+        double d7 = (double) f + 0.03515625D;
+        double d8 = (double) f2 + 0.03125D;
+        d += 0.5D;
+        d2 += 0.5D;
+        double d9 = d - 0.5D;
+        double d10 = d + 0.5D;
+        double d11 = d2 - 0.5D;
+        double d12 = d2 + 0.5D;
+        double d13 = 0.0625D;
+        double d14 = 0.625D;
+        tessellator.addVertexWithUV((d + d3 * (1.0D - d14)) - d13, d1 + d14, (d2 + d4 * (1.0D - d14)) - d13, d5, d6);
+        tessellator.addVertexWithUV((d + d3 * (1.0D - d14)) - d13, d1 + d14, d2 + d4 * (1.0D - d14) + d13, d5, d8);
+        tessellator.addVertexWithUV(d + d3 * (1.0D - d14) + d13, d1 + d14, d2 + d4 * (1.0D - d14) + d13, d7, d8);
+        tessellator.addVertexWithUV(d + d3 * (1.0D - d14) + d13, d1 + d14, (d2 + d4 * (1.0D - d14)) - d13, d7, d6);
+        tessellator.addVertexWithUV(d - d13, d1 + 1.0D, d11, f, f2);
+        tessellator.addVertexWithUV((d - d13) + d3, d1 + 0.0D, d11 + d4, f, f3);
+        tessellator.addVertexWithUV((d - d13) + d3, d1 + 0.0D, d12 + d4, f1, f3);
+        tessellator.addVertexWithUV(d - d13, d1 + 1.0D, d12, f1, f2);
+        tessellator.addVertexWithUV(d + d13, d1 + 1.0D, d12, f, f2);
+        tessellator.addVertexWithUV(d + d3 + d13, d1 + 0.0D, d12 + d4, f, f3);
+        tessellator.addVertexWithUV(d + d3 + d13, d1 + 0.0D, d11 + d4, f1, f3);
+        tessellator.addVertexWithUV(d + d13, d1 + 1.0D, d11, f1, f2);
+        tessellator.addVertexWithUV(d9, d1 + 1.0D, d2 + d13, f, f2);
+        tessellator.addVertexWithUV(d9 + d3, d1 + 0.0D, d2 + d13 + d4, f, f3);
+        tessellator.addVertexWithUV(d10 + d3, d1 + 0.0D, d2 + d13 + d4, f1, f3);
+        tessellator.addVertexWithUV(d10, d1 + 1.0D, d2 + d13, f1, f2);
+        tessellator.addVertexWithUV(d10, d1 + 1.0D, d2 - d13, f, f2);
+        tessellator.addVertexWithUV(d10 + d3, d1 + 0.0D, (d2 - d13) + d4, f, f3);
+        tessellator.addVertexWithUV(d9 + d3, d1 + 0.0D, (d2 - d13) + d4, f1, f3);
+        tessellator.addVertexWithUV(d9, d1 + 1.0D, d2 - d13, f1, f2);
+    }
+
+    public void func_1239_a(Block block, int i, double d, double d1, double d2) {
+        Tessellator tessellator = Tessellator.instance;
+        int j = block.getBlockTextureFromSideAndMetadata(0, i);
+        if (overrideBlockTexture >= 0) {
+            j = overrideBlockTexture;
+        }
+        int k = (j & 0xf) << 4;
+        int l = j & 0xf0;
+        double d3 = (float) k / 256F;
+        double d4 = ((float) k + 15.99F) / 256F;
+        double d5 = (float) l / 256F;
+        double d6 = ((float) l + 15.99F) / 256F;
+        double d7 = (d + 0.5D) - 0.44999998807907104D;
+        double d8 = d + 0.5D + 0.44999998807907104D;
+        double d9 = (d2 + 0.5D) - 0.44999998807907104D;
+        double d10 = d2 + 0.5D + 0.44999998807907104D;
+        tessellator.addVertexWithUV(d7, d1 + 1.0D, d9, d3, d5);
+        tessellator.addVertexWithUV(d7, d1 + 0.0D, d9, d3, d6);
+        tessellator.addVertexWithUV(d8, d1 + 0.0D, d10, d4, d6);
+        tessellator.addVertexWithUV(d8, d1 + 1.0D, d10, d4, d5);
+        tessellator.addVertexWithUV(d8, d1 + 1.0D, d10, d3, d5);
+        tessellator.addVertexWithUV(d8, d1 + 0.0D, d10, d3, d6);
+        tessellator.addVertexWithUV(d7, d1 + 0.0D, d9, d4, d6);
+        tessellator.addVertexWithUV(d7, d1 + 1.0D, d9, d4, d5);
+        tessellator.addVertexWithUV(d7, d1 + 1.0D, d10, d3, d5);
+        tessellator.addVertexWithUV(d7, d1 + 0.0D, d10, d3, d6);
+        tessellator.addVertexWithUV(d8, d1 + 0.0D, d9, d4, d6);
+        tessellator.addVertexWithUV(d8, d1 + 1.0D, d9, d4, d5);
+        tessellator.addVertexWithUV(d8, d1 + 1.0D, d9, d3, d5);
+        tessellator.addVertexWithUV(d8, d1 + 0.0D, d9, d3, d6);
+        tessellator.addVertexWithUV(d7, d1 + 0.0D, d10, d4, d6);
+        tessellator.addVertexWithUV(d7, d1 + 1.0D, d10, d4, d5);
+    }
+
+    public void func_1245_b(Block block, int i, double d, double d1, double d2) {
+        Tessellator tessellator = Tessellator.instance;
+        int j = block.getBlockTextureFromSideAndMetadata(0, i);
+        if (overrideBlockTexture >= 0) {
+            j = overrideBlockTexture;
+        }
+        int k = (j & 0xf) << 4;
+        int l = j & 0xf0;
+        double d3 = (float) k / 256F;
+        double d4 = ((float) k + 15.99F) / 256F;
+        double d5 = (float) l / 256F;
+        double d6 = ((float) l + 15.99F) / 256F;
+        double d7 = (d + 0.5D) - 0.25D;
+        double d8 = d + 0.5D + 0.25D;
+        double d9 = (d2 + 0.5D) - 0.5D;
+        double d10 = d2 + 0.5D + 0.5D;
+        tessellator.addVertexWithUV(d7, d1 + 1.0D, d9, d3, d5);
+        tessellator.addVertexWithUV(d7, d1 + 0.0D, d9, d3, d6);
+        tessellator.addVertexWithUV(d7, d1 + 0.0D, d10, d4, d6);
+        tessellator.addVertexWithUV(d7, d1 + 1.0D, d10, d4, d5);
+        tessellator.addVertexWithUV(d7, d1 + 1.0D, d10, d3, d5);
+        tessellator.addVertexWithUV(d7, d1 + 0.0D, d10, d3, d6);
+        tessellator.addVertexWithUV(d7, d1 + 0.0D, d9, d4, d6);
+        tessellator.addVertexWithUV(d7, d1 + 1.0D, d9, d4, d5);
+        tessellator.addVertexWithUV(d8, d1 + 1.0D, d10, d3, d5);
+        tessellator.addVertexWithUV(d8, d1 + 0.0D, d10, d3, d6);
+        tessellator.addVertexWithUV(d8, d1 + 0.0D, d9, d4, d6);
+        tessellator.addVertexWithUV(d8, d1 + 1.0D, d9, d4, d5);
+        tessellator.addVertexWithUV(d8, d1 + 1.0D, d9, d3, d5);
+        tessellator.addVertexWithUV(d8, d1 + 0.0D, d9, d3, d6);
+        tessellator.addVertexWithUV(d8, d1 + 0.0D, d10, d4, d6);
+        tessellator.addVertexWithUV(d8, d1 + 1.0D, d10, d4, d5);
+        d7 = (d + 0.5D) - 0.5D;
+        d8 = d + 0.5D + 0.5D;
+        d9 = (d2 + 0.5D) - 0.25D;
+        d10 = d2 + 0.5D + 0.25D;
+        tessellator.addVertexWithUV(d7, d1 + 1.0D, d9, d3, d5);
+        tessellator.addVertexWithUV(d7, d1 + 0.0D, d9, d3, d6);
+        tessellator.addVertexWithUV(d8, d1 + 0.0D, d9, d4, d6);
+        tessellator.addVertexWithUV(d8, d1 + 1.0D, d9, d4, d5);
+        tessellator.addVertexWithUV(d8, d1 + 1.0D, d9, d3, d5);
+        tessellator.addVertexWithUV(d8, d1 + 0.0D, d9, d3, d6);
+        tessellator.addVertexWithUV(d7, d1 + 0.0D, d9, d4, d6);
+        tessellator.addVertexWithUV(d7, d1 + 1.0D, d9, d4, d5);
+        tessellator.addVertexWithUV(d8, d1 + 1.0D, d10, d3, d5);
+        tessellator.addVertexWithUV(d8, d1 + 0.0D, d10, d3, d6);
+        tessellator.addVertexWithUV(d7, d1 + 0.0D, d10, d4, d6);
+        tessellator.addVertexWithUV(d7, d1 + 1.0D, d10, d4, d5);
+        tessellator.addVertexWithUV(d7, d1 + 1.0D, d10, d3, d5);
+        tessellator.addVertexWithUV(d7, d1 + 0.0D, d10, d3, d6);
+        tessellator.addVertexWithUV(d8, d1 + 0.0D, d10, d4, d6);
+        tessellator.addVertexWithUV(d8, d1 + 1.0D, d10, d4, d5);
+    }
+
+    public boolean renderBlockFluids(Block block, int i, int j, int k) {
+        Tessellator tessellator = Tessellator.instance;
+        boolean flag = block.shouldSideBeRendered(blockAccess, i, j + 1, k, 1);
+        boolean flag1 = block.shouldSideBeRendered(blockAccess, i, j - 1, k, 0);
+        boolean[] aflag = new boolean[4];
+        aflag[0] = block.shouldSideBeRendered(blockAccess, i, j, k - 1, 2);
+        aflag[1] = block.shouldSideBeRendered(blockAccess, i, j, k + 1, 3);
+        aflag[2] = block.shouldSideBeRendered(blockAccess, i - 1, j, k, 4);
+        aflag[3] = block.shouldSideBeRendered(blockAccess, i + 1, j, k, 5);
+        if (!flag && !flag1 && !aflag[0] && !aflag[1] && !aflag[2] && !aflag[3]) {
+            return false;
+        }
+        boolean flag2 = false;
+        float f = 0.5F;
+        float f1 = 1.0F;
+        float f2 = 0.8F;
+        float f3 = 0.6F;
+        double d = 0.0D;
+        double d1 = 1.0D;
+        Material material = block.blockMaterial;
+        int l = blockAccess.getBlockMetadata(i, j, k);
+        float f4 = func_1224_a(i, j, k, material);
+        float f5 = func_1224_a(i, j, k + 1, material);
+        float f6 = func_1224_a(i + 1, j, k + 1, material);
+        float f7 = func_1224_a(i + 1, j, k, material);
+        if (renderAllFaces || flag) {
+            flag2 = true;
+            int i1 = block.getBlockTextureFromSideAndMetadata(1, l);
+            float f9 = (float) BlockFluids.func_293_a(blockAccess, i, j, k, material);
+            if (f9 > -999F) {
+                i1 = block.getBlockTextureFromSideAndMetadata(2, l);
+            }
+            int l1 = (i1 & 0xf) << 4;
+            int j2 = i1 & 0xf0;
+            double d2 = ((double) l1 + 8D) / 256D;
+            double d3 = ((double) j2 + 8D) / 256D;
+            if (f9 < -999F) {
+                f9 = 0.0F;
+            } else {
+                d2 = (float) (l1 + 16) / 256F;
+                d3 = (float) (j2 + 16) / 256F;
+            }
+            float f11 = (MathHelper.sin(f9) * 8F) / 256F;
+            float f13 = (MathHelper.cos(f9) * 8F) / 256F;
+            float f15 = block.getBlockBrightness(blockAccess, i, j, k);
+            tessellator.setColorOpaque_F(f1 * f15, f1 * f15, f1 * f15);
+            tessellator.addVertexWithUV(i, (float) j + f4, k, d2 - (double) f13 - (double) f11, (d3 - (double) f13) + (double) f11);
+            tessellator.addVertexWithUV(i, (float) j + f5, k + 1, (d2 - (double) f13) + (double) f11, d3 + (double) f13 + (double) f11);
+            tessellator.addVertexWithUV(i + 1, (float) j + f6, k + 1, d2 + (double) f13 + (double) f11, (d3 + (double) f13) - (double) f11);
+            tessellator.addVertexWithUV(i + 1, (float) j + f7, k, (d2 + (double) f13) - (double) f11, d3 - (double) f13 - (double) f11);
+        }
+        if (renderAllFaces || flag1) {
+            float f8 = block.getBlockBrightness(blockAccess, i, j - 1, k);
+            tessellator.setColorOpaque_F(f * f8, f * f8, f * f8);
+            renderBottomFace(block, i, j, k, block.getBlockTextureFromSide(0));
+            flag2 = true;
+        }
+        for (int j1 = 0; j1 < 4; j1++) {
+            int k1 = i;
+            int i2 = j;
+            int k2 = k;
+            if (j1 == 0) {
+                k2--;
+            }
+            if (j1 == 1) {
+                k2++;
+            }
+            if (j1 == 2) {
+                k1--;
+            }
+            if (j1 == 3) {
+                k1++;
+            }
+            int l2 = block.getBlockTextureFromSideAndMetadata(j1 + 2, l);
+            int i3 = (l2 & 0xf) << 4;
+            int j3 = l2 & 0xf0;
+            if (!renderAllFaces && !aflag[j1]) {
+                continue;
+            }
+            float f10;
+            float f12;
+            float f14;
+            float f16;
+            float f17;
+            float f18;
+            if (j1 == 0) {
+                f10 = f4;
+                f12 = f7;
+                f14 = i;
+                f17 = i + 1;
+                f16 = k;
+                f18 = k;
+            } else if (j1 == 1) {
+                f10 = f6;
+                f12 = f5;
+                f14 = i + 1;
+                f17 = i;
+                f16 = k + 1;
+                f18 = k + 1;
+            } else if (j1 == 2) {
+                f10 = f5;
+                f12 = f4;
+                f14 = i;
+                f17 = i;
+                f16 = k + 1;
+                f18 = k;
+            } else {
+                f10 = f7;
+                f12 = f6;
+                f14 = i + 1;
+                f17 = i + 1;
+                f16 = k;
+                f18 = k + 1;
+            }
+            flag2 = true;
+            double d4 = (float) (i3) / 256F;
+            double d5 = ((double) (i3 + 16) - 0.01D) / 256D;
+            double d6 = ((float) j3 + (1.0F - f10) * 16F) / 256F;
+            double d7 = ((float) j3 + (1.0F - f12) * 16F) / 256F;
+            double d8 = ((double) (j3 + 16) - 0.01D) / 256D;
+            float f19 = block.getBlockBrightness(blockAccess, k1, i2, k2);
+            if (j1 < 2) {
+                f19 *= f2;
+            } else {
+                f19 *= f3;
+            }
+            tessellator.setColorOpaque_F(f1 * f19, f1 * f19, f1 * f19);
+            tessellator.addVertexWithUV(f14, (float) j + f10, f16, d4, d6);
+            tessellator.addVertexWithUV(f17, (float) j + f12, f18, d5, d7);
+            tessellator.addVertexWithUV(f17, j, f18, d5, d8);
+            tessellator.addVertexWithUV(f14, j, f16, d4, d8);
+        }
+
+        block.minY = d;
+        block.maxY = d1;
+        return flag2;
+    }
+
+    private float func_1224_a(int i, int j, int k, Material material) {
+        int l = 0;
+        float f = 0.0F;
+        for (int i1 = 0; i1 < 4; i1++) {
+            int j1 = i - (i1 & 1);
+            int k1 = j;
+            int l1 = k - (i1 >> 1 & 1);
+            if (blockAccess.getBlockMaterial(j1, k1 + 1, l1) == material) {
                 return 1.0F;
             }
-
-            Material var11 = this.blockAccess.getBlockMaterial(var8, var2, var10);
-            if(var11 != var4) {
-                if(!var11.func_878_a()) {
-                    ++var6;
-                    ++var5;
-                }
-            } else {
-                int var12 = this.blockAccess.getBlockMetadata(var8, var2, var10);
-                if(var12 >= 8 || var12 == 0) {
-                    var6 += BlockFluids.setFluidHeight(var12) * 10.0F;
-                    var5 += 10;
-                }
-
-                var6 += BlockFluids.setFluidHeight(var12);
-                ++var5;
-            }
-        }
-
-        return 1.0F - var6 / (float)var5;
-    }
-
-    public void func_1243_a(Block var1, World var2, int var3, int var4, int var5) {
-        float var6 = 0.5F;
-        float var7 = 1.0F;
-        float var8 = 0.8F;
-        float var9 = 0.6F;
-        Tessellator var10 = Tessellator.instance;
-        var10.startDrawingQuads();
-        float var11 = var1.getBlockBrightness(var2, var3, var4, var5);
-        float var12 = var1.getBlockBrightness(var2, var3, var4 - 1, var5);
-        if(var12 < var11) {
-            var12 = var11;
-        }
-
-        var10.setColorOpaque_F(var6 * var12, var6 * var12, var6 * var12);
-        this.renderBottomFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(0));
-        var12 = var1.getBlockBrightness(var2, var3, var4 + 1, var5);
-        if(var12 < var11) {
-            var12 = var11;
-        }
-
-        var10.setColorOpaque_F(var7 * var12, var7 * var12, var7 * var12);
-        this.renderTopFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(1));
-        var12 = var1.getBlockBrightness(var2, var3, var4, var5 - 1);
-        if(var12 < var11) {
-            var12 = var11;
-        }
-
-        var10.setColorOpaque_F(var8 * var12, var8 * var12, var8 * var12);
-        this.renderEastFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(2));
-        var12 = var1.getBlockBrightness(var2, var3, var4, var5 + 1);
-        if(var12 < var11) {
-            var12 = var11;
-        }
-
-        var10.setColorOpaque_F(var8 * var12, var8 * var12, var8 * var12);
-        this.renderWestFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(3));
-        var12 = var1.getBlockBrightness(var2, var3 - 1, var4, var5);
-        if(var12 < var11) {
-            var12 = var11;
-        }
-
-        var10.setColorOpaque_F(var9 * var12, var9 * var12, var9 * var12);
-        this.renderNorthFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(4));
-        var12 = var1.getBlockBrightness(var2, var3 + 1, var4, var5);
-        if(var12 < var11) {
-            var12 = var11;
-        }
-
-        var10.setColorOpaque_F(var9 * var12, var9 * var12, var9 * var12);
-        this.renderSouthFace(var1, -0.5D, -0.5D, -0.5D, var1.getBlockTextureFromSide(5));
-        var10.draw();
-    }
-
-    public boolean renderStandardBlock(Block var1, int var2, int var3, int var4) {
-        int var5 = var1.colorMultiplier(this.blockAccess, var2, var3, var4);
-        float var6 = (float)(var5 >> 16 & 255) / 255.0F;
-        float var7 = (float)(var5 >> 8 & 255) / 255.0F;
-        float var8 = (float)(var5 & 255) / 255.0F;
-        return this.renderStandardBlockWithColorMultiplier(var1, var2, var3, var4, var6, var7, var8);
-    }
-
-    public boolean renderStandardBlockWithColorMultiplier(Block var1, int var2, int var3, int var4, float var5, float var6, float var7) {
-        Tessellator var8 = Tessellator.instance;
-        boolean var9 = false;
-        float var10 = 0.5F;
-        float var11 = 1.0F;
-        float var12 = 0.8F;
-        float var13 = 0.6F;
-        float var14 = var11 * var5;
-        float var15 = var11 * var6;
-        float var16 = var11 * var7;
-        if(var1 == Block.grass) {
-            var7 = 1.0F;
-            var6 = var7;
-            var5 = var7;
-        }
-
-        float var17 = var10 * var5;
-        float var18 = var12 * var5;
-        float var19 = var13 * var5;
-        float var20 = var10 * var6;
-        float var21 = var12 * var6;
-        float var22 = var13 * var6;
-        float var23 = var10 * var7;
-        float var24 = var12 * var7;
-        float var25 = var13 * var7;
-        float var26 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-        float var27;
-        if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3 - 1, var4, 0)) {
-            var27 = var1.getBlockBrightness(this.blockAccess, var2, var3 - 1, var4);
-            var8.setColorOpaque_F(var17 * var27, var20 * var27, var23 * var27);
-            this.renderBottomFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 0));
-            var9 = true;
-        }
-
-        if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3 + 1, var4, 1)) {
-            var27 = var1.getBlockBrightness(this.blockAccess, var2, var3 + 1, var4);
-            if(var1.maxY != 1.0D && !var1.blockMaterial.getIsLiquid()) {
-                var27 = var26;
-            }
-
-            var8.setColorOpaque_F(var14 * var27, var15 * var27, var16 * var27);
-            this.renderTopFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 1));
-            var9 = true;
-        }
-
-        if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 - 1, 2)) {
-            var27 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4 - 1);
-            if(var1.minZ > 0.0D) {
-                var27 = var26;
-            }
-
-            var8.setColorOpaque_F(var18 * var27, var21 * var27, var24 * var27);
-            this.renderEastFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 2));
-            var9 = true;
-        }
-
-        if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 + 1, 3)) {
-            var27 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4 + 1);
-            if(var1.maxZ < 1.0D) {
-                var27 = var26;
-            }
-
-            var8.setColorOpaque_F(var18 * var27, var21 * var27, var24 * var27);
-            this.renderWestFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 3));
-            var9 = true;
-        }
-
-        if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2 - 1, var3, var4, 4)) {
-            var27 = var1.getBlockBrightness(this.blockAccess, var2 - 1, var3, var4);
-            if(var1.minX > 0.0D) {
-                var27 = var26;
-            }
-
-            var8.setColorOpaque_F(var19 * var27, var22 * var27, var25 * var27);
-            this.renderNorthFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 4));
-            var9 = true;
-        }
-
-        if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2 + 1, var3, var4, 5)) {
-            var27 = var1.getBlockBrightness(this.blockAccess, var2 + 1, var3, var4);
-            if(var1.maxX < 1.0D) {
-                var27 = var26;
-            }
-
-            var8.setColorOpaque_F(var19 * var27, var22 * var27, var25 * var27);
-            this.renderSouthFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 5));
-            var9 = true;
-        }
-
-        return var9;
-    }
-
-    public boolean renderBlockCactus(Block var1, int var2, int var3, int var4) {
-        int var5 = var1.colorMultiplier(this.blockAccess, var2, var3, var4);
-        float var6 = (float)(var5 >> 16 & 255) / 255.0F;
-        float var7 = (float)(var5 >> 8 & 255) / 255.0F;
-        float var8 = (float)(var5 & 255) / 255.0F;
-        return this.func_1230_b(var1, var2, var3, var4, var6, var7, var8);
-    }
-
-    public boolean func_1230_b(Block var1, int var2, int var3, int var4, float var5, float var6, float var7) {
-        Tessellator var8 = Tessellator.instance;
-        boolean var9 = false;
-        float var10 = 0.5F;
-        float var11 = 1.0F;
-        float var12 = 0.8F;
-        float var13 = 0.6F;
-        float var14 = var10 * var5;
-        float var15 = var11 * var5;
-        float var16 = var12 * var5;
-        float var17 = var13 * var5;
-        float var18 = var10 * var6;
-        float var19 = var11 * var6;
-        float var20 = var12 * var6;
-        float var21 = var13 * var6;
-        float var22 = var10 * var7;
-        float var23 = var11 * var7;
-        float var24 = var12 * var7;
-        float var25 = var13 * var7;
-        float var26 = 1.0F / 16.0F;
-        float var27 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-        float var28;
-        if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3 - 1, var4, 0)) {
-            var28 = var1.getBlockBrightness(this.blockAccess, var2, var3 - 1, var4);
-            var8.setColorOpaque_F(var14 * var28, var18 * var28, var22 * var28);
-            this.renderBottomFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 0));
-            var9 = true;
-        }
-
-        if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3 + 1, var4, 1)) {
-            var28 = var1.getBlockBrightness(this.blockAccess, var2, var3 + 1, var4);
-            if(var1.maxY != 1.0D && !var1.blockMaterial.getIsLiquid()) {
-                var28 = var27;
-            }
-
-            var8.setColorOpaque_F(var15 * var28, var19 * var28, var23 * var28);
-            this.renderTopFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 1));
-            var9 = true;
-        }
-
-        if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 - 1, 2)) {
-            var28 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4 - 1);
-            if(var1.minZ > 0.0D) {
-                var28 = var27;
-            }
-
-            var8.setColorOpaque_F(var16 * var28, var20 * var28, var24 * var28);
-            var8.setTranslationF(0.0F, 0.0F, var26);
-            this.renderEastFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 2));
-            var8.setTranslationF(0.0F, 0.0F, -var26);
-            var9 = true;
-        }
-
-        if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2, var3, var4 + 1, 3)) {
-            var28 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4 + 1);
-            if(var1.maxZ < 1.0D) {
-                var28 = var27;
-            }
-
-            var8.setColorOpaque_F(var16 * var28, var20 * var28, var24 * var28);
-            var8.setTranslationF(0.0F, 0.0F, -var26);
-            this.renderWestFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 3));
-            var8.setTranslationF(0.0F, 0.0F, var26);
-            var9 = true;
-        }
-
-        if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2 - 1, var3, var4, 4)) {
-            var28 = var1.getBlockBrightness(this.blockAccess, var2 - 1, var3, var4);
-            if(var1.minX > 0.0D) {
-                var28 = var27;
-            }
-
-            var8.setColorOpaque_F(var17 * var28, var21 * var28, var25 * var28);
-            var8.setTranslationF(var26, 0.0F, 0.0F);
-            this.renderNorthFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 4));
-            var8.setTranslationF(-var26, 0.0F, 0.0F);
-            var9 = true;
-        }
-
-        if(this.renderAllFaces || var1.shouldSideBeRendered(this.blockAccess, var2 + 1, var3, var4, 5)) {
-            var28 = var1.getBlockBrightness(this.blockAccess, var2 + 1, var3, var4);
-            if(var1.maxX < 1.0D) {
-                var28 = var27;
-            }
-
-            var8.setColorOpaque_F(var17 * var28, var21 * var28, var25 * var28);
-            var8.setTranslationF(-var26, 0.0F, 0.0F);
-            this.renderSouthFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 5));
-            var8.setTranslationF(var26, 0.0F, 0.0F);
-            var9 = true;
-        }
-
-        return var9;
-    }
-
-    public boolean renderBlockFence(Block var1, int var2, int var3, int var4) {
-        boolean var5 = false;
-        float var6 = 6.0F / 16.0F;
-        float var7 = 10.0F / 16.0F;
-        var1.setBlockBounds(var6, 0.0F, var6, var7, 1.0F, var7);
-        this.renderStandardBlock(var1, var2, var3, var4);
-        boolean var8 = false;
-        boolean var9 = false;
-        if(this.blockAccess.getBlockId(var2 - 1, var3, var4) == var1.blockID || this.blockAccess.getBlockId(var2 + 1, var3, var4) == var1.blockID) {
-            var8 = true;
-        }
-
-        if(this.blockAccess.getBlockId(var2, var3, var4 - 1) == var1.blockID || this.blockAccess.getBlockId(var2, var3, var4 + 1) == var1.blockID) {
-            var9 = true;
-        }
-
-        boolean var10 = this.blockAccess.getBlockId(var2 - 1, var3, var4) == var1.blockID;
-        boolean var11 = this.blockAccess.getBlockId(var2 + 1, var3, var4) == var1.blockID;
-        boolean var12 = this.blockAccess.getBlockId(var2, var3, var4 - 1) == var1.blockID;
-        boolean var13 = this.blockAccess.getBlockId(var2, var3, var4 + 1) == var1.blockID;
-        if(!var8 && !var9) {
-            var8 = true;
-        }
-
-        var6 = 7.0F / 16.0F;
-        var7 = 9.0F / 16.0F;
-        float var14 = 12.0F / 16.0F;
-        float var15 = 15.0F / 16.0F;
-        float var16 = var10 ? 0.0F : var6;
-        float var17 = var11 ? 1.0F : var7;
-        float var18 = var12 ? 0.0F : var6;
-        float var19 = var13 ? 1.0F : var7;
-        if(var8) {
-            var1.setBlockBounds(var16, var14, var6, var17, var15, var7);
-            this.renderStandardBlock(var1, var2, var3, var4);
-        }
-
-        if(var9) {
-            var1.setBlockBounds(var6, var14, var18, var7, var15, var19);
-            this.renderStandardBlock(var1, var2, var3, var4);
-        }
-
-        var14 = 6.0F / 16.0F;
-        var15 = 9.0F / 16.0F;
-        if(var8) {
-            var1.setBlockBounds(var16, var14, var6, var17, var15, var7);
-            this.renderStandardBlock(var1, var2, var3, var4);
-        }
-
-        if(var9) {
-            var1.setBlockBounds(var6, var14, var18, var7, var15, var19);
-            this.renderStandardBlock(var1, var2, var3, var4);
-        }
-
-        var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-        return var5;
-    }
-
-    public boolean renderBlockStairs(Block var1, int var2, int var3, int var4) {
-        boolean var5 = false;
-        int var6 = this.blockAccess.getBlockMetadata(var2, var3, var4);
-        if(var6 == 0) {
-            var1.setBlockBounds(0.0F, 0.0F, 0.0F, 0.5F, 0.5F, 1.0F);
-            this.renderStandardBlock(var1, var2, var3, var4);
-            var1.setBlockBounds(0.5F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-            this.renderStandardBlock(var1, var2, var3, var4);
-        } else if(var6 == 1) {
-            var1.setBlockBounds(0.0F, 0.0F, 0.0F, 0.5F, 1.0F, 1.0F);
-            this.renderStandardBlock(var1, var2, var3, var4);
-            var1.setBlockBounds(0.5F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
-            this.renderStandardBlock(var1, var2, var3, var4);
-        } else if(var6 == 2) {
-            var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 0.5F);
-            this.renderStandardBlock(var1, var2, var3, var4);
-            var1.setBlockBounds(0.0F, 0.0F, 0.5F, 1.0F, 1.0F, 1.0F);
-            this.renderStandardBlock(var1, var2, var3, var4);
-        } else if(var6 == 3) {
-            var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.5F);
-            this.renderStandardBlock(var1, var2, var3, var4);
-            var1.setBlockBounds(0.0F, 0.0F, 0.5F, 1.0F, 0.5F, 1.0F);
-            this.renderStandardBlock(var1, var2, var3, var4);
-        }
-
-        var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-        return var5;
-    }
-
-    public boolean renderBlockDoor(Block var1, int var2, int var3, int var4) {
-        Tessellator var5 = Tessellator.instance;
-        BlockDoor var6 = (BlockDoor)var1;
-        boolean var7 = false;
-        float var8 = 0.5F;
-        float var9 = 1.0F;
-        float var10 = 0.8F;
-        float var11 = 0.6F;
-        float var12 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4);
-        float var13 = var1.getBlockBrightness(this.blockAccess, var2, var3 - 1, var4);
-        if(var6.minY > 0.0D) {
-            var13 = var12;
-        }
-
-        if(Block.lightValue[var1.blockID] > 0) {
-            var13 = 1.0F;
-        }
-
-        var5.setColorOpaque_F(var8 * var13, var8 * var13, var8 * var13);
-        this.renderBottomFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 0));
-        var7 = true;
-        var13 = var1.getBlockBrightness(this.blockAccess, var2, var3 + 1, var4);
-        if(var6.maxY < 1.0D) {
-            var13 = var12;
-        }
-
-        if(Block.lightValue[var1.blockID] > 0) {
-            var13 = 1.0F;
-        }
-
-        var5.setColorOpaque_F(var9 * var13, var9 * var13, var9 * var13);
-        this.renderTopFace(var1, (double)var2, (double)var3, (double)var4, var1.getBlockTexture(this.blockAccess, var2, var3, var4, 1));
-        var7 = true;
-        var13 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4 - 1);
-        if(var6.minZ > 0.0D) {
-            var13 = var12;
-        }
-
-        if(Block.lightValue[var1.blockID] > 0) {
-            var13 = 1.0F;
-        }
-
-        var5.setColorOpaque_F(var10 * var13, var10 * var13, var10 * var13);
-        int var14 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 2);
-        if(var14 < 0) {
-            this.flipTexture = true;
-            var14 = -var14;
-        }
-
-        this.renderEastFace(var1, (double)var2, (double)var3, (double)var4, var14);
-        var7 = true;
-        this.flipTexture = false;
-        var13 = var1.getBlockBrightness(this.blockAccess, var2, var3, var4 + 1);
-        if(var6.maxZ < 1.0D) {
-            var13 = var12;
-        }
-
-        if(Block.lightValue[var1.blockID] > 0) {
-            var13 = 1.0F;
-        }
-
-        var5.setColorOpaque_F(var10 * var13, var10 * var13, var10 * var13);
-        var14 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 3);
-        if(var14 < 0) {
-            this.flipTexture = true;
-            var14 = -var14;
-        }
-
-        this.renderWestFace(var1, (double)var2, (double)var3, (double)var4, var14);
-        var7 = true;
-        this.flipTexture = false;
-        var13 = var1.getBlockBrightness(this.blockAccess, var2 - 1, var3, var4);
-        if(var6.minX > 0.0D) {
-            var13 = var12;
-        }
-
-        if(Block.lightValue[var1.blockID] > 0) {
-            var13 = 1.0F;
-        }
-
-        var5.setColorOpaque_F(var11 * var13, var11 * var13, var11 * var13);
-        var14 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 4);
-        if(var14 < 0) {
-            this.flipTexture = true;
-            var14 = -var14;
-        }
-
-        this.renderNorthFace(var1, (double)var2, (double)var3, (double)var4, var14);
-        var7 = true;
-        this.flipTexture = false;
-        var13 = var1.getBlockBrightness(this.blockAccess, var2 + 1, var3, var4);
-        if(var6.maxX < 1.0D) {
-            var13 = var12;
-        }
-
-        if(Block.lightValue[var1.blockID] > 0) {
-            var13 = 1.0F;
-        }
-
-        var5.setColorOpaque_F(var11 * var13, var11 * var13, var11 * var13);
-        var14 = var1.getBlockTexture(this.blockAccess, var2, var3, var4, 5);
-        if(var14 < 0) {
-            this.flipTexture = true;
-            var14 = -var14;
-        }
-
-        this.renderSouthFace(var1, (double)var2, (double)var3, (double)var4, var14);
-        var7 = true;
-        this.flipTexture = false;
-        return var7;
-    }
-
-    public void renderBottomFace(Block var1, double var2, double var4, double var6, int var8) {
-        Tessellator var9 = Tessellator.instance;
-        if(this.overrideBlockTexture >= 0) {
-            var8 = this.overrideBlockTexture;
-        }
-
-        int var10 = (var8 & 15) << 4;
-        int var11 = var8 & 240;
-        double var12 = ((double)var10 + var1.minX * 16.0D) / 256.0D;
-        double var14 = ((double)var10 + var1.maxX * 16.0D - 0.01D) / 256.0D;
-        double var16 = ((double)var11 + var1.minZ * 16.0D) / 256.0D;
-        double var18 = ((double)var11 + var1.maxZ * 16.0D - 0.01D) / 256.0D;
-        if(var1.minX < 0.0D || var1.maxX > 1.0D) {
-            var12 = (double)(((float)var10 + 0.0F) / 256.0F);
-            var14 = (double)(((float)var10 + 15.99F) / 256.0F);
-        }
-
-        if(var1.minZ < 0.0D || var1.maxZ > 1.0D) {
-            var16 = (double)(((float)var11 + 0.0F) / 256.0F);
-            var18 = (double)(((float)var11 + 15.99F) / 256.0F);
-        }
-
-        double var20 = var2 + var1.minX;
-        double var22 = var2 + var1.maxX;
-        double var24 = var4 + var1.minY;
-        double var26 = var6 + var1.minZ;
-        double var28 = var6 + var1.maxZ;
-        var9.addVertexWithUV(var20, var24, var28, var12, var18);
-        var9.addVertexWithUV(var20, var24, var26, var12, var16);
-        var9.addVertexWithUV(var22, var24, var26, var14, var16);
-        var9.addVertexWithUV(var22, var24, var28, var14, var18);
-    }
-
-    public void renderTopFace(Block var1, double var2, double var4, double var6, int var8) {
-        Tessellator var9 = Tessellator.instance;
-        if(this.overrideBlockTexture >= 0) {
-            var8 = this.overrideBlockTexture;
-        }
-
-        int var10 = (var8 & 15) << 4;
-        int var11 = var8 & 240;
-        double var12 = ((double)var10 + var1.minX * 16.0D) / 256.0D;
-        double var14 = ((double)var10 + var1.maxX * 16.0D - 0.01D) / 256.0D;
-        double var16 = ((double)var11 + var1.minZ * 16.0D) / 256.0D;
-        double var18 = ((double)var11 + var1.maxZ * 16.0D - 0.01D) / 256.0D;
-        if(var1.minX < 0.0D || var1.maxX > 1.0D) {
-            var12 = (double)(((float)var10 + 0.0F) / 256.0F);
-            var14 = (double)(((float)var10 + 15.99F) / 256.0F);
-        }
-
-        if(var1.minZ < 0.0D || var1.maxZ > 1.0D) {
-            var16 = (double)(((float)var11 + 0.0F) / 256.0F);
-            var18 = (double)(((float)var11 + 15.99F) / 256.0F);
-        }
-
-        double var20 = var2 + var1.minX;
-        double var22 = var2 + var1.maxX;
-        double var24 = var4 + var1.maxY;
-        double var26 = var6 + var1.minZ;
-        double var28 = var6 + var1.maxZ;
-        var9.addVertexWithUV(var22, var24, var28, var14, var18);
-        var9.addVertexWithUV(var22, var24, var26, var14, var16);
-        var9.addVertexWithUV(var20, var24, var26, var12, var16);
-        var9.addVertexWithUV(var20, var24, var28, var12, var18);
-    }
-
-    public void renderEastFace(Block var1, double var2, double var4, double var6, int var8) {
-        Tessellator var9 = Tessellator.instance;
-        if(this.overrideBlockTexture >= 0) {
-            var8 = this.overrideBlockTexture;
-        }
-
-        int var10 = (var8 & 15) << 4;
-        int var11 = var8 & 240;
-        double var12 = ((double)var10 + var1.minX * 16.0D) / 256.0D;
-        double var14 = ((double)var10 + var1.maxX * 16.0D - 0.01D) / 256.0D;
-        double var16 = ((double)var11 + var1.minY * 16.0D) / 256.0D;
-        double var18 = ((double)var11 + var1.maxY * 16.0D - 0.01D) / 256.0D;
-        double var20;
-        if(this.flipTexture) {
-            var20 = var12;
-            var12 = var14;
-            var14 = var20;
-        }
-
-        if(var1.minX < 0.0D || var1.maxX > 1.0D) {
-            var12 = (double)(((float)var10 + 0.0F) / 256.0F);
-            var14 = (double)(((float)var10 + 15.99F) / 256.0F);
-        }
-
-        if(var1.minY < 0.0D || var1.maxY > 1.0D) {
-            var16 = (double)(((float)var11 + 0.0F) / 256.0F);
-            var18 = (double)(((float)var11 + 15.99F) / 256.0F);
-        }
-
-        var20 = var2 + var1.minX;
-        double var22 = var2 + var1.maxX;
-        double var24 = var4 + var1.minY;
-        double var26 = var4 + var1.maxY;
-        double var28 = var6 + var1.minZ;
-        var9.addVertexWithUV(var20, var26, var28, var14, var16);
-        var9.addVertexWithUV(var22, var26, var28, var12, var16);
-        var9.addVertexWithUV(var22, var24, var28, var12, var18);
-        var9.addVertexWithUV(var20, var24, var28, var14, var18);
-    }
-
-    public void renderWestFace(Block var1, double var2, double var4, double var6, int var8) {
-        Tessellator var9 = Tessellator.instance;
-        if(this.overrideBlockTexture >= 0) {
-            var8 = this.overrideBlockTexture;
-        }
-
-        int var10 = (var8 & 15) << 4;
-        int var11 = var8 & 240;
-        double var12 = ((double)var10 + var1.minX * 16.0D) / 256.0D;
-        double var14 = ((double)var10 + var1.maxX * 16.0D - 0.01D) / 256.0D;
-        double var16 = ((double)var11 + var1.minY * 16.0D) / 256.0D;
-        double var18 = ((double)var11 + var1.maxY * 16.0D - 0.01D) / 256.0D;
-        double var20;
-        if(this.flipTexture) {
-            var20 = var12;
-            var12 = var14;
-            var14 = var20;
-        }
-
-        if(var1.minX < 0.0D || var1.maxX > 1.0D) {
-            var12 = (double)(((float)var10 + 0.0F) / 256.0F);
-            var14 = (double)(((float)var10 + 15.99F) / 256.0F);
-        }
-
-        if(var1.minY < 0.0D || var1.maxY > 1.0D) {
-            var16 = (double)(((float)var11 + 0.0F) / 256.0F);
-            var18 = (double)(((float)var11 + 15.99F) / 256.0F);
-        }
-
-        var20 = var2 + var1.minX;
-        double var22 = var2 + var1.maxX;
-        double var24 = var4 + var1.minY;
-        double var26 = var4 + var1.maxY;
-        double var28 = var6 + var1.maxZ;
-        var9.addVertexWithUV(var20, var26, var28, var12, var16);
-        var9.addVertexWithUV(var20, var24, var28, var12, var18);
-        var9.addVertexWithUV(var22, var24, var28, var14, var18);
-        var9.addVertexWithUV(var22, var26, var28, var14, var16);
-    }
-
-    public void renderNorthFace(Block var1, double var2, double var4, double var6, int var8) {
-        Tessellator var9 = Tessellator.instance;
-        if(this.overrideBlockTexture >= 0) {
-            var8 = this.overrideBlockTexture;
-        }
-
-        int var10 = (var8 & 15) << 4;
-        int var11 = var8 & 240;
-        double var12 = ((double)var10 + var1.minZ * 16.0D) / 256.0D;
-        double var14 = ((double)var10 + var1.maxZ * 16.0D - 0.01D) / 256.0D;
-        double var16 = ((double)var11 + var1.minY * 16.0D) / 256.0D;
-        double var18 = ((double)var11 + var1.maxY * 16.0D - 0.01D) / 256.0D;
-        double var20;
-        if(this.flipTexture) {
-            var20 = var12;
-            var12 = var14;
-            var14 = var20;
-        }
-
-        if(var1.minZ < 0.0D || var1.maxZ > 1.0D) {
-            var12 = (double)(((float)var10 + 0.0F) / 256.0F);
-            var14 = (double)(((float)var10 + 15.99F) / 256.0F);
-        }
-
-        if(var1.minY < 0.0D || var1.maxY > 1.0D) {
-            var16 = (double)(((float)var11 + 0.0F) / 256.0F);
-            var18 = (double)(((float)var11 + 15.99F) / 256.0F);
-        }
-
-        var20 = var2 + var1.minX;
-        double var22 = var4 + var1.minY;
-        double var24 = var4 + var1.maxY;
-        double var26 = var6 + var1.minZ;
-        double var28 = var6 + var1.maxZ;
-        var9.addVertexWithUV(var20, var24, var28, var14, var16);
-        var9.addVertexWithUV(var20, var24, var26, var12, var16);
-        var9.addVertexWithUV(var20, var22, var26, var12, var18);
-        var9.addVertexWithUV(var20, var22, var28, var14, var18);
-    }
-
-    public void renderSouthFace(Block var1, double var2, double var4, double var6, int var8) {
-        Tessellator var9 = Tessellator.instance;
-        if(this.overrideBlockTexture >= 0) {
-            var8 = this.overrideBlockTexture;
-        }
-
-        int var10 = (var8 & 15) << 4;
-        int var11 = var8 & 240;
-        double var12 = ((double)var10 + var1.minZ * 16.0D) / 256.0D;
-        double var14 = ((double)var10 + var1.maxZ * 16.0D - 0.01D) / 256.0D;
-        double var16 = ((double)var11 + var1.minY * 16.0D) / 256.0D;
-        double var18 = ((double)var11 + var1.maxY * 16.0D - 0.01D) / 256.0D;
-        double var20;
-        if(this.flipTexture) {
-            var20 = var12;
-            var12 = var14;
-            var14 = var20;
-        }
-
-        if(var1.minZ < 0.0D || var1.maxZ > 1.0D) {
-            var12 = (double)(((float)var10 + 0.0F) / 256.0F);
-            var14 = (double)(((float)var10 + 15.99F) / 256.0F);
-        }
-
-        if(var1.minY < 0.0D || var1.maxY > 1.0D) {
-            var16 = (double)(((float)var11 + 0.0F) / 256.0F);
-            var18 = (double)(((float)var11 + 15.99F) / 256.0F);
-        }
-
-        var20 = var2 + var1.maxX;
-        double var22 = var4 + var1.minY;
-        double var24 = var4 + var1.maxY;
-        double var26 = var6 + var1.minZ;
-        double var28 = var6 + var1.maxZ;
-        var9.addVertexWithUV(var20, var22, var28, var12, var18);
-        var9.addVertexWithUV(var20, var22, var26, var14, var18);
-        var9.addVertexWithUV(var20, var24, var26, var14, var16);
-        var9.addVertexWithUV(var20, var24, var28, var12, var16);
-    }
-
-    public void func_1238_a(Block var1, float var2) {
-        int var3 = var1.getRenderType();
-        Tessellator var4 = Tessellator.instance;
-        if(var3 == 0) {
-            var1.func_237_e();
-            GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
-            float var5 = 0.5F;
-            float var6 = 1.0F;
-            float var7 = 0.8F;
-            float var8 = 0.6F;
-            var4.startDrawingQuads();
-            var4.setColorRGBA_F(var6, var6, var6, var2);
-            this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(0));
-            var4.setColorRGBA_F(var5, var5, var5, var2);
-            this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(1));
-            var4.setColorRGBA_F(var7, var7, var7, var2);
-            this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(2));
-            this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(3));
-            var4.setColorRGBA_F(var8, var8, var8, var2);
-            this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(4));
-            this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(5));
-            var4.draw();
-            GL11.glTranslatef(0.5F, 0.5F, 0.5F);
-        }
-
-    }
-
-    public void func_1227_a(Block var1) {
-        byte var2 = -1;
-        Tessellator var3 = Tessellator.instance;
-        int var4 = var1.getRenderType();
-        if(var4 == 0) {
-            var1.func_237_e();
-            GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
-            var3.startDrawingQuads();
-            var3.setNormal(0.0F, -1.0F, 0.0F);
-            this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(0));
-            var3.draw();
-            var3.startDrawingQuads();
-            var3.setNormal(0.0F, 1.0F, 0.0F);
-            this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(1));
-            var3.draw();
-            var3.startDrawingQuads();
-            var3.setNormal(0.0F, 0.0F, -1.0F);
-            this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(2));
-            var3.draw();
-            var3.startDrawingQuads();
-            var3.setNormal(0.0F, 0.0F, 1.0F);
-            this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(3));
-            var3.draw();
-            var3.startDrawingQuads();
-            var3.setNormal(-1.0F, 0.0F, 0.0F);
-            this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(4));
-            var3.draw();
-            var3.startDrawingQuads();
-            var3.setNormal(1.0F, 0.0F, 0.0F);
-            this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(5));
-            var3.draw();
-            GL11.glTranslatef(0.5F, 0.5F, 0.5F);
-        } else if(var4 == 1) {
-            var3.startDrawingQuads();
-            var3.setNormal(0.0F, -1.0F, 0.0F);
-            this.func_1239_a(var1, var2, -0.5D, -0.5D, -0.5D);
-            var3.draw();
-        } else if(var4 == 13) {
-            var1.func_237_e();
-            GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
-            float var5 = 1.0F / 16.0F;
-            var3.startDrawingQuads();
-            var3.setNormal(0.0F, -1.0F, 0.0F);
-            this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(0));
-            var3.draw();
-            var3.startDrawingQuads();
-            var3.setNormal(0.0F, 1.0F, 0.0F);
-            this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(1));
-            var3.draw();
-            var3.startDrawingQuads();
-            var3.setNormal(0.0F, 0.0F, -1.0F);
-            var3.setTranslationF(0.0F, 0.0F, var5);
-            this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(2));
-            var3.setTranslationF(0.0F, 0.0F, -var5);
-            var3.draw();
-            var3.startDrawingQuads();
-            var3.setNormal(0.0F, 0.0F, 1.0F);
-            var3.setTranslationF(0.0F, 0.0F, -var5);
-            this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(3));
-            var3.setTranslationF(0.0F, 0.0F, var5);
-            var3.draw();
-            var3.startDrawingQuads();
-            var3.setNormal(-1.0F, 0.0F, 0.0F);
-            var3.setTranslationF(var5, 0.0F, 0.0F);
-            this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(4));
-            var3.setTranslationF(-var5, 0.0F, 0.0F);
-            var3.draw();
-            var3.startDrawingQuads();
-            var3.setNormal(1.0F, 0.0F, 0.0F);
-            var3.setTranslationF(-var5, 0.0F, 0.0F);
-            this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(5));
-            var3.setTranslationF(var5, 0.0F, 0.0F);
-            var3.draw();
-            GL11.glTranslatef(0.5F, 0.5F, 0.5F);
-        } else if(var4 == 6) {
-            var3.startDrawingQuads();
-            var3.setNormal(0.0F, -1.0F, 0.0F);
-            this.func_1245_b(var1, var2, -0.5D, -0.5D, -0.5D);
-            var3.draw();
-        } else if(var4 == 2) {
-            var3.startDrawingQuads();
-            var3.setNormal(0.0F, -1.0F, 0.0F);
-            this.renderTorchAtAngle(var1, -0.5D, -0.5D, -0.5D, 0.0D, 0.0D);
-            var3.draw();
-        } else {
-            int var7;
-            if(var4 == 10) {
-                for(var7 = 0; var7 < 2; ++var7) {
-                    if(var7 == 0) {
-                        var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.5F);
-                    }
-
-                    if(var7 == 1) {
-                        var1.setBlockBounds(0.0F, 0.0F, 0.5F, 1.0F, 0.5F, 1.0F);
-                    }
-
-                    GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
-                    var3.startDrawingQuads();
-                    var3.setNormal(0.0F, -1.0F, 0.0F);
-                    this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(0));
-                    var3.draw();
-                    var3.startDrawingQuads();
-                    var3.setNormal(0.0F, 1.0F, 0.0F);
-                    this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(1));
-                    var3.draw();
-                    var3.startDrawingQuads();
-                    var3.setNormal(0.0F, 0.0F, -1.0F);
-                    this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(2));
-                    var3.draw();
-                    var3.startDrawingQuads();
-                    var3.setNormal(0.0F, 0.0F, 1.0F);
-                    this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(3));
-                    var3.draw();
-                    var3.startDrawingQuads();
-                    var3.setNormal(-1.0F, 0.0F, 0.0F);
-                    this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(4));
-                    var3.draw();
-                    var3.startDrawingQuads();
-                    var3.setNormal(1.0F, 0.0F, 0.0F);
-                    this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(5));
-                    var3.draw();
-                    GL11.glTranslatef(0.5F, 0.5F, 0.5F);
-                }
-            } else if(var4 == 11) {
-                for(var7 = 0; var7 < 4; ++var7) {
-                    float var6 = 2.0F / 16.0F;
-                    if(var7 == 0) {
-                        var1.setBlockBounds(0.5F - var6, 0.0F, 0.0F, 0.5F + var6, 1.0F, var6 * 2.0F);
-                    }
-
-                    if(var7 == 1) {
-                        var1.setBlockBounds(0.5F - var6, 0.0F, 1.0F - var6 * 2.0F, 0.5F + var6, 1.0F, 1.0F);
-                    }
-
-                    var6 = 1.0F / 16.0F;
-                    if(var7 == 2) {
-                        var1.setBlockBounds(0.5F - var6, 1.0F - var6 * 3.0F, -var6 * 2.0F, 0.5F + var6, 1.0F - var6, 1.0F + var6 * 2.0F);
-                    }
-
-                    if(var7 == 3) {
-                        var1.setBlockBounds(0.5F - var6, 0.5F - var6 * 3.0F, -var6 * 2.0F, 0.5F + var6, 0.5F - var6, 1.0F + var6 * 2.0F);
-                    }
-
-                    GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
-                    var3.startDrawingQuads();
-                    var3.setNormal(0.0F, -1.0F, 0.0F);
-                    this.renderBottomFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(0));
-                    var3.draw();
-                    var3.startDrawingQuads();
-                    var3.setNormal(0.0F, 1.0F, 0.0F);
-                    this.renderTopFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(1));
-                    var3.draw();
-                    var3.startDrawingQuads();
-                    var3.setNormal(0.0F, 0.0F, -1.0F);
-                    this.renderEastFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(2));
-                    var3.draw();
-                    var3.startDrawingQuads();
-                    var3.setNormal(0.0F, 0.0F, 1.0F);
-                    this.renderWestFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(3));
-                    var3.draw();
-                    var3.startDrawingQuads();
-                    var3.setNormal(-1.0F, 0.0F, 0.0F);
-                    this.renderNorthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(4));
-                    var3.draw();
-                    var3.startDrawingQuads();
-                    var3.setNormal(1.0F, 0.0F, 0.0F);
-                    this.renderSouthFace(var1, 0.0D, 0.0D, 0.0D, var1.getBlockTextureFromSide(5));
-                    var3.draw();
-                    GL11.glTranslatef(0.5F, 0.5F, 0.5F);
-                }
-
-                var1.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-            }
-        }
-
-    }
-
-    public static boolean func_1219_a(int var0) {
-        return var0 == 0 ? true : (var0 == 13 ? true : (var0 == 10 ? true : var0 == 11));
+            Material material1 = blockAccess.getBlockMaterial(j1, k1, l1);
+            if (material1 == material) {
+                int i2 = blockAccess.getBlockMetadata(j1, k1, l1);
+                if (i2 >= 8 || i2 == 0) {
+                    f += BlockFluids.setFluidHeight(i2) * 10F;
+                    l += 10;
+                }
+                f += BlockFluids.setFluidHeight(i2);
+                l++;
+                continue;
+            }
+            if (!material1.func_878_a()) {
+                f++;
+                l++;
+            }
+        }
+
+        return 1.0F - f / (float) l;
+    }
+
+    public void func_1243_a(Block block, World world, int i, int j, int k) {
+        float f = 0.5F;
+        float f1 = 1.0F;
+        float f2 = 0.8F;
+        float f3 = 0.6F;
+        Tessellator tessellator = Tessellator.instance;
+        tessellator.startDrawingQuads();
+        float f4 = block.getBlockBrightness(world, i, j, k);
+        float f5 = block.getBlockBrightness(world, i, j - 1, k);
+        if (f5 < f4) {
+            f5 = f4;
+        }
+        tessellator.setColorOpaque_F(f * f5, f * f5, f * f5);
+        renderBottomFace(block, -0.5D, -0.5D, -0.5D, block.getBlockTextureFromSide(0));
+        f5 = block.getBlockBrightness(world, i, j + 1, k);
+        if (f5 < f4) {
+            f5 = f4;
+        }
+        tessellator.setColorOpaque_F(f1 * f5, f1 * f5, f1 * f5);
+        renderTopFace(block, -0.5D, -0.5D, -0.5D, block.getBlockTextureFromSide(1));
+        f5 = block.getBlockBrightness(world, i, j, k - 1);
+        if (f5 < f4) {
+            f5 = f4;
+        }
+        tessellator.setColorOpaque_F(f2 * f5, f2 * f5, f2 * f5);
+        renderEastFace(block, -0.5D, -0.5D, -0.5D, block.getBlockTextureFromSide(2));
+        f5 = block.getBlockBrightness(world, i, j, k + 1);
+        if (f5 < f4) {
+            f5 = f4;
+        }
+        tessellator.setColorOpaque_F(f2 * f5, f2 * f5, f2 * f5);
+        renderWestFace(block, -0.5D, -0.5D, -0.5D, block.getBlockTextureFromSide(3));
+        f5 = block.getBlockBrightness(world, i - 1, j, k);
+        if (f5 < f4) {
+            f5 = f4;
+        }
+        tessellator.setColorOpaque_F(f3 * f5, f3 * f5, f3 * f5);
+        renderNorthFace(block, -0.5D, -0.5D, -0.5D, block.getBlockTextureFromSide(4));
+        f5 = block.getBlockBrightness(world, i + 1, j, k);
+        if (f5 < f4) {
+            f5 = f4;
+        }
+        tessellator.setColorOpaque_F(f3 * f5, f3 * f5, f3 * f5);
+        renderSouthFace(block, -0.5D, -0.5D, -0.5D, block.getBlockTextureFromSide(5));
+        tessellator.draw();
+    }
+
+    public boolean renderStandardBlock(Block block, int i, int j, int k) {
+        int l = block.colorMultiplier(blockAccess, i, j, k);
+        float f = (float) (l >> 16 & 0xff) / 255F;
+        float f1 = (float) (l >> 8 & 0xff) / 255F;
+        float f2 = (float) (l & 0xff) / 255F;
+        return renderStandardBlockWithColorMultiplier(block, i, j, k, f, f1, f2);
+    }
+
+    public boolean renderStandardBlockWithColorMultiplier(Block block, int i, int j, int k, float f, float f1, float f2) {
+        Tessellator tessellator = Tessellator.instance;
+        boolean flag = false;
+        float f3 = 0.5F;
+        float f4 = 1.0F;
+        float f5 = 0.8F;
+        float f6 = 0.6F;
+        float f7 = f4 * f;
+        float f8 = f4 * f1;
+        float f9 = f4 * f2;
+        if (block == Block.grass) {
+            f = f1 = f2 = 1.0F;
+        }
+        float f10 = f3 * f;
+        float f11 = f5 * f;
+        float f12 = f6 * f;
+        float f13 = f3 * f1;
+        float f14 = f5 * f1;
+        float f15 = f6 * f1;
+        float f16 = f3 * f2;
+        float f17 = f5 * f2;
+        float f18 = f6 * f2;
+        float f19 = block.getBlockBrightness(blockAccess, i, j, k);
+        if (renderAllFaces || block.shouldSideBeRendered(blockAccess, i, j - 1, k, 0)) {
+            float f20 = block.getBlockBrightness(blockAccess, i, j - 1, k);
+            tessellator.setColorOpaque_F(f10 * f20, f13 * f20, f16 * f20);
+            renderBottomFace(block, i, j, k, block.getBlockTexture(blockAccess, i, j, k, 0));
+            flag = true;
+        }
+        if (renderAllFaces || block.shouldSideBeRendered(blockAccess, i, j + 1, k, 1)) {
+            float f21 = block.getBlockBrightness(blockAccess, i, j + 1, k);
+            if (block.maxY != 1.0D && !block.blockMaterial.getIsLiquid()) {
+                f21 = f19;
+            }
+            tessellator.setColorOpaque_F(f7 * f21, f8 * f21, f9 * f21);
+            renderTopFace(block, i, j, k, block.getBlockTexture(blockAccess, i, j, k, 1));
+            flag = true;
+        }
+        if (renderAllFaces || block.shouldSideBeRendered(blockAccess, i, j, k - 1, 2)) {
+            float f22 = block.getBlockBrightness(blockAccess, i, j, k - 1);
+            if (block.minZ > 0.0D) {
+                f22 = f19;
+            }
+            tessellator.setColorOpaque_F(f11 * f22, f14 * f22, f17 * f22);
+            renderEastFace(block, i, j, k, block.getBlockTexture(blockAccess, i, j, k, 2));
+            flag = true;
+        }
+        if (renderAllFaces || block.shouldSideBeRendered(blockAccess, i, j, k + 1, 3)) {
+            float f23 = block.getBlockBrightness(blockAccess, i, j, k + 1);
+            if (block.maxZ < 1.0D) {
+                f23 = f19;
+            }
+            tessellator.setColorOpaque_F(f11 * f23, f14 * f23, f17 * f23);
+            renderWestFace(block, i, j, k, block.getBlockTexture(blockAccess, i, j, k, 3));
+            flag = true;
+        }
+        if (renderAllFaces || block.shouldSideBeRendered(blockAccess, i - 1, j, k, 4)) {
+            float f24 = block.getBlockBrightness(blockAccess, i - 1, j, k);
+            if (block.minX > 0.0D) {
+                f24 = f19;
+            }
+            tessellator.setColorOpaque_F(f12 * f24, f15 * f24, f18 * f24);
+            renderNorthFace(block, i, j, k, block.getBlockTexture(blockAccess, i, j, k, 4));
+            flag = true;
+        }
+        if (renderAllFaces || block.shouldSideBeRendered(blockAccess, i + 1, j, k, 5)) {
+            float f25 = block.getBlockBrightness(blockAccess, i + 1, j, k);
+            if (block.maxX < 1.0D) {
+                f25 = f19;
+            }
+            tessellator.setColorOpaque_F(f12 * f25, f15 * f25, f18 * f25);
+            renderSouthFace(block, i, j, k, block.getBlockTexture(blockAccess, i, j, k, 5));
+            flag = true;
+        }
+        return flag;
+    }
+
+    public boolean renderBlockCactus(Block block, int i, int j, int k) {
+        int l = block.colorMultiplier(blockAccess, i, j, k);
+        float f = (float) (l >> 16 & 0xff) / 255F;
+        float f1 = (float) (l >> 8 & 0xff) / 255F;
+        float f2 = (float) (l & 0xff) / 255F;
+        return func_1230_b(block, i, j, k, f, f1, f2);
+    }
+
+    public boolean func_1230_b(Block block, int i, int j, int k, float f, float f1, float f2) {
+        Tessellator tessellator = Tessellator.instance;
+        boolean flag = false;
+        float f3 = 0.5F;
+        float f4 = 1.0F;
+        float f5 = 0.8F;
+        float f6 = 0.6F;
+        float f7 = f3 * f;
+        float f8 = f4 * f;
+        float f9 = f5 * f;
+        float f10 = f6 * f;
+        float f11 = f3 * f1;
+        float f12 = f4 * f1;
+        float f13 = f5 * f1;
+        float f14 = f6 * f1;
+        float f15 = f3 * f2;
+        float f16 = f4 * f2;
+        float f17 = f5 * f2;
+        float f18 = f6 * f2;
+        float f19 = 0.0625F;
+        float f20 = block.getBlockBrightness(blockAccess, i, j, k);
+        if (renderAllFaces || block.shouldSideBeRendered(blockAccess, i, j - 1, k, 0)) {
+            float f21 = block.getBlockBrightness(blockAccess, i, j - 1, k);
+            tessellator.setColorOpaque_F(f7 * f21, f11 * f21, f15 * f21);
+            renderBottomFace(block, i, j, k, block.getBlockTexture(blockAccess, i, j, k, 0));
+            flag = true;
+        }
+        if (renderAllFaces || block.shouldSideBeRendered(blockAccess, i, j + 1, k, 1)) {
+            float f22 = block.getBlockBrightness(blockAccess, i, j + 1, k);
+            if (block.maxY != 1.0D && !block.blockMaterial.getIsLiquid()) {
+                f22 = f20;
+            }
+            tessellator.setColorOpaque_F(f8 * f22, f12 * f22, f16 * f22);
+            renderTopFace(block, i, j, k, block.getBlockTexture(blockAccess, i, j, k, 1));
+            flag = true;
+        }
+        if (renderAllFaces || block.shouldSideBeRendered(blockAccess, i, j, k - 1, 2)) {
+            float f23 = block.getBlockBrightness(blockAccess, i, j, k - 1);
+            if (block.minZ > 0.0D) {
+                f23 = f20;
+            }
+            tessellator.setColorOpaque_F(f9 * f23, f13 * f23, f17 * f23);
+            tessellator.setTranslationF(0.0F, 0.0F, f19);
+            renderEastFace(block, i, j, k, block.getBlockTexture(blockAccess, i, j, k, 2));
+            tessellator.setTranslationF(0.0F, 0.0F, -f19);
+            flag = true;
+        }
+        if (renderAllFaces || block.shouldSideBeRendered(blockAccess, i, j, k + 1, 3)) {
+            float f24 = block.getBlockBrightness(blockAccess, i, j, k + 1);
+            if (block.maxZ < 1.0D) {
+                f24 = f20;
+            }
+            tessellator.setColorOpaque_F(f9 * f24, f13 * f24, f17 * f24);
+            tessellator.setTranslationF(0.0F, 0.0F, -f19);
+            renderWestFace(block, i, j, k, block.getBlockTexture(blockAccess, i, j, k, 3));
+            tessellator.setTranslationF(0.0F, 0.0F, f19);
+            flag = true;
+        }
+        if (renderAllFaces || block.shouldSideBeRendered(blockAccess, i - 1, j, k, 4)) {
+            float f25 = block.getBlockBrightness(blockAccess, i - 1, j, k);
+            if (block.minX > 0.0D) {
+                f25 = f20;
+            }
+            tessellator.setColorOpaque_F(f10 * f25, f14 * f25, f18 * f25);
+            tessellator.setTranslationF(f19, 0.0F, 0.0F);
+            renderNorthFace(block, i, j, k, block.getBlockTexture(blockAccess, i, j, k, 4));
+            tessellator.setTranslationF(-f19, 0.0F, 0.0F);
+            flag = true;
+        }
+        if (renderAllFaces || block.shouldSideBeRendered(blockAccess, i + 1, j, k, 5)) {
+            float f26 = block.getBlockBrightness(blockAccess, i + 1, j, k);
+            if (block.maxX < 1.0D) {
+                f26 = f20;
+            }
+            tessellator.setColorOpaque_F(f10 * f26, f14 * f26, f18 * f26);
+            tessellator.setTranslationF(-f19, 0.0F, 0.0F);
+            renderSouthFace(block, i, j, k, block.getBlockTexture(blockAccess, i, j, k, 5));
+            tessellator.setTranslationF(f19, 0.0F, 0.0F);
+            flag = true;
+        }
+        return flag;
+    }
+
+    public boolean renderBlockFence(Block block, int i, int j, int k) {
+        boolean flag = false;
+        float f = 0.375F;
+        float f1 = 0.625F;
+        block.setBlockBounds(f, 0.0F, f, f1, 1.0F, f1);
+        renderStandardBlock(block, i, j, k);
+        boolean flag1 = false;
+        boolean flag2 = false;
+        if (blockAccess.getBlockId(i - 1, j, k) == block.blockID || blockAccess.getBlockId(i + 1, j, k) == block.blockID) {
+            flag1 = true;
+        }
+        if (blockAccess.getBlockId(i, j, k - 1) == block.blockID || blockAccess.getBlockId(i, j, k + 1) == block.blockID) {
+            flag2 = true;
+        }
+        boolean flag3 = blockAccess.getBlockId(i - 1, j, k) == block.blockID;
+        boolean flag4 = blockAccess.getBlockId(i + 1, j, k) == block.blockID;
+        boolean flag5 = blockAccess.getBlockId(i, j, k - 1) == block.blockID;
+        boolean flag6 = blockAccess.getBlockId(i, j, k + 1) == block.blockID;
+        if (!flag1 && !flag2) {
+            flag1 = true;
+        }
+        f = 0.4375F;
+        f1 = 0.5625F;
+        float f2 = 0.75F;
+        float f3 = 0.9375F;
+        float f4 = flag3 ? 0.0F : f;
+        float f5 = flag4 ? 1.0F : f1;
+        float f6 = flag5 ? 0.0F : f;
+        float f7 = flag6 ? 1.0F : f1;
+        if (flag1) {
+            block.setBlockBounds(f4, f2, f, f5, f3, f1);
+            renderStandardBlock(block, i, j, k);
+        }
+        if (flag2) {
+            block.setBlockBounds(f, f2, f6, f1, f3, f7);
+            renderStandardBlock(block, i, j, k);
+        }
+        f2 = 0.375F;
+        f3 = 0.5625F;
+        if (flag1) {
+            block.setBlockBounds(f4, f2, f, f5, f3, f1);
+            renderStandardBlock(block, i, j, k);
+        }
+        if (flag2) {
+            block.setBlockBounds(f, f2, f6, f1, f3, f7);
+            renderStandardBlock(block, i, j, k);
+        }
+        block.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+        return flag;
+    }
+
+    public boolean renderBlockStairs(Block block, int i, int j, int k) {
+        boolean flag = false;
+        int l = blockAccess.getBlockMetadata(i, j, k);
+        if (l == 0) {
+            block.setBlockBounds(0.0F, 0.0F, 0.0F, 0.5F, 0.5F, 1.0F);
+            renderStandardBlock(block, i, j, k);
+            block.setBlockBounds(0.5F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+            renderStandardBlock(block, i, j, k);
+        } else if (l == 1) {
+            block.setBlockBounds(0.0F, 0.0F, 0.0F, 0.5F, 1.0F, 1.0F);
+            renderStandardBlock(block, i, j, k);
+            block.setBlockBounds(0.5F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
+            renderStandardBlock(block, i, j, k);
+        } else if (l == 2) {
+            block.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 0.5F);
+            renderStandardBlock(block, i, j, k);
+            block.setBlockBounds(0.0F, 0.0F, 0.5F, 1.0F, 1.0F, 1.0F);
+            renderStandardBlock(block, i, j, k);
+        } else if (l == 3) {
+            block.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.5F);
+            renderStandardBlock(block, i, j, k);
+            block.setBlockBounds(0.0F, 0.0F, 0.5F, 1.0F, 0.5F, 1.0F);
+            renderStandardBlock(block, i, j, k);
+        }
+        block.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+        return flag;
+    }
+
+    public boolean renderBlockDoor(Block block, int i, int j, int k) {
+        Tessellator tessellator = Tessellator.instance;
+        BlockDoor blockdoor = (BlockDoor) block;
+        boolean flag = false;
+        float f = 0.5F;
+        float f1 = 1.0F;
+        float f2 = 0.8F;
+        float f3 = 0.6F;
+        float f4 = block.getBlockBrightness(blockAccess, i, j, k);
+        float f5 = block.getBlockBrightness(blockAccess, i, j - 1, k);
+        if (blockdoor.minY > 0.0D) {
+            f5 = f4;
+        }
+        if (Block.lightValue[block.blockID] > 0) {
+            f5 = 1.0F;
+        }
+        tessellator.setColorOpaque_F(f * f5, f * f5, f * f5);
+        renderBottomFace(block, i, j, k, block.getBlockTexture(blockAccess, i, j, k, 0));
+        flag = true;
+        f5 = block.getBlockBrightness(blockAccess, i, j + 1, k);
+        if (blockdoor.maxY < 1.0D) {
+            f5 = f4;
+        }
+        if (Block.lightValue[block.blockID] > 0) {
+            f5 = 1.0F;
+        }
+        tessellator.setColorOpaque_F(f1 * f5, f1 * f5, f1 * f5);
+        renderTopFace(block, i, j, k, block.getBlockTexture(blockAccess, i, j, k, 1));
+        flag = true;
+        f5 = block.getBlockBrightness(blockAccess, i, j, k - 1);
+        if (blockdoor.minZ > 0.0D) {
+            f5 = f4;
+        }
+        if (Block.lightValue[block.blockID] > 0) {
+            f5 = 1.0F;
+        }
+        tessellator.setColorOpaque_F(f2 * f5, f2 * f5, f2 * f5);
+        int l = block.getBlockTexture(blockAccess, i, j, k, 2);
+        if (l < 0) {
+            flipTexture = true;
+            l = -l;
+        }
+        renderEastFace(block, i, j, k, l);
+        flag = true;
+        flipTexture = false;
+        f5 = block.getBlockBrightness(blockAccess, i, j, k + 1);
+        if (blockdoor.maxZ < 1.0D) {
+            f5 = f4;
+        }
+        if (Block.lightValue[block.blockID] > 0) {
+            f5 = 1.0F;
+        }
+        tessellator.setColorOpaque_F(f2 * f5, f2 * f5, f2 * f5);
+        l = block.getBlockTexture(blockAccess, i, j, k, 3);
+        if (l < 0) {
+            flipTexture = true;
+            l = -l;
+        }
+        renderWestFace(block, i, j, k, l);
+        flag = true;
+        flipTexture = false;
+        f5 = block.getBlockBrightness(blockAccess, i - 1, j, k);
+        if (blockdoor.minX > 0.0D) {
+            f5 = f4;
+        }
+        if (Block.lightValue[block.blockID] > 0) {
+            f5 = 1.0F;
+        }
+        tessellator.setColorOpaque_F(f3 * f5, f3 * f5, f3 * f5);
+        l = block.getBlockTexture(blockAccess, i, j, k, 4);
+        if (l < 0) {
+            flipTexture = true;
+            l = -l;
+        }
+        renderNorthFace(block, i, j, k, l);
+        flag = true;
+        flipTexture = false;
+        f5 = block.getBlockBrightness(blockAccess, i + 1, j, k);
+        if (blockdoor.maxX < 1.0D) {
+            f5 = f4;
+        }
+        if (Block.lightValue[block.blockID] > 0) {
+            f5 = 1.0F;
+        }
+        tessellator.setColorOpaque_F(f3 * f5, f3 * f5, f3 * f5);
+        l = block.getBlockTexture(blockAccess, i, j, k, 5);
+        if (l < 0) {
+            flipTexture = true;
+            l = -l;
+        }
+        renderSouthFace(block, i, j, k, l);
+        flag = true;
+        flipTexture = false;
+        return flag;
+    }
+
+    public void renderBottomFace(Block block, double d, double d1, double d2,
+                                 int i) {
+        Tessellator tessellator = Tessellator.instance;
+        if (overrideBlockTexture >= 0) {
+            i = overrideBlockTexture;
+        }
+        int j = (i & 0xf) << 4;
+        int k = i & 0xf0;
+        double d3 = ((double) j + block.minX * 16D) / 256D;
+        double d4 = (((double) j + block.maxX * 16D) - 0.01D) / 256D;
+        double d5 = ((double) k + block.minZ * 16D) / 256D;
+        double d6 = (((double) k + block.maxZ * 16D) - 0.01D) / 256D;
+        if (block.minX < 0.0D || block.maxX > 1.0D) {
+            d3 = ((float) j + 0.0F) / 256F;
+            d4 = ((float) j + 15.99F) / 256F;
+        }
+        if (block.minZ < 0.0D || block.maxZ > 1.0D) {
+            d5 = ((float) k + 0.0F) / 256F;
+            d6 = ((float) k + 15.99F) / 256F;
+        }
+        double d7 = d + block.minX;
+        double d8 = d + block.maxX;
+        double d9 = d1 + block.minY;
+        double d10 = d2 + block.minZ;
+        double d11 = d2 + block.maxZ;
+        tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
+        tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
+        tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
+        tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
+    }
+
+    public void renderTopFace(Block block, double d, double d1, double d2,
+                              int i) {
+        Tessellator tessellator = Tessellator.instance;
+        if (overrideBlockTexture >= 0) {
+            i = overrideBlockTexture;
+        }
+        int j = (i & 0xf) << 4;
+        int k = i & 0xf0;
+        double d3 = ((double) j + block.minX * 16D) / 256D;
+        double d4 = (((double) j + block.maxX * 16D) - 0.01D) / 256D;
+        double d5 = ((double) k + block.minZ * 16D) / 256D;
+        double d6 = (((double) k + block.maxZ * 16D) - 0.01D) / 256D;
+        if (block.minX < 0.0D || block.maxX > 1.0D) {
+            d3 = ((float) j + 0.0F) / 256F;
+            d4 = ((float) j + 15.99F) / 256F;
+        }
+        if (block.minZ < 0.0D || block.maxZ > 1.0D) {
+            d5 = ((float) k + 0.0F) / 256F;
+            d6 = ((float) k + 15.99F) / 256F;
+        }
+        double d7 = d + block.minX;
+        double d8 = d + block.maxX;
+        double d9 = d1 + block.maxY;
+        double d10 = d2 + block.minZ;
+        double d11 = d2 + block.maxZ;
+        tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
+        tessellator.addVertexWithUV(d8, d9, d10, d4, d5);
+        tessellator.addVertexWithUV(d7, d9, d10, d3, d5);
+        tessellator.addVertexWithUV(d7, d9, d11, d3, d6);
+    }
+
+    public void renderEastFace(Block block, double d, double d1, double d2,
+                               int i) {
+        Tessellator tessellator = Tessellator.instance;
+        if (overrideBlockTexture >= 0) {
+            i = overrideBlockTexture;
+        }
+        int j = (i & 0xf) << 4;
+        int k = i & 0xf0;
+        double d3 = ((double) j + block.minX * 16D) / 256D;
+        double d4 = (((double) j + block.maxX * 16D) - 0.01D) / 256D;
+        double d5 = ((double) k + block.minY * 16D) / 256D;
+        double d6 = (((double) k + block.maxY * 16D) - 0.01D) / 256D;
+        if (flipTexture) {
+            double d7 = d3;
+            d3 = d4;
+            d4 = d7;
+        }
+        if (block.minX < 0.0D || block.maxX > 1.0D) {
+            d3 = ((float) j + 0.0F) / 256F;
+            d4 = ((float) j + 15.99F) / 256F;
+        }
+        if (block.minY < 0.0D || block.maxY > 1.0D) {
+            d5 = ((float) k + 0.0F) / 256F;
+            d6 = ((float) k + 15.99F) / 256F;
+        }
+        double d8 = d + block.minX;
+        double d9 = d + block.maxX;
+        double d10 = d1 + block.minY;
+        double d11 = d1 + block.maxY;
+        double d12 = d2 + block.minZ;
+        tessellator.addVertexWithUV(d8, d11, d12, d4, d5);
+        tessellator.addVertexWithUV(d9, d11, d12, d3, d5);
+        tessellator.addVertexWithUV(d9, d10, d12, d3, d6);
+        tessellator.addVertexWithUV(d8, d10, d12, d4, d6);
+    }
+
+    public void renderWestFace(Block block, double d, double d1, double d2,
+                               int i) {
+        Tessellator tessellator = Tessellator.instance;
+        if (overrideBlockTexture >= 0) {
+            i = overrideBlockTexture;
+        }
+        int j = (i & 0xf) << 4;
+        int k = i & 0xf0;
+        double d3 = ((double) j + block.minX * 16D) / 256D;
+        double d4 = (((double) j + block.maxX * 16D) - 0.01D) / 256D;
+        double d5 = ((double) k + block.minY * 16D) / 256D;
+        double d6 = (((double) k + block.maxY * 16D) - 0.01D) / 256D;
+        if (flipTexture) {
+            double d7 = d3;
+            d3 = d4;
+            d4 = d7;
+        }
+        if (block.minX < 0.0D || block.maxX > 1.0D) {
+            d3 = ((float) j + 0.0F) / 256F;
+            d4 = ((float) j + 15.99F) / 256F;
+        }
+        if (block.minY < 0.0D || block.maxY > 1.0D) {
+            d5 = ((float) k + 0.0F) / 256F;
+            d6 = ((float) k + 15.99F) / 256F;
+        }
+        double d8 = d + block.minX;
+        double d9 = d + block.maxX;
+        double d10 = d1 + block.minY;
+        double d11 = d1 + block.maxY;
+        double d12 = d2 + block.maxZ;
+        tessellator.addVertexWithUV(d8, d11, d12, d3, d5);
+        tessellator.addVertexWithUV(d8, d10, d12, d3, d6);
+        tessellator.addVertexWithUV(d9, d10, d12, d4, d6);
+        tessellator.addVertexWithUV(d9, d11, d12, d4, d5);
+    }
+
+    public void renderNorthFace(Block block, double d, double d1, double d2,
+                                int i) {
+        Tessellator tessellator = Tessellator.instance;
+        if (overrideBlockTexture >= 0) {
+            i = overrideBlockTexture;
+        }
+        int j = (i & 0xf) << 4;
+        int k = i & 0xf0;
+        double d3 = ((double) j + block.minZ * 16D) / 256D;
+        double d4 = (((double) j + block.maxZ * 16D) - 0.01D) / 256D;
+        double d5 = ((double) k + block.minY * 16D) / 256D;
+        double d6 = (((double) k + block.maxY * 16D) - 0.01D) / 256D;
+        if (flipTexture) {
+            double d7 = d3;
+            d3 = d4;
+            d4 = d7;
+        }
+        if (block.minZ < 0.0D || block.maxZ > 1.0D) {
+            d3 = ((float) j + 0.0F) / 256F;
+            d4 = ((float) j + 15.99F) / 256F;
+        }
+        if (block.minY < 0.0D || block.maxY > 1.0D) {
+            d5 = ((float) k + 0.0F) / 256F;
+            d6 = ((float) k + 15.99F) / 256F;
+        }
+        double d8 = d + block.minX;
+        double d9 = d1 + block.minY;
+        double d10 = d1 + block.maxY;
+        double d11 = d2 + block.minZ;
+        double d12 = d2 + block.maxZ;
+        tessellator.addVertexWithUV(d8, d10, d12, d4, d5);
+        tessellator.addVertexWithUV(d8, d10, d11, d3, d5);
+        tessellator.addVertexWithUV(d8, d9, d11, d3, d6);
+        tessellator.addVertexWithUV(d8, d9, d12, d4, d6);
+    }
+
+    public void renderSouthFace(Block block, double d, double d1, double d2,
+                                int i) {
+        Tessellator tessellator = Tessellator.instance;
+        if (overrideBlockTexture >= 0) {
+            i = overrideBlockTexture;
+        }
+        int j = (i & 0xf) << 4;
+        int k = i & 0xf0;
+        double d3 = ((double) j + block.minZ * 16D) / 256D;
+        double d4 = (((double) j + block.maxZ * 16D) - 0.01D) / 256D;
+        double d5 = ((double) k + block.minY * 16D) / 256D;
+        double d6 = (((double) k + block.maxY * 16D) - 0.01D) / 256D;
+        if (flipTexture) {
+            double d7 = d3;
+            d3 = d4;
+            d4 = d7;
+        }
+        if (block.minZ < 0.0D || block.maxZ > 1.0D) {
+            d3 = ((float) j + 0.0F) / 256F;
+            d4 = ((float) j + 15.99F) / 256F;
+        }
+        if (block.minY < 0.0D || block.maxY > 1.0D) {
+            d5 = ((float) k + 0.0F) / 256F;
+            d6 = ((float) k + 15.99F) / 256F;
+        }
+        double d8 = d + block.maxX;
+        double d9 = d1 + block.minY;
+        double d10 = d1 + block.maxY;
+        double d11 = d2 + block.minZ;
+        double d12 = d2 + block.maxZ;
+        tessellator.addVertexWithUV(d8, d9, d12, d3, d6);
+        tessellator.addVertexWithUV(d8, d9, d11, d4, d6);
+        tessellator.addVertexWithUV(d8, d10, d11, d4, d5);
+        tessellator.addVertexWithUV(d8, d10, d12, d3, d5);
+    }
+
+    public void func_1238_a(Block block, float f) {
+        int i = block.getRenderType();
+        Tessellator tessellator = Tessellator.instance;
+        if (i == 0) {
+            block.func_237_e();
+            GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
+            float f1 = 0.5F;
+            float f2 = 1.0F;
+            float f3 = 0.8F;
+            float f4 = 0.6F;
+            tessellator.startDrawingQuads();
+            tessellator.setColorRGBA_F(f2, f2, f2, f);
+            renderBottomFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSide(0));
+            tessellator.setColorRGBA_F(f1, f1, f1, f);
+            renderTopFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSide(1));
+            tessellator.setColorRGBA_F(f3, f3, f3, f);
+            renderEastFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSide(2));
+            renderWestFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSide(3));
+            tessellator.setColorRGBA_F(f4, f4, f4, f);
+            renderNorthFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSide(4));
+            renderSouthFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSide(5));
+            tessellator.draw();
+            GL11.glTranslatef(0.5F, 0.5F, 0.5F);
+        }
+    }
+
+    public void func_1227_a(Block block) {
+        byte byte0 = -1;
+        Tessellator tessellator = Tessellator.instance;
+        int i = block.getRenderType();
+        if (i == 0) {
+            block.func_237_e();
+            GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
+            tessellator.startDrawingQuads();
+            tessellator.setNormal(0.0F, -1F, 0.0F);
+            renderBottomFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSide(0));
+            tessellator.draw();
+            tessellator.startDrawingQuads();
+            tessellator.setNormal(0.0F, 1.0F, 0.0F);
+            renderTopFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSide(1));
+            tessellator.draw();
+            tessellator.startDrawingQuads();
+            tessellator.setNormal(0.0F, 0.0F, -1F);
+            renderEastFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSide(2));
+            tessellator.draw();
+            tessellator.startDrawingQuads();
+            tessellator.setNormal(0.0F, 0.0F, 1.0F);
+            renderWestFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSide(3));
+            tessellator.draw();
+            tessellator.startDrawingQuads();
+            tessellator.setNormal(-1F, 0.0F, 0.0F);
+            renderNorthFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSide(4));
+            tessellator.draw();
+            tessellator.startDrawingQuads();
+            tessellator.setNormal(1.0F, 0.0F, 0.0F);
+            renderSouthFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSide(5));
+            tessellator.draw();
+            GL11.glTranslatef(0.5F, 0.5F, 0.5F);
+        } else if (i == 1) {
+            tessellator.startDrawingQuads();
+            tessellator.setNormal(0.0F, -1F, 0.0F);
+            func_1239_a(block, byte0, -0.5D, -0.5D, -0.5D);
+            tessellator.draw();
+        } else if (i == 13) {
+            block.func_237_e();
+            GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
+            float f = 0.0625F;
+            tessellator.startDrawingQuads();
+            tessellator.setNormal(0.0F, -1F, 0.0F);
+            renderBottomFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSide(0));
+            tessellator.draw();
+            tessellator.startDrawingQuads();
+            tessellator.setNormal(0.0F, 1.0F, 0.0F);
+            renderTopFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSide(1));
+            tessellator.draw();
+            tessellator.startDrawingQuads();
+            tessellator.setNormal(0.0F, 0.0F, -1F);
+            tessellator.setTranslationF(0.0F, 0.0F, f);
+            renderEastFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSide(2));
+            tessellator.setTranslationF(0.0F, 0.0F, -f);
+            tessellator.draw();
+            tessellator.startDrawingQuads();
+            tessellator.setNormal(0.0F, 0.0F, 1.0F);
+            tessellator.setTranslationF(0.0F, 0.0F, -f);
+            renderWestFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSide(3));
+            tessellator.setTranslationF(0.0F, 0.0F, f);
+            tessellator.draw();
+            tessellator.startDrawingQuads();
+            tessellator.setNormal(-1F, 0.0F, 0.0F);
+            tessellator.setTranslationF(f, 0.0F, 0.0F);
+            renderNorthFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSide(4));
+            tessellator.setTranslationF(-f, 0.0F, 0.0F);
+            tessellator.draw();
+            tessellator.startDrawingQuads();
+            tessellator.setNormal(1.0F, 0.0F, 0.0F);
+            tessellator.setTranslationF(-f, 0.0F, 0.0F);
+            renderSouthFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSide(5));
+            tessellator.setTranslationF(f, 0.0F, 0.0F);
+            tessellator.draw();
+            GL11.glTranslatef(0.5F, 0.5F, 0.5F);
+        } else if (i == 6) {
+            tessellator.startDrawingQuads();
+            tessellator.setNormal(0.0F, -1F, 0.0F);
+            func_1245_b(block, byte0, -0.5D, -0.5D, -0.5D);
+            tessellator.draw();
+        } else if (i == 2) {
+            tessellator.startDrawingQuads();
+            tessellator.setNormal(0.0F, -1F, 0.0F);
+            renderTorchAtAngle(block, -0.5D, -0.5D, -0.5D, 0.0D, 0.0D);
+            tessellator.draw();
+        } else if (i == 10) {
+            for (int j = 0; j < 2; j++) {
+                if (j == 0) {
+                    block.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.5F);
+                }
+                if (j == 1) {
+                    block.setBlockBounds(0.0F, 0.0F, 0.5F, 1.0F, 0.5F, 1.0F);
+                }
+                GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
+                tessellator.startDrawingQuads();
+                tessellator.setNormal(0.0F, -1F, 0.0F);
+                renderBottomFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSide(0));
+                tessellator.draw();
+                tessellator.startDrawingQuads();
+                tessellator.setNormal(0.0F, 1.0F, 0.0F);
+                renderTopFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSide(1));
+                tessellator.draw();
+                tessellator.startDrawingQuads();
+                tessellator.setNormal(0.0F, 0.0F, -1F);
+                renderEastFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSide(2));
+                tessellator.draw();
+                tessellator.startDrawingQuads();
+                tessellator.setNormal(0.0F, 0.0F, 1.0F);
+                renderWestFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSide(3));
+                tessellator.draw();
+                tessellator.startDrawingQuads();
+                tessellator.setNormal(-1F, 0.0F, 0.0F);
+                renderNorthFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSide(4));
+                tessellator.draw();
+                tessellator.startDrawingQuads();
+                tessellator.setNormal(1.0F, 0.0F, 0.0F);
+                renderSouthFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSide(5));
+                tessellator.draw();
+                GL11.glTranslatef(0.5F, 0.5F, 0.5F);
+            }
+
+        } else if (i == 11) {
+            for (int k = 0; k < 4; k++) {
+                float f1 = 0.125F;
+                if (k == 0) {
+                    block.setBlockBounds(0.5F - f1, 0.0F, 0.0F, 0.5F + f1, 1.0F, f1 * 2.0F);
+                }
+                if (k == 1) {
+                    block.setBlockBounds(0.5F - f1, 0.0F, 1.0F - f1 * 2.0F, 0.5F + f1, 1.0F, 1.0F);
+                }
+                f1 = 0.0625F;
+                if (k == 2) {
+                    block.setBlockBounds(0.5F - f1, 1.0F - f1 * 3F, -f1 * 2.0F, 0.5F + f1, 1.0F - f1, 1.0F + f1 * 2.0F);
+                }
+                if (k == 3) {
+                    block.setBlockBounds(0.5F - f1, 0.5F - f1 * 3F, -f1 * 2.0F, 0.5F + f1, 0.5F - f1, 1.0F + f1 * 2.0F);
+                }
+                GL11.glTranslatef(-0.5F, -0.5F, -0.5F);
+                tessellator.startDrawingQuads();
+                tessellator.setNormal(0.0F, -1F, 0.0F);
+                renderBottomFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSide(0));
+                tessellator.draw();
+                tessellator.startDrawingQuads();
+                tessellator.setNormal(0.0F, 1.0F, 0.0F);
+                renderTopFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSide(1));
+                tessellator.draw();
+                tessellator.startDrawingQuads();
+                tessellator.setNormal(0.0F, 0.0F, -1F);
+                renderEastFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSide(2));
+                tessellator.draw();
+                tessellator.startDrawingQuads();
+                tessellator.setNormal(0.0F, 0.0F, 1.0F);
+                renderWestFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSide(3));
+                tessellator.draw();
+                tessellator.startDrawingQuads();
+                tessellator.setNormal(-1F, 0.0F, 0.0F);
+                renderNorthFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSide(4));
+                tessellator.draw();
+                tessellator.startDrawingQuads();
+                tessellator.setNormal(1.0F, 0.0F, 0.0F);
+                renderSouthFace(block, 0.0D, 0.0D, 0.0D, block.getBlockTextureFromSide(5));
+                tessellator.draw();
+                GL11.glTranslatef(0.5F, 0.5F, 0.5F);
+            }
+
+            block.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+        }
     }
 }
