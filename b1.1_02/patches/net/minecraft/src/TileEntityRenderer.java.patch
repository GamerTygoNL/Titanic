--- net/minecraft/src/TileEntityRenderer.java
+++ net/minecraft/src/TileEntityRenderer.java
@@ -1,14 +1,14 @@
 package net.minecraft.src;
 
+import org.lwjgl.opengl.GL11;
+
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
-import org.lwjgl.opengl.GL11;
 
 public class TileEntityRenderer {
-    private Map specialRendererMap = new HashMap();
+
     public static TileEntityRenderer instance = new TileEntityRenderer();
-    private FontRenderer fontRenderer;
     public static double staticPlayerX;
     public static double staticPlayerY;
     public static double staticPlayerZ;
@@ -20,67 +20,70 @@
     public double playerX;
     public double playerY;
     public double playerZ;
-
+    private Map specialRendererMap;
+    private FontRenderer fontRenderer;
     private TileEntityRenderer() {
-        this.specialRendererMap.put(TileEntitySign.class, new TileEntitySignRenderer());
-        this.specialRendererMap.put(TileEntityMobSpawner.class, new TileEntityMobSpawnerRenderer());
-        Iterator var1 = this.specialRendererMap.values().iterator();
-
-        while(var1.hasNext()) {
-            TileEntitySpecialRenderer var2 = (TileEntitySpecialRenderer)var1.next();
-            var2.setTileEntityRenderer(this);
-        }
-
-    }
-
-    public TileEntitySpecialRenderer getSpecialRendererForClass(Class var1) {
-        TileEntitySpecialRenderer var2 = (TileEntitySpecialRenderer)this.specialRendererMap.get(var1);
-        if(var2 == null && var1 != TileEntity.class) {
-            var2 = this.getSpecialRendererForClass(var1.getSuperclass());
-            this.specialRendererMap.put(var1, var2);
-        }
-
-        return var2;
-    }
-
-    public boolean hasSpecialRenderer(TileEntity var1) {
-        return this.getSpecialRendererForEntity(var1) != null;
-    }
-
-    public TileEntitySpecialRenderer getSpecialRendererForEntity(TileEntity var1) {
-        return var1 == null ? null : this.getSpecialRendererForClass(var1.getClass());
-    }
-
-    public void setRenderingContext(World var1, RenderEngine var2, FontRenderer var3, EntityPlayer var4, float var5) {
-        this.worldObj = var1;
-        this.renderEngine = var2;
-        this.entityPlayer = var4;
-        this.fontRenderer = var3;
-        this.playerYaw = var4.prevRotationYaw + (var4.rotationYaw - var4.prevRotationYaw) * var5;
-        this.playerPitch = var4.prevRotationPitch + (var4.rotationPitch - var4.prevRotationPitch) * var5;
-        this.playerX = var4.lastTickPosX + (var4.posX - var4.lastTickPosX) * (double)var5;
-        this.playerY = var4.lastTickPosY + (var4.posY - var4.lastTickPosY) * (double)var5;
-        this.playerZ = var4.lastTickPosZ + (var4.posZ - var4.lastTickPosZ) * (double)var5;
-    }
-
-    public void renderTileEntity(TileEntity var1, float var2) {
-        if(var1.getDistanceFrom(this.playerX, this.playerY, this.playerZ) < 4096.0D) {
-            float var3 = this.worldObj.getLightBrightness(var1.xCoord, var1.yCoord, var1.zCoord);
-            GL11.glColor3f(var3, var3, var3);
-            this.renderTileEntityAt(var1, (double)var1.xCoord - staticPlayerX, (double)var1.yCoord - staticPlayerY, (double)var1.zCoord - staticPlayerZ, var2);
-        }
-
-    }
-
-    public void renderTileEntityAt(TileEntity var1, double var2, double var4, double var6, float var8) {
-        TileEntitySpecialRenderer var9 = this.getSpecialRendererForEntity(var1);
-        if(var9 != null) {
-            var9.renderTileEntityAt(var1, var2, var4, var6, var8);
-        }
-
+        specialRendererMap = new HashMap();
+        specialRendererMap.put(TileEntitySign.class, new TileEntitySignRenderer());
+        specialRendererMap.put(TileEntityMobSpawner.class, new TileEntityMobSpawnerRenderer());
+        TileEntitySpecialRenderer tileentityspecialrenderer;
+        for (Iterator iterator = specialRendererMap.values().iterator(); iterator.hasNext(); tileentityspecialrenderer.setTileEntityRenderer(this)) {
+            tileentityspecialrenderer = (TileEntitySpecialRenderer) iterator.next();
+        }
+
+    }
+
+    public TileEntitySpecialRenderer getSpecialRendererForClass(Class class1) {
+        TileEntitySpecialRenderer tileentityspecialrenderer = (TileEntitySpecialRenderer) specialRendererMap.get(class1);
+        if (tileentityspecialrenderer == null && class1 != (TileEntity.class)) {
+            tileentityspecialrenderer = getSpecialRendererForClass(class1.getSuperclass());
+            specialRendererMap.put(class1, tileentityspecialrenderer);
+        }
+        return tileentityspecialrenderer;
+    }
+
+    public boolean hasSpecialRenderer(TileEntity tileentity) {
+        return getSpecialRendererForEntity(tileentity) != null;
+    }
+
+    public TileEntitySpecialRenderer getSpecialRendererForEntity(TileEntity tileentity) {
+        if (tileentity == null) {
+            return null;
+        } else {
+            return getSpecialRendererForClass(tileentity.getClass());
+        }
+    }
+
+    public void setRenderingContext(World world, RenderEngine renderengine, FontRenderer fontrenderer, EntityPlayer entityplayer, float f) {
+        worldObj = world;
+        renderEngine = renderengine;
+        entityPlayer = entityplayer;
+        fontRenderer = fontrenderer;
+        playerYaw = entityplayer.prevRotationYaw + (entityplayer.rotationYaw - entityplayer.prevRotationYaw) * f;
+        playerPitch = entityplayer.prevRotationPitch + (entityplayer.rotationPitch - entityplayer.prevRotationPitch) * f;
+        playerX = entityplayer.lastTickPosX + (entityplayer.posX - entityplayer.lastTickPosX) * (double) f;
+        playerY = entityplayer.lastTickPosY + (entityplayer.posY - entityplayer.lastTickPosY) * (double) f;
+        playerZ = entityplayer.lastTickPosZ + (entityplayer.posZ - entityplayer.lastTickPosZ) * (double) f;
+    }
+
+    public void renderTileEntity(TileEntity tileentity, float f) {
+        if (tileentity.getDistanceFrom(playerX, playerY, playerZ) < 4096D) {
+            float f1 = worldObj.getLightBrightness(tileentity.xCoord, tileentity.yCoord, tileentity.zCoord);
+            GL11.glColor3f(f1, f1, f1);
+            renderTileEntityAt(tileentity, (double) tileentity.xCoord - staticPlayerX, (double) tileentity.yCoord - staticPlayerY, (double) tileentity.zCoord - staticPlayerZ, f);
+        }
+    }
+
+    public void renderTileEntityAt(TileEntity tileentity, double d, double d1, double d2,
+                                   float f) {
+        TileEntitySpecialRenderer tileentityspecialrenderer = getSpecialRendererForEntity(tileentity);
+        if (tileentityspecialrenderer != null) {
+            tileentityspecialrenderer.renderTileEntityAt(tileentity, d, d1, d2, f);
+        }
     }
 
     public FontRenderer getFontRenderer() {
-        return this.fontRenderer;
+        return fontRenderer;
     }
+
 }
