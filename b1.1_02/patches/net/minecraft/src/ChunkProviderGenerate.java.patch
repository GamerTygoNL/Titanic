--- net/minecraft/src/ChunkProviderGenerate.java
+++ net/minecraft/src/ChunkProviderGenerate.java
@@ -2,537 +2,504 @@
 
 import java.util.Random;
 
-public class ChunkProviderGenerate implements IChunkProvider {
-    private Random rand;
-    private NoiseGeneratorOctaves field_912_k;
-    private NoiseGeneratorOctaves field_911_l;
-    private NoiseGeneratorOctaves field_910_m;
-    private NoiseGeneratorOctaves field_909_n;
-    private NoiseGeneratorOctaves field_908_o;
+public class ChunkProviderGenerate
+        implements IChunkProvider {
+
+    private final Random rand;
+    private final NoiseGeneratorOctaves field_912_k;
+    private final NoiseGeneratorOctaves field_911_l;
+    private final NoiseGeneratorOctaves field_910_m;
+    private final NoiseGeneratorOctaves field_909_n;
+    private final NoiseGeneratorOctaves field_908_o;
+    private final World worldObj;
+    private final MapGenBase field_902_u;
     public NoiseGeneratorOctaves field_922_a;
     public NoiseGeneratorOctaves field_921_b;
     public NoiseGeneratorOctaves field_920_c;
-    private World worldObj;
-    private double[] field_4180_q;
-    private double[] field_905_r = new double[256];
-    private double[] field_904_s = new double[256];
-    private double[] field_903_t = new double[256];
-    private MapGenBase field_902_u = new MapGenCaves();
-    private MobSpawnerBase[] biomesForGeneration;
     double[] field_4185_d;
     double[] field_4184_e;
     double[] field_4183_f;
     double[] field_4182_g;
     double[] field_4181_h;
-    int[][] field_914_i = new int[32][32];
+    int[][] field_914_i;
+    private double[] field_4180_q;
+    private double[] field_905_r;
+    private double[] field_904_s;
+    private double[] field_903_t;
+    private MobSpawnerBase[] biomesForGeneration;
     private double[] generatedTemperatures;
-
-    public ChunkProviderGenerate(World var1, long var2) {
-        this.worldObj = var1;
-        this.rand = new Random(var2);
-        this.field_912_k = new NoiseGeneratorOctaves(this.rand, 16);
-        this.field_911_l = new NoiseGeneratorOctaves(this.rand, 16);
-        this.field_910_m = new NoiseGeneratorOctaves(this.rand, 8);
-        this.field_909_n = new NoiseGeneratorOctaves(this.rand, 4);
-        this.field_908_o = new NoiseGeneratorOctaves(this.rand, 4);
-        this.field_922_a = new NoiseGeneratorOctaves(this.rand, 10);
-        this.field_921_b = new NoiseGeneratorOctaves(this.rand, 16);
-        this.field_920_c = new NoiseGeneratorOctaves(this.rand, 8);
+    public ChunkProviderGenerate(World world, long l) {
+        field_905_r = new double[256];
+        field_904_s = new double[256];
+        field_903_t = new double[256];
+        field_902_u = new MapGenCaves();
+        field_914_i = new int[32][32];
+        worldObj = world;
+        rand = new Random(l);
+        field_912_k = new NoiseGeneratorOctaves(rand, 16);
+        field_911_l = new NoiseGeneratorOctaves(rand, 16);
+        field_910_m = new NoiseGeneratorOctaves(rand, 8);
+        field_909_n = new NoiseGeneratorOctaves(rand, 4);
+        field_908_o = new NoiseGeneratorOctaves(rand, 4);
+        field_922_a = new NoiseGeneratorOctaves(rand, 10);
+        field_921_b = new NoiseGeneratorOctaves(rand, 16);
+        field_920_c = new NoiseGeneratorOctaves(rand, 8);
     }
 
-    public void generateTerrain(int var1, int var2, byte[] var3, MobSpawnerBase[] var4, double[] var5) {
-        byte var6 = 4;
-        byte var7 = 64;
-        int var8 = var6 + 1;
-        byte var9 = 17;
-        int var10 = var6 + 1;
-        this.field_4180_q = this.func_4061_a(this.field_4180_q, var1 * var6, 0, var2 * var6, var8, var9, var10);
-
-        for(int var11 = 0; var11 < var6; ++var11) {
-            for(int var12 = 0; var12 < var6; ++var12) {
-                for(int var13 = 0; var13 < 16; ++var13) {
-                    double var14 = 0.125D;
-                    double var16 = this.field_4180_q[((var11 + 0) * var10 + var12 + 0) * var9 + var13 + 0];
-                    double var18 = this.field_4180_q[((var11 + 0) * var10 + var12 + 1) * var9 + var13 + 0];
-                    double var20 = this.field_4180_q[((var11 + 1) * var10 + var12 + 0) * var9 + var13 + 0];
-                    double var22 = this.field_4180_q[((var11 + 1) * var10 + var12 + 1) * var9 + var13 + 0];
-                    double var24 = (this.field_4180_q[((var11 + 0) * var10 + var12 + 0) * var9 + var13 + 1] - var16) * var14;
-                    double var26 = (this.field_4180_q[((var11 + 0) * var10 + var12 + 1) * var9 + var13 + 1] - var18) * var14;
-                    double var28 = (this.field_4180_q[((var11 + 1) * var10 + var12 + 0) * var9 + var13 + 1] - var20) * var14;
-                    double var30 = (this.field_4180_q[((var11 + 1) * var10 + var12 + 1) * var9 + var13 + 1] - var22) * var14;
-
-                    for(int var32 = 0; var32 < 8; ++var32) {
-                        double var33 = 0.25D;
-                        double var35 = var16;
-                        double var37 = var18;
-                        double var39 = (var20 - var16) * var33;
-                        double var41 = (var22 - var18) * var33;
-
-                        for(int var43 = 0; var43 < 4; ++var43) {
-                            int var44 = var43 + var11 * 4 << 11 | 0 + var12 * 4 << 7 | var13 * 8 + var32;
-                            short var45 = 128;
-                            double var46 = 0.25D;
-                            double var48 = var35;
-                            double var50 = (var37 - var35) * var46;
-
-                            for(int var52 = 0; var52 < 4; ++var52) {
-                                double var53 = var5[(var11 * 4 + var43) * 16 + var12 * 4 + var52];
-                                int var55 = 0;
-                                if(var13 * 8 + var32 < var7) {
-                                    if(var53 < 0.5D && var13 * 8 + var32 >= var7 - 1) {
-                                        var55 = Block.blockIce.blockID;
+    public void generateTerrain(int i, int j, byte[] abyte0, MobSpawnerBase[] amobspawnerbase, double[] ad) {
+        byte byte0 = 4;
+        byte byte1 = 64;
+        int k = byte0 + 1;
+        byte byte2 = 17;
+        int l = byte0 + 1;
+        field_4180_q = func_4061_a(field_4180_q, i * byte0, 0, j * byte0, k, byte2, l);
+        for (int i1 = 0; i1 < byte0; i1++) {
+            for (int j1 = 0; j1 < byte0; j1++) {
+                for (int k1 = 0; k1 < 16; k1++) {
+                    double d = 0.125D;
+                    double d1 = field_4180_q[((i1) * l + (j1)) * byte2 + (k1)];
+                    double d2 = field_4180_q[((i1) * l + (j1 + 1)) * byte2 + (k1)];
+                    double d3 = field_4180_q[((i1 + 1) * l + (j1)) * byte2 + (k1)];
+                    double d4 = field_4180_q[((i1 + 1) * l + (j1 + 1)) * byte2 + (k1)];
+                    double d5 = (field_4180_q[((i1) * l + (j1)) * byte2 + (k1 + 1)] - d1) * d;
+                    double d6 = (field_4180_q[((i1) * l + (j1 + 1)) * byte2 + (k1 + 1)] - d2) * d;
+                    double d7 = (field_4180_q[((i1 + 1) * l + (j1)) * byte2 + (k1 + 1)] - d3) * d;
+                    double d8 = (field_4180_q[((i1 + 1) * l + (j1 + 1)) * byte2 + (k1 + 1)] - d4) * d;
+                    for (int l1 = 0; l1 < 8; l1++) {
+                        double d9 = 0.25D;
+                        double d10 = d1;
+                        double d11 = d2;
+                        double d12 = (d3 - d1) * d9;
+                        double d13 = (d4 - d2) * d9;
+                        for (int i2 = 0; i2 < 4; i2++) {
+                            int j2 = i2 + i1 * 4 << 11 | j1 * 4 << 7 | k1 * 8 + l1;
+                            char c = '\200';
+                            double d14 = 0.25D;
+                            double d15 = d10;
+                            double d16 = (d11 - d10) * d14;
+                            for (int k2 = 0; k2 < 4; k2++) {
+                                double d17 = ad[(i1 * 4 + i2) * 16 + (j1 * 4 + k2)];
+                                int l2 = 0;
+                                if (k1 * 8 + l1 < byte1) {
+                                    if (d17 < 0.5D && k1 * 8 + l1 >= byte1 - 1) {
+                                        l2 = Block.blockIce.blockID;
                                     } else {
-                                        var55 = Block.waterMoving.blockID;
-                                    }
-                                }
-
-                                if(var48 > 0.0D) {
-                                    var55 = Block.stone.blockID;
-                                }
-
-                                var3[var44] = (byte)var55;
-                                var44 += var45;
-                                var48 += var50;
-                            }
-
-                            var35 += var39;
-                            var37 += var41;
-                        }
-
-                        var16 += var24;
-                        var18 += var26;
-                        var20 += var28;
-                        var22 += var30;
-                    }
-                }
-            }
-        }
-
-    }
-
-    public void replaceBlocksForBiome(int var1, int var2, byte[] var3, MobSpawnerBase[] var4) {
-        byte var5 = 64;
-        double var6 = 1.0D / 32.0D;
-        this.field_905_r = this.field_909_n.func_807_a(this.field_905_r, (double)(var1 * 16), (double)(var2 * 16), 0.0D, 16, 16, 1, var6, var6, 1.0D);
-        this.field_904_s = this.field_909_n.func_807_a(this.field_904_s, (double)(var2 * 16), 109.0134D, (double)(var1 * 16), 16, 1, 16, var6, 1.0D, var6);
-        this.field_903_t = this.field_908_o.func_807_a(this.field_903_t, (double)(var1 * 16), (double)(var2 * 16), 0.0D, 16, 16, 1, var6 * 2.0D, var6 * 2.0D, var6 * 2.0D);
-
-        for(int var8 = 0; var8 < 16; ++var8) {
-            for(int var9 = 0; var9 < 16; ++var9) {
-                MobSpawnerBase var10 = var4[var8 + var9 * 16];
-                boolean var11 = this.field_905_r[var8 + var9 * 16] + this.rand.nextDouble() * 0.2D > 0.0D;
-                boolean var12 = this.field_904_s[var8 + var9 * 16] + this.rand.nextDouble() * 0.2D > 3.0D;
-                int var13 = (int)(this.field_903_t[var8 + var9 * 16] / 3.0D + 3.0D + this.rand.nextDouble() * 0.25D);
-                int var14 = -1;
-                byte var15 = var10.topBlock;
-                byte var16 = var10.fillerBlock;
-
-                for(int var17 = 127; var17 >= 0; --var17) {
-                    int var18 = (var8 * 16 + var9) * 128 + var17;
-                    if(var17 <= 0 + this.rand.nextInt(5)) {
-                        var3[var18] = (byte)Block.bedrock.blockID;
-                    } else {
-                        byte var19 = var3[var18];
-                        if(var19 == 0) {
-                            var14 = -1;
-                        } else if(var19 == Block.stone.blockID) {
-                            if(var14 == -1) {
-                                if(var13 <= 0) {
-                                    var15 = 0;
-                                    var16 = (byte)Block.stone.blockID;
-                                } else if(var17 >= var5 - 4 && var17 <= var5 + 1) {
-                                    var15 = var10.topBlock;
-                                    var16 = var10.fillerBlock;
-                                    if(var12) {
-                                        var15 = 0;
-                                    }
-
-                                    if(var12) {
-                                        var16 = (byte)Block.gravel.blockID;
-                                    }
-
-                                    if(var11) {
-                                        var15 = (byte)Block.sand.blockID;
-                                    }
-
-                                    if(var11) {
-                                        var16 = (byte)Block.sand.blockID;
-                                    }
-                                }
-
-                                if(var17 < var5 && var15 == 0) {
-                                    var15 = (byte)Block.waterMoving.blockID;
-                                }
-
-                                var14 = var13;
-                                if(var17 >= var5 - 1) {
-                                    var3[var18] = var15;
-                                } else {
-                                    var3[var18] = var16;
-                                }
-                            } else if(var14 > 0) {
-                                --var14;
-                                var3[var18] = var16;
-                            }
-                        }
-                    }
-                }
-            }
-        }
-
-    }
-
-    public Chunk provideChunk(int var1, int var2) {
-        this.rand.setSeed((long)var1 * 341873128712L + (long)var2 * 132897987541L);
-        byte[] var3 = new byte[-Short.MIN_VALUE];
-        Chunk var4 = new Chunk(this.worldObj, var3, var1, var2);
-        this.biomesForGeneration = this.worldObj.func_4075_a().loadBlockGeneratorData(this.biomesForGeneration, var1 * 16, var2 * 16, 16, 16);
-        double[] var5 = this.worldObj.func_4075_a().temperature;
-        this.generateTerrain(var1, var2, var3, this.biomesForGeneration, var5);
-        this.replaceBlocksForBiome(var1, var2, var3, this.biomesForGeneration);
-        this.field_902_u.func_867_a(this, this.worldObj, var1, var2, var3);
-        var4.func_1024_c();
-        return var4;
-    }
-
-    private double[] func_4061_a(double[] var1, int var2, int var3, int var4, int var5, int var6, int var7) {
-        if(var1 == null) {
-            var1 = new double[var5 * var6 * var7];
-        }
-
-        double var8 = 684.412D;
-        double var10 = 684.412D;
-        double[] var12 = this.worldObj.func_4075_a().temperature;
-        double[] var13 = this.worldObj.func_4075_a().humidity;
-        this.field_4182_g = this.field_922_a.func_4109_a(this.field_4182_g, var2, var4, var5, var7, 1.121D, 1.121D, 0.5D);
-        this.field_4181_h = this.field_921_b.func_4109_a(this.field_4181_h, var2, var4, var5, var7, 200.0D, 200.0D, 0.5D);
-        this.field_4185_d = this.field_910_m.func_807_a(this.field_4185_d, (double)var2, (double)var3, (double)var4, var5, var6, var7, var8 / 80.0D, var10 / 160.0D, var8 / 80.0D);
-        this.field_4184_e = this.field_912_k.func_807_a(this.field_4184_e, (double)var2, (double)var3, (double)var4, var5, var6, var7, var8, var10, var8);
-        this.field_4183_f = this.field_911_l.func_807_a(this.field_4183_f, (double)var2, (double)var3, (double)var4, var5, var6, var7, var8, var10, var8);
-        int var14 = 0;
-        int var15 = 0;
-        int var16 = 16 / var5;
-
-        for(int var17 = 0; var17 < var5; ++var17) {
-            int var18 = var17 * var16 + var16 / 2;
-
-            for(int var19 = 0; var19 < var7; ++var19) {
-                int var20 = var19 * var16 + var16 / 2;
-                double var21 = var12[var18 * 16 + var20];
-                double var23 = var13[var18 * 16 + var20] * var21;
-                double var25 = 1.0D - var23;
-                var25 *= var25;
-                var25 *= var25;
-                var25 = 1.0D - var25;
-                double var27 = (this.field_4182_g[var15] + 256.0D) / 512.0D;
-                var27 *= var25;
-                if(var27 > 1.0D) {
-                    var27 = 1.0D;
-                }
-
-                double var29 = this.field_4181_h[var15] / 8000.0D;
-                if(var29 < 0.0D) {
-                    var29 = -var29 * 0.3D;
-                }
-
-                var29 = var29 * 3.0D - 2.0D;
-                if(var29 < 0.0D) {
-                    var29 /= 2.0D;
-                    if(var29 < -1.0D) {
-                        var29 = -1.0D;
-                    }
-
-                    var29 /= 1.4D;
-                    var29 /= 2.0D;
-                    var27 = 0.0D;
+                                        l2 = Block.waterMoving.blockID;
+                                    }
+                                }
+                                if (d15 > 0.0D) {
+                                    l2 = Block.stone.blockID;
+                                }
+                                abyte0[j2] = (byte) l2;
+                                j2 += c;
+                                d15 += d16;
+                            }
+
+                            d10 += d12;
+                            d11 += d13;
+                        }
+
+                        d1 += d5;
+                        d2 += d6;
+                        d3 += d7;
+                        d4 += d8;
+                    }
+
+                }
+
+            }
+
+        }
+
+    }
+
+    public void replaceBlocksForBiome(int i, int j, byte[] abyte0, MobSpawnerBase[] amobspawnerbase) {
+        byte byte0 = 64;
+        double d = 0.03125D;
+        field_905_r = field_909_n.func_807_a(field_905_r, i * 16, j * 16, 0.0D, 16, 16, 1, d, d, 1.0D);
+        field_904_s = field_909_n.func_807_a(field_904_s, j * 16, 109.0134D, i * 16, 16, 1, 16, d, 1.0D, d);
+        field_903_t = field_908_o.func_807_a(field_903_t, i * 16, j * 16, 0.0D, 16, 16, 1, d * 2D, d * 2D, d * 2D);
+        for (int k = 0; k < 16; k++) {
+            for (int l = 0; l < 16; l++) {
+                MobSpawnerBase mobspawnerbase = amobspawnerbase[k + l * 16];
+                boolean flag = field_905_r[k + l * 16] + rand.nextDouble() * 0.20000000000000001D > 0.0D;
+                boolean flag1 = field_904_s[k + l * 16] + rand.nextDouble() * 0.20000000000000001D > 3D;
+                int i1 = (int) (field_903_t[k + l * 16] / 3D + 3D + rand.nextDouble() * 0.25D);
+                int j1 = -1;
+                byte byte1 = mobspawnerbase.topBlock;
+                byte byte2 = mobspawnerbase.fillerBlock;
+                for (int k1 = 127; k1 >= 0; k1--) {
+                    int l1 = (k * 16 + l) * 128 + k1;
+                    if (k1 <= rand.nextInt(5)) {
+                        abyte0[l1] = (byte) Block.bedrock.blockID;
+                        continue;
+                    }
+                    byte byte3 = abyte0[l1];
+                    if (byte3 == 0) {
+                        j1 = -1;
+                        continue;
+                    }
+                    if (byte3 != Block.stone.blockID) {
+                        continue;
+                    }
+                    if (j1 == -1) {
+                        if (i1 <= 0) {
+                            byte1 = 0;
+                            byte2 = (byte) Block.stone.blockID;
+                        } else if (k1 >= byte0 - 4 && k1 <= byte0 + 1) {
+                            byte1 = mobspawnerbase.topBlock;
+                            byte2 = mobspawnerbase.fillerBlock;
+                            if (flag1) {
+                                byte1 = 0;
+                            }
+                            if (flag1) {
+                                byte2 = (byte) Block.gravel.blockID;
+                            }
+                            if (flag) {
+                                byte1 = (byte) Block.sand.blockID;
+                            }
+                            if (flag) {
+                                byte2 = (byte) Block.sand.blockID;
+                            }
+                        }
+                        if (k1 < byte0 && byte1 == 0) {
+                            byte1 = (byte) Block.waterMoving.blockID;
+                        }
+                        j1 = i1;
+                        if (k1 >= byte0 - 1) {
+                            abyte0[l1] = byte1;
+                        } else {
+                            abyte0[l1] = byte2;
+                        }
+                        continue;
+                    }
+                    if (j1 > 0) {
+                        j1--;
+                        abyte0[l1] = byte2;
+                    }
+                }
+
+            }
+
+        }
+
+    }
+
+    public Chunk provideChunk(int i, int j) {
+        rand.setSeed((long) i * 0x4f9939f508L + (long) j * 0x1ef1565bd5L);
+        byte[] abyte0 = new byte[32768];
+        Chunk chunk = new Chunk(worldObj, abyte0, i, j);
+        biomesForGeneration = worldObj.func_4075_a().loadBlockGeneratorData(biomesForGeneration, i * 16, j * 16, 16, 16);
+        double[] ad = worldObj.func_4075_a().temperature;
+        generateTerrain(i, j, abyte0, biomesForGeneration, ad);
+        replaceBlocksForBiome(i, j, abyte0, biomesForGeneration);
+        field_902_u.func_867_a(this, worldObj, i, j, abyte0);
+        chunk.func_1024_c();
+        return chunk;
+    }
+
+    private double[] func_4061_a(double[] ad, int i, int j, int k, int l, int i1, int j1) {
+        if (ad == null) {
+            ad = new double[l * i1 * j1];
+        }
+        double d = 684.41200000000003D;
+        double d1 = 684.41200000000003D;
+        double[] ad1 = worldObj.func_4075_a().temperature;
+        double[] ad2 = worldObj.func_4075_a().humidity;
+        field_4182_g = field_922_a.func_4109_a(field_4182_g, i, k, l, j1, 1.121D, 1.121D, 0.5D);
+        field_4181_h = field_921_b.func_4109_a(field_4181_h, i, k, l, j1, 200D, 200D, 0.5D);
+        field_4185_d = field_910_m.func_807_a(field_4185_d, i, j, k, l, i1, j1, d / 80D, d1 / 160D, d / 80D);
+        field_4184_e = field_912_k.func_807_a(field_4184_e, i, j, k, l, i1, j1, d, d1, d);
+        field_4183_f = field_911_l.func_807_a(field_4183_f, i, j, k, l, i1, j1, d, d1, d);
+        int k1 = 0;
+        int l1 = 0;
+        int i2 = 16 / l;
+        for (int j2 = 0; j2 < l; j2++) {
+            int k2 = j2 * i2 + i2 / 2;
+            for (int l2 = 0; l2 < j1; l2++) {
+                int i3 = l2 * i2 + i2 / 2;
+                double d2 = ad1[k2 * 16 + i3];
+                double d3 = ad2[k2 * 16 + i3] * d2;
+                double d4 = 1.0D - d3;
+                d4 *= d4;
+                d4 *= d4;
+                d4 = 1.0D - d4;
+                double d5 = (field_4182_g[l1] + 256D) / 512D;
+                d5 *= d4;
+                if (d5 > 1.0D) {
+                    d5 = 1.0D;
+                }
+                double d6 = field_4181_h[l1] / 8000D;
+                if (d6 < 0.0D) {
+                    d6 = -d6 * 0.29999999999999999D;
+                }
+                d6 = d6 * 3D - 2D;
+                if (d6 < 0.0D) {
+                    d6 /= 2D;
+                    if (d6 < -1D) {
+                        d6 = -1D;
+                    }
+                    d6 /= 1.3999999999999999D;
+                    d6 /= 2D;
+                    d5 = 0.0D;
                 } else {
-                    if(var29 > 1.0D) {
-                        var29 = 1.0D;
-                    }
-
-                    var29 /= 8.0D;
-                }
-
-                if(var27 < 0.0D) {
-                    var27 = 0.0D;
-                }
-
-                var27 += 0.5D;
-                var29 = var29 * (double)var6 / 16.0D;
-                double var31 = (double)var6 / 2.0D + var29 * 4.0D;
-                ++var15;
-
-                for(int var33 = 0; var33 < var6; ++var33) {
-                    double var34 = 0.0D;
-                    double var36 = ((double)var33 - var31) * 12.0D / var27;
-                    if(var36 < 0.0D) {
-                        var36 *= 4.0D;
-                    }
-
-                    double var38 = this.field_4184_e[var14] / 512.0D;
-                    double var40 = this.field_4183_f[var14] / 512.0D;
-                    double var42 = (this.field_4185_d[var14] / 10.0D + 1.0D) / 2.0D;
-                    if(var42 < 0.0D) {
-                        var34 = var38;
-                    } else if(var42 > 1.0D) {
-                        var34 = var40;
+                    if (d6 > 1.0D) {
+                        d6 = 1.0D;
+                    }
+                    d6 /= 8D;
+                }
+                if (d5 < 0.0D) {
+                    d5 = 0.0D;
+                }
+                d5 += 0.5D;
+                d6 = (d6 * (double) i1) / 16D;
+                double d7 = (double) i1 / 2D + d6 * 4D;
+                l1++;
+                for (int j3 = 0; j3 < i1; j3++) {
+                    double d8 = 0.0D;
+                    double d9 = (((double) j3 - d7) * 12D) / d5;
+                    if (d9 < 0.0D) {
+                        d9 *= 4D;
+                    }
+                    double d10 = field_4184_e[k1] / 512D;
+                    double d11 = field_4183_f[k1] / 512D;
+                    double d12 = (field_4185_d[k1] / 10D + 1.0D) / 2D;
+                    if (d12 < 0.0D) {
+                        d8 = d10;
+                    } else if (d12 > 1.0D) {
+                        d8 = d11;
                     } else {
-                        var34 = var38 + (var40 - var38) * var42;
-                    }
-
-                    var34 -= var36;
-                    if(var33 > var6 - 4) {
-                        double var44 = (double)((float)(var33 - (var6 - 4)) / 3.0F);
-                        var34 = var34 * (1.0D - var44) + -10.0D * var44;
-                    }
-
-                    var1[var14] = var34;
-                    ++var14;
+                        d8 = d10 + (d11 - d10) * d12;
+                    }
+                    d8 -= d9;
+                    if (j3 > i1 - 4) {
+                        double d13 = (float) (j3 - (i1 - 4)) / 3F;
+                        d8 = d8 * (1.0D - d13) + -10D * d13;
+                    }
+                    ad[k1] = d8;
+                    k1++;
                 }
+
             }
+
         }
 
-        return var1;
+        return ad;
     }
 
-    public boolean chunkExists(int var1, int var2) {
+    public boolean chunkExists(int i, int j) {
         return true;
     }
 
-    public void populate(IChunkProvider var1, int var2, int var3) {
+    public void populate(IChunkProvider ichunkprovider, int i, int j) {
         BlockSand.fallInstantly = true;
-        int var4 = var2 * 16;
-        int var5 = var3 * 16;
-        MobSpawnerBase var6 = this.worldObj.func_4075_a().func_4073_a(var4 + 16, var5 + 16);
-        this.rand.setSeed(this.worldObj.randomSeed);
-        long var7 = this.rand.nextLong() / 2L * 2L + 1L;
-        long var9 = this.rand.nextLong() / 2L * 2L + 1L;
-        this.rand.setSeed((long)var2 * var7 + (long)var3 * var9 ^ this.worldObj.randomSeed);
-        double var11 = 0.25D;
-        int var13;
-        int var14;
-        int var15;
-        if(this.rand.nextInt(4) == 0) {
-            var13 = var4 + this.rand.nextInt(16) + 8;
-            var14 = this.rand.nextInt(128);
-            var15 = var5 + this.rand.nextInt(16) + 8;
-            (new WorldGenLakes(Block.waterMoving.blockID)).generate(this.worldObj, this.rand, var13, var14, var15);
+        int k = i * 16;
+        int l = j * 16;
+        MobSpawnerBase mobspawnerbase = worldObj.func_4075_a().func_4073_a(k + 16, l + 16);
+        rand.setSeed(worldObj.randomSeed);
+        long l1 = (rand.nextLong() / 2L) * 2L + 1L;
+        long l2 = (rand.nextLong() / 2L) * 2L + 1L;
+        rand.setSeed((long) i * l1 + (long) j * l2 ^ worldObj.randomSeed);
+        double d = 0.25D;
+        if (rand.nextInt(4) == 0) {
+            int i1 = k + rand.nextInt(16) + 8;
+            int k4 = rand.nextInt(128);
+            int k7 = l + rand.nextInt(16) + 8;
+            (new WorldGenLakes(Block.waterMoving.blockID)).generate(worldObj, rand, i1, k4, k7);
         }
-
-        if(this.rand.nextInt(8) == 0) {
-            var13 = var4 + this.rand.nextInt(16) + 8;
-            var14 = this.rand.nextInt(this.rand.nextInt(120) + 8);
-            var15 = var5 + this.rand.nextInt(16) + 8;
-            if(var14 < 64 || this.rand.nextInt(10) == 0) {
-                (new WorldGenLakes(Block.lavaMoving.blockID)).generate(this.worldObj, this.rand, var13, var14, var15);
+        if (rand.nextInt(8) == 0) {
+            int j1 = k + rand.nextInt(16) + 8;
+            int l4 = rand.nextInt(rand.nextInt(120) + 8);
+            int l7 = l + rand.nextInt(16) + 8;
+            if (l4 < 64 || rand.nextInt(10) == 0) {
+                (new WorldGenLakes(Block.lavaMoving.blockID)).generate(worldObj, rand, j1, l4, l7);
             }
         }
-
-        int var16;
-        for(var13 = 0; var13 < 8; ++var13) {
-            var14 = var4 + this.rand.nextInt(16) + 8;
-            var15 = this.rand.nextInt(128);
-            var16 = var5 + this.rand.nextInt(16) + 8;
-            (new WorldGenDungeons()).generate(this.worldObj, this.rand, var14, var15, var16);
-        }
-
-        for(var13 = 0; var13 < 10; ++var13) {
-            var14 = var4 + this.rand.nextInt(16);
-            var15 = this.rand.nextInt(128);
-            var16 = var5 + this.rand.nextInt(16);
-            (new WorldGenClay(32)).generate(this.worldObj, this.rand, var14, var15, var16);
-        }
-
-        for(var13 = 0; var13 < 20; ++var13) {
-            var14 = var4 + this.rand.nextInt(16);
-            var15 = this.rand.nextInt(128);
-            var16 = var5 + this.rand.nextInt(16);
-            (new WorldGenMinable(Block.dirt.blockID, 32)).generate(this.worldObj, this.rand, var14, var15, var16);
-        }
-
-        for(var13 = 0; var13 < 10; ++var13) {
-            var14 = var4 + this.rand.nextInt(16);
-            var15 = this.rand.nextInt(128);
-            var16 = var5 + this.rand.nextInt(16);
-            (new WorldGenMinable(Block.gravel.blockID, 32)).generate(this.worldObj, this.rand, var14, var15, var16);
-        }
-
-        for(var13 = 0; var13 < 20; ++var13) {
-            var14 = var4 + this.rand.nextInt(16);
-            var15 = this.rand.nextInt(128);
-            var16 = var5 + this.rand.nextInt(16);
-            (new WorldGenMinable(Block.oreCoal.blockID, 16)).generate(this.worldObj, this.rand, var14, var15, var16);
-        }
-
-        for(var13 = 0; var13 < 20; ++var13) {
-            var14 = var4 + this.rand.nextInt(16);
-            var15 = this.rand.nextInt(64);
-            var16 = var5 + this.rand.nextInt(16);
-            (new WorldGenMinable(Block.oreIron.blockID, 8)).generate(this.worldObj, this.rand, var14, var15, var16);
-        }
-
-        for(var13 = 0; var13 < 2; ++var13) {
-            var14 = var4 + this.rand.nextInt(16);
-            var15 = this.rand.nextInt(32);
-            var16 = var5 + this.rand.nextInt(16);
-            (new WorldGenMinable(Block.oreGold.blockID, 8)).generate(this.worldObj, this.rand, var14, var15, var16);
-        }
-
-        for(var13 = 0; var13 < 8; ++var13) {
-            var14 = var4 + this.rand.nextInt(16);
-            var15 = this.rand.nextInt(16);
-            var16 = var5 + this.rand.nextInt(16);
-            (new WorldGenMinable(Block.oreRedstone.blockID, 7)).generate(this.worldObj, this.rand, var14, var15, var16);
-        }
-
-        for(var13 = 0; var13 < 1; ++var13) {
-            var14 = var4 + this.rand.nextInt(16);
-            var15 = this.rand.nextInt(16);
-            var16 = var5 + this.rand.nextInt(16);
-            (new WorldGenMinable(Block.oreDiamond.blockID, 7)).generate(this.worldObj, this.rand, var14, var15, var16);
-        }
-
-        var11 = 0.5D;
-        var13 = (int)((this.field_920_c.func_806_a((double)var4 * var11, (double)var5 * var11) / 8.0D + this.rand.nextDouble() * 4.0D + 4.0D) / 3.0D);
-        var14 = 0;
-        if(this.rand.nextInt(10) == 0) {
-            ++var14;
-        }
-
-        if(var6 == MobSpawnerBase.forest) {
-            var14 += var13 + 5;
-        }
-
-        if(var6 == MobSpawnerBase.rainforest) {
-            var14 += var13 + 5;
-        }
-
-        if(var6 == MobSpawnerBase.seasonalForest) {
-            var14 += var13 + 2;
-        }
-
-        if(var6 == MobSpawnerBase.taiga) {
-            var14 += var13 + 5;
-        }
-
-        if(var6 == MobSpawnerBase.desert) {
-            var14 -= 20;
-        }
-
-        if(var6 == MobSpawnerBase.tundra) {
-            var14 -= 20;
-        }
-
-        if(var6 == MobSpawnerBase.plains) {
-            var14 -= 20;
-        }
-
-        Object var24 = new WorldGenTrees();
-        if(this.rand.nextInt(10) == 0) {
-            var24 = new WorldGenBigTree();
-        }
-
-        if(var6 == MobSpawnerBase.rainforest && this.rand.nextInt(3) == 0) {
-            var24 = new WorldGenBigTree();
-        }
-
-        int var17;
-        int var18;
-        for(var16 = 0; var16 < var14; ++var16) {
-            var17 = var4 + this.rand.nextInt(16) + 8;
-            var18 = var5 + this.rand.nextInt(16) + 8;
-            ((WorldGenerator)var24).func_517_a(1.0D, 1.0D, 1.0D);
-            ((WorldGenerator)var24).generate(this.worldObj, this.rand, var17, this.worldObj.getHeightValue(var17, var18), var18);
-        }
-
-        int var19;
-        for(var16 = 0; var16 < 2; ++var16) {
-            var17 = var4 + this.rand.nextInt(16) + 8;
-            var18 = this.rand.nextInt(128);
-            var19 = var5 + this.rand.nextInt(16) + 8;
-            (new WorldGenFlowers(Block.plantYellow.blockID)).generate(this.worldObj, this.rand, var17, var18, var19);
-        }
-
-        if(this.rand.nextInt(2) == 0) {
-            var16 = var4 + this.rand.nextInt(16) + 8;
-            var17 = this.rand.nextInt(128);
-            var18 = var5 + this.rand.nextInt(16) + 8;
-            (new WorldGenFlowers(Block.plantRed.blockID)).generate(this.worldObj, this.rand, var16, var17, var18);
-        }
-
-        if(this.rand.nextInt(4) == 0) {
-            var16 = var4 + this.rand.nextInt(16) + 8;
-            var17 = this.rand.nextInt(128);
-            var18 = var5 + this.rand.nextInt(16) + 8;
-            (new WorldGenFlowers(Block.mushroomBrown.blockID)).generate(this.worldObj, this.rand, var16, var17, var18);
-        }
-
-        if(this.rand.nextInt(8) == 0) {
-            var16 = var4 + this.rand.nextInt(16) + 8;
-            var17 = this.rand.nextInt(128);
-            var18 = var5 + this.rand.nextInt(16) + 8;
-            (new WorldGenFlowers(Block.mushroomRed.blockID)).generate(this.worldObj, this.rand, var16, var17, var18);
-        }
-
-        for(var16 = 0; var16 < 10; ++var16) {
-            var17 = var4 + this.rand.nextInt(16) + 8;
-            var18 = this.rand.nextInt(128);
-            var19 = var5 + this.rand.nextInt(16) + 8;
-            (new WorldGenReed()).generate(this.worldObj, this.rand, var17, var18, var19);
-        }
-
-        if(this.rand.nextInt(32) == 0) {
-            var16 = var4 + this.rand.nextInt(16) + 8;
-            var17 = this.rand.nextInt(128);
-            var18 = var5 + this.rand.nextInt(16) + 8;
-            (new WorldGenPumpkin()).generate(this.worldObj, this.rand, var16, var17, var18);
-        }
-
-        var16 = 0;
-        if(var6 == MobSpawnerBase.desert) {
-            var16 += 10;
-        }
-
-        int var20;
-        for(var17 = 0; var17 < var16; ++var17) {
-            var18 = var4 + this.rand.nextInt(16) + 8;
-            var19 = this.rand.nextInt(128);
-            var20 = var5 + this.rand.nextInt(16) + 8;
-            (new WorldGenCactus()).generate(this.worldObj, this.rand, var18, var19, var20);
-        }
-
-        for(var17 = 0; var17 < 50; ++var17) {
-            var18 = var4 + this.rand.nextInt(16) + 8;
-            var19 = this.rand.nextInt(this.rand.nextInt(120) + 8);
-            var20 = var5 + this.rand.nextInt(16) + 8;
-            (new WorldGenLiquids(Block.waterStill.blockID)).generate(this.worldObj, this.rand, var18, var19, var20);
-        }
-
-        for(var17 = 0; var17 < 20; ++var17) {
-            var18 = var4 + this.rand.nextInt(16) + 8;
-            var19 = this.rand.nextInt(this.rand.nextInt(this.rand.nextInt(112) + 8) + 8);
-            var20 = var5 + this.rand.nextInt(16) + 8;
-            (new WorldGenLiquids(Block.lavaStill.blockID)).generate(this.worldObj, this.rand, var18, var19, var20);
-        }
-
-        this.generatedTemperatures = this.worldObj.func_4075_a().getTemperatures(this.generatedTemperatures, var4 + 8, var5 + 8, 16, 16);
-
-        for(var17 = var4 + 8; var17 < var4 + 8 + 16; ++var17) {
-            for(var18 = var5 + 8; var18 < var5 + 8 + 16; ++var18) {
-                var19 = var17 - (var4 + 8);
-                var20 = var18 - (var5 + 8);
-                int var21 = this.worldObj.findTopSolidBlock(var17, var18);
-                double var22 = this.generatedTemperatures[var19 * 16 + var20] - (double)(var21 - 64) / 64.0D * 0.3D;
-                if(var22 < 0.5D && var21 > 0 && var21 < 128 && this.worldObj.func_20084_d(var17, var21, var18) && this.worldObj.getBlockMaterial(var17, var21 - 1, var18).getIsSolid() && this.worldObj.getBlockMaterial(var17, var21 - 1, var18) != Material.ice) {
-                    this.worldObj.setBlockWithNotify(var17, var21, var18, Block.snow.blockID);
+        for (int k1 = 0; k1 < 8; k1++) {
+            int i5 = k + rand.nextInt(16) + 8;
+            int i8 = rand.nextInt(128);
+            int j10 = l + rand.nextInt(16) + 8;
+            (new WorldGenDungeons()).generate(worldObj, rand, i5, i8, j10);
+        }
+
+        for (int i2 = 0; i2 < 10; i2++) {
+            int j5 = k + rand.nextInt(16);
+            int j8 = rand.nextInt(128);
+            int k10 = l + rand.nextInt(16);
+            (new WorldGenClay(32)).generate(worldObj, rand, j5, j8, k10);
+        }
+
+        for (int j2 = 0; j2 < 20; j2++) {
+            int k5 = k + rand.nextInt(16);
+            int k8 = rand.nextInt(128);
+            int l10 = l + rand.nextInt(16);
+            (new WorldGenMinable(Block.dirt.blockID, 32)).generate(worldObj, rand, k5, k8, l10);
+        }
+
+        for (int k2 = 0; k2 < 10; k2++) {
+            int l5 = k + rand.nextInt(16);
+            int l8 = rand.nextInt(128);
+            int i11 = l + rand.nextInt(16);
+            (new WorldGenMinable(Block.gravel.blockID, 32)).generate(worldObj, rand, l5, l8, i11);
+        }
+
+        for (int i3 = 0; i3 < 20; i3++) {
+            int i6 = k + rand.nextInt(16);
+            int i9 = rand.nextInt(128);
+            int j11 = l + rand.nextInt(16);
+            (new WorldGenMinable(Block.oreCoal.blockID, 16)).generate(worldObj, rand, i6, i9, j11);
+        }
+
+        for (int j3 = 0; j3 < 20; j3++) {
+            int j6 = k + rand.nextInt(16);
+            int j9 = rand.nextInt(64);
+            int k11 = l + rand.nextInt(16);
+            (new WorldGenMinable(Block.oreIron.blockID, 8)).generate(worldObj, rand, j6, j9, k11);
+        }
+
+        for (int k3 = 0; k3 < 2; k3++) {
+            int k6 = k + rand.nextInt(16);
+            int k9 = rand.nextInt(32);
+            int l11 = l + rand.nextInt(16);
+            (new WorldGenMinable(Block.oreGold.blockID, 8)).generate(worldObj, rand, k6, k9, l11);
+        }
+
+        for (int l3 = 0; l3 < 8; l3++) {
+            int l6 = k + rand.nextInt(16);
+            int l9 = rand.nextInt(16);
+            int i12 = l + rand.nextInt(16);
+            (new WorldGenMinable(Block.oreRedstone.blockID, 7)).generate(worldObj, rand, l6, l9, i12);
+        }
+
+        for (int i4 = 0; i4 < 1; i4++) {
+            int i7 = k + rand.nextInt(16);
+            int i10 = rand.nextInt(16);
+            int j12 = l + rand.nextInt(16);
+            (new WorldGenMinable(Block.oreDiamond.blockID, 7)).generate(worldObj, rand, i7, i10, j12);
+        }
+
+        d = 0.5D;
+        int j4 = (int) ((field_920_c.func_806_a((double) k * d, (double) l * d) / 8D + rand.nextDouble() * 4D + 4D) / 3D);
+        int j7 = 0;
+        if (rand.nextInt(10) == 0) {
+            j7++;
+        }
+        if (mobspawnerbase == MobSpawnerBase.forest) {
+            j7 += j4 + 5;
+        }
+        if (mobspawnerbase == MobSpawnerBase.rainforest) {
+            j7 += j4 + 5;
+        }
+        if (mobspawnerbase == MobSpawnerBase.seasonalForest) {
+            j7 += j4 + 2;
+        }
+        if (mobspawnerbase == MobSpawnerBase.taiga) {
+            j7 += j4 + 5;
+        }
+        if (mobspawnerbase == MobSpawnerBase.desert) {
+            j7 -= 20;
+        }
+        if (mobspawnerbase == MobSpawnerBase.tundra) {
+            j7 -= 20;
+        }
+        if (mobspawnerbase == MobSpawnerBase.plains) {
+            j7 -= 20;
+        }
+        Object obj = new WorldGenTrees();
+        if (rand.nextInt(10) == 0) {
+            obj = new WorldGenBigTree();
+        }
+        if (mobspawnerbase == MobSpawnerBase.rainforest && rand.nextInt(3) == 0) {
+            obj = new WorldGenBigTree();
+        }
+        for (int k12 = 0; k12 < j7; k12++) {
+            int k14 = k + rand.nextInt(16) + 8;
+            int j17 = l + rand.nextInt(16) + 8;
+            ((WorldGenerator) (obj)).func_517_a(1.0D, 1.0D, 1.0D);
+            ((WorldGenerator) (obj)).generate(worldObj, rand, k14, worldObj.getHeightValue(k14, j17), j17);
+        }
+
+        for (int l12 = 0; l12 < 2; l12++) {
+            int l14 = k + rand.nextInt(16) + 8;
+            int k17 = rand.nextInt(128);
+            int i20 = l + rand.nextInt(16) + 8;
+            (new WorldGenFlowers(Block.plantYellow.blockID)).generate(worldObj, rand, l14, k17, i20);
+        }
+
+        if (rand.nextInt(2) == 0) {
+            int i13 = k + rand.nextInt(16) + 8;
+            int i15 = rand.nextInt(128);
+            int l17 = l + rand.nextInt(16) + 8;
+            (new WorldGenFlowers(Block.plantRed.blockID)).generate(worldObj, rand, i13, i15, l17);
+        }
+        if (rand.nextInt(4) == 0) {
+            int j13 = k + rand.nextInt(16) + 8;
+            int j15 = rand.nextInt(128);
+            int i18 = l + rand.nextInt(16) + 8;
+            (new WorldGenFlowers(Block.mushroomBrown.blockID)).generate(worldObj, rand, j13, j15, i18);
+        }
+        if (rand.nextInt(8) == 0) {
+            int k13 = k + rand.nextInt(16) + 8;
+            int k15 = rand.nextInt(128);
+            int j18 = l + rand.nextInt(16) + 8;
+            (new WorldGenFlowers(Block.mushroomRed.blockID)).generate(worldObj, rand, k13, k15, j18);
+        }
+        for (int l13 = 0; l13 < 10; l13++) {
+            int l15 = k + rand.nextInt(16) + 8;
+            int k18 = rand.nextInt(128);
+            int j20 = l + rand.nextInt(16) + 8;
+            (new WorldGenReed()).generate(worldObj, rand, l15, k18, j20);
+        }
+
+        if (rand.nextInt(32) == 0) {
+            int i14 = k + rand.nextInt(16) + 8;
+            int i16 = rand.nextInt(128);
+            int l18 = l + rand.nextInt(16) + 8;
+            (new WorldGenPumpkin()).generate(worldObj, rand, i14, i16, l18);
+        }
+        int j14 = 0;
+        if (mobspawnerbase == MobSpawnerBase.desert) {
+            j14 += 10;
+        }
+        for (int j16 = 0; j16 < j14; j16++) {
+            int i19 = k + rand.nextInt(16) + 8;
+            int k20 = rand.nextInt(128);
+            int k21 = l + rand.nextInt(16) + 8;
+            (new WorldGenCactus()).generate(worldObj, rand, i19, k20, k21);
+        }
+
+        for (int k16 = 0; k16 < 50; k16++) {
+            int j19 = k + rand.nextInt(16) + 8;
+            int l20 = rand.nextInt(rand.nextInt(120) + 8);
+            int l21 = l + rand.nextInt(16) + 8;
+            (new WorldGenLiquids(Block.waterStill.blockID)).generate(worldObj, rand, j19, l20, l21);
+        }
+
+        for (int l16 = 0; l16 < 20; l16++) {
+            int k19 = k + rand.nextInt(16) + 8;
+            int i21 = rand.nextInt(rand.nextInt(rand.nextInt(112) + 8) + 8);
+            int i22 = l + rand.nextInt(16) + 8;
+            (new WorldGenLiquids(Block.lavaStill.blockID)).generate(worldObj, rand, k19, i21, i22);
+        }
+
+        generatedTemperatures = worldObj.func_4075_a().getTemperatures(generatedTemperatures, k + 8, l + 8, 16, 16);
+        for (int i17 = k + 8; i17 < k + 8 + 16; i17++) {
+            for (int l19 = l + 8; l19 < l + 8 + 16; l19++) {
+                int j21 = i17 - (k + 8);
+                int j22 = l19 - (l + 8);
+                int k22 = worldObj.findTopSolidBlock(i17, l19);
+                double d1 = generatedTemperatures[j21 * 16 + j22] - ((double) (k22 - 64) / 64D) * 0.29999999999999999D;
+                if (d1 < 0.5D && k22 > 0 && k22 < 128 && worldObj.func_20084_d(i17, k22, l19) && worldObj.getBlockMaterial(i17, k22 - 1, l19).getIsSolid() && worldObj.getBlockMaterial(i17, k22 - 1, l19) != Material.ice) {
+                    worldObj.setBlockWithNotify(i17, k22, l19, Block.snow.blockID);
                 }
             }
+
         }
 
         BlockSand.fallInstantly = false;
     }
 
-    public boolean saveChunks(boolean var1, IProgressUpdate var2) {
+    public boolean saveChunks(boolean flag, IProgressUpdate iprogressupdate) {
         return true;
     }
 
