--- net/minecraft/src/RenderGlobal.java
+++ net/minecraft/src/RenderGlobal.java
@@ -1,1156 +1,1118 @@
 package net.minecraft.src;
 
-import java.nio.IntBuffer;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-import java.util.Random;
+import cc.noxiuam.titanic.Ref;
+import cc.noxiuam.titanic.event.impl.world.CloudRenderEvent;
 import net.minecraft.client.Minecraft;
 import org.lwjgl.opengl.ARBOcclusionQuery;
 import org.lwjgl.opengl.GL11;
-import org.lwjgl.opengl.GL15;
-
-public class RenderGlobal implements IWorldAccess {
-    public List field_1458_a = new ArrayList();
+
+import java.nio.IntBuffer;
+import java.util.*;
+
+public class RenderGlobal
+        implements IWorldAccess {
+
+    private final RenderEngine renderEngine;
+    private final List worldRenderersToUpdate;
+    private final int field_1440_s;
+    private final Minecraft mc;
+    private final int field_1434_y;
+    private final int field_1433_z;
+    private final int field_1432_A;
+    private final List field_1415_R;
+    private final RenderList[] field_1414_S = {
+            new RenderList(), new RenderList(), new RenderList(), new RenderList()
+    };
+    public List field_1458_a;
+    public float field_1450_i;
+    int[] field_1457_b;
+    IntBuffer field_1456_c;
+    int field_1455_d;
+    int field_1454_e;
+    double field_1453_f;
+    double field_1452_g;
+    double field_1451_h;
+    int field_1449_j;
     private World worldObj;
-    private RenderEngine renderEngine;
-    private List worldRenderersToUpdate = new ArrayList();
     private WorldRenderer[] sortedWorldRenderers;
     private WorldRenderer[] worldRenderers;
     private int renderChunksWide;
     private int renderChunksTall;
     private int renderChunksDeep;
-    private int field_1440_s;
-    private Minecraft mc;
     private RenderBlocks field_1438_u;
     private IntBuffer field_1437_v;
-    private boolean field_1436_w = false;
-    private int field_1435_x = 0;
-    private int field_1434_y;
-    private int field_1433_z;
-    private int field_1432_A;
+    private boolean field_1436_w;
+    private int field_1435_x;
     private int field_1431_B;
     private int field_1430_C;
     private int field_1429_D;
     private int field_1428_E;
     private int field_1427_F;
     private int field_1426_G;
-    private int renderDistance = -1;
-    private int field_1424_I = 2;
+    private int renderDistance;
+    private int field_1424_I;
     private int field_1423_J;
     private int field_1422_K;
     private int field_1421_L;
-    int[] field_1457_b = new int['\uc350'];
-    IntBuffer field_1456_c = GLAllocation.createDirectIntBuffer(64);
     private int field_1420_M;
     private int field_1419_N;
     private int field_1418_O;
     private int field_1417_P;
     private int field_1416_Q;
-    private List field_1415_R = new ArrayList();
-    private RenderList[] field_1414_S = new RenderList[]{new RenderList(), new RenderList(), new RenderList(), new RenderList()};
-    int field_1455_d = 0;
-    int field_1454_e = GLAllocation.generateDisplayLists(1);
-    double field_1453_f = -9999.0D;
-    double field_1452_g = -9999.0D;
-    double field_1451_h = -9999.0D;
-    public float field_1450_i;
-    int field_1449_j = 0;
-
-    public RenderGlobal(Minecraft var1, RenderEngine var2) {
-        this.mc = var1;
-        this.renderEngine = var2;
-        byte var3 = 64;
-        this.field_1440_s = GLAllocation.generateDisplayLists(var3 * var3 * var3 * 3);
-        this.field_1436_w = var1.func_6251_l().checkARBOcclusion();
-        if(this.field_1436_w) {
-            this.field_1456_c.clear();
-            this.field_1437_v = GLAllocation.createDirectIntBuffer(var3 * var3 * var3);
-            this.field_1437_v.clear();
-            this.field_1437_v.position(0);
-            this.field_1437_v.limit(var3 * var3 * var3);
-            ARBOcclusionQuery.glGenQueriesARB(this.field_1437_v);
+    public RenderGlobal(Minecraft minecraft, RenderEngine renderengine) {
+        field_1458_a = new ArrayList();
+        worldRenderersToUpdate = new ArrayList();
+        field_1436_w = false;
+        field_1435_x = 0;
+        renderDistance = -1;
+        field_1424_I = 2;
+        field_1457_b = new int[50000];
+        field_1456_c = GLAllocation.createDirectIntBuffer(64);
+        field_1415_R = new ArrayList();
+        field_1455_d = 0;
+        field_1454_e = GLAllocation.generateDisplayLists(1);
+        field_1453_f = -9999D;
+        field_1452_g = -9999D;
+        field_1451_h = -9999D;
+        field_1449_j = 0;
+        mc = minecraft;
+        renderEngine = renderengine;
+        byte byte0 = 64;
+        field_1440_s = GLAllocation.generateDisplayLists(byte0 * byte0 * byte0 * 3);
+        field_1436_w = minecraft.func_6251_l().checkARBOcclusion();
+        if (field_1436_w) {
+            field_1456_c.clear();
+            field_1437_v = GLAllocation.createDirectIntBuffer(byte0 * byte0 * byte0);
+            field_1437_v.clear();
+            field_1437_v.position(0);
+            field_1437_v.limit(byte0 * byte0 * byte0);
+            ARBOcclusionQuery.glGenQueriesARB(field_1437_v);
         }
-
-        this.field_1434_y = GLAllocation.generateDisplayLists(3);
+        field_1434_y = GLAllocation.generateDisplayLists(3);
         GL11.glPushMatrix();
-        GL11.glNewList(this.field_1434_y, GL11.GL_COMPILE);
-        this.func_950_f();
+        GL11.glNewList(field_1434_y, 4864 /*GL_COMPILE*/);
+        func_950_f();
         GL11.glEndList();
         GL11.glPopMatrix();
-        Tessellator var4 = Tessellator.instance;
-        this.field_1433_z = this.field_1434_y + 1;
-        GL11.glNewList(this.field_1433_z, GL11.GL_COMPILE);
-        byte var6 = 64;
-        int var7 = 256 / var6 + 2;
-        float var5 = 16.0F;
-
-        int var8;
-        int var9;
-        for(var8 = -var6 * var7; var8 <= var6 * var7; var8 += var6) {
-            for(var9 = -var6 * var7; var9 <= var6 * var7; var9 += var6) {
-                var4.startDrawingQuads();
-                var4.addVertex((double)(var8 + 0), (double)var5, (double)(var9 + 0));
-                var4.addVertex((double)(var8 + var6), (double)var5, (double)(var9 + 0));
-                var4.addVertex((double)(var8 + var6), (double)var5, (double)(var9 + var6));
-                var4.addVertex((double)(var8 + 0), (double)var5, (double)(var9 + var6));
-                var4.draw();
+        Tessellator tessellator = Tessellator.instance;
+        field_1433_z = field_1434_y + 1;
+        GL11.glNewList(field_1433_z, 4864 /*GL_COMPILE*/);
+        byte byte1 = 64;
+        int i = 256 / byte1 + 2;
+        float f = 16F;
+        for (int j = -byte1 * i; j <= byte1 * i; j += byte1) {
+            for (int l = -byte1 * i; l <= byte1 * i; l += byte1) {
+                tessellator.startDrawingQuads();
+                tessellator.addVertex(j, f, l);
+                tessellator.addVertex(j + byte1, f, l);
+                tessellator.addVertex(j + byte1, f, l + byte1);
+                tessellator.addVertex(j, f, l + byte1);
+                tessellator.draw();
             }
+
         }
 
         GL11.glEndList();
-        this.field_1432_A = this.field_1434_y + 2;
-        GL11.glNewList(this.field_1432_A, GL11.GL_COMPILE);
-        var5 = -16.0F;
-        var4.startDrawingQuads();
-
-        for(var8 = -var6 * var7; var8 <= var6 * var7; var8 += var6) {
-            for(var9 = -var6 * var7; var9 <= var6 * var7; var9 += var6) {
-                var4.addVertex((double)(var8 + var6), (double)var5, (double)(var9 + 0));
-                var4.addVertex((double)(var8 + 0), (double)var5, (double)(var9 + 0));
-                var4.addVertex((double)(var8 + 0), (double)var5, (double)(var9 + var6));
-                var4.addVertex((double)(var8 + var6), (double)var5, (double)(var9 + var6));
+        field_1432_A = field_1434_y + 2;
+        GL11.glNewList(field_1432_A, 4864 /*GL_COMPILE*/);
+        f = -16F;
+        tessellator.startDrawingQuads();
+        for (int k = -byte1 * i; k <= byte1 * i; k += byte1) {
+            for (int i1 = -byte1 * i; i1 <= byte1 * i; i1 += byte1) {
+                tessellator.addVertex(k + byte1, f, i1);
+                tessellator.addVertex(k, f, i1);
+                tessellator.addVertex(k, f, i1 + byte1);
+                tessellator.addVertex(k + byte1, f, i1 + byte1);
             }
+
         }
 
-        var4.draw();
+        tessellator.draw();
         GL11.glEndList();
     }
 
     private void func_950_f() {
-        Random var1 = new Random(10842L);
-        Tessellator var2 = Tessellator.instance;
-        var2.startDrawingQuads();
-
-        for(int var3 = 0; var3 < 1500; ++var3) {
-            double var4 = (double)(var1.nextFloat() * 2.0F - 1.0F);
-            double var6 = (double)(var1.nextFloat() * 2.0F - 1.0F);
-            double var8 = (double)(var1.nextFloat() * 2.0F - 1.0F);
-            double var10 = (double)(0.25F + var1.nextFloat() * 0.25F);
-            double var12 = var4 * var4 + var6 * var6 + var8 * var8;
-            if(var12 < 1.0D && var12 > 0.01D) {
-                var12 = 1.0D / Math.sqrt(var12);
-                var4 *= var12;
-                var6 *= var12;
-                var8 *= var12;
-                double var14 = var4 * 100.0D;
-                double var16 = var6 * 100.0D;
-                double var18 = var8 * 100.0D;
-                double var20 = Math.atan2(var4, var8);
-                double var22 = Math.sin(var20);
-                double var24 = Math.cos(var20);
-                double var26 = Math.atan2(Math.sqrt(var4 * var4 + var8 * var8), var6);
-                double var28 = Math.sin(var26);
-                double var30 = Math.cos(var26);
-                double var32 = var1.nextDouble() * Math.PI * 2.0D;
-                double var34 = Math.sin(var32);
-                double var36 = Math.cos(var32);
-
-                for(int var38 = 0; var38 < 4; ++var38) {
-                    double var39 = 0.0D;
-                    double var41 = (double)((var38 & 2) - 1) * var10;
-                    double var43 = (double)((var38 + 1 & 2) - 1) * var10;
-                    double var47 = var41 * var36 - var43 * var34;
-                    double var49 = var43 * var36 + var41 * var34;
-                    double var53 = var47 * var28 + var39 * var30;
-                    double var55 = var39 * var28 - var47 * var30;
-                    double var57 = var55 * var22 - var49 * var24;
-                    double var61 = var49 * var22 + var55 * var24;
-                    var2.addVertex(var14 + var57, var16 + var53, var18 + var61);
-                }
-            }
+        Random random = new Random(10842L);
+        Tessellator tessellator = Tessellator.instance;
+        tessellator.startDrawingQuads();
+        for (int i = 0; i < 1500; i++) {
+            double d = random.nextFloat() * 2.0F - 1.0F;
+            double d1 = random.nextFloat() * 2.0F - 1.0F;
+            double d2 = random.nextFloat() * 2.0F - 1.0F;
+            double d3 = 0.25F + random.nextFloat() * 0.25F;
+            double d4 = d * d + d1 * d1 + d2 * d2;
+            if (d4 >= 1.0D || d4 <= 0.01D) {
+                continue;
+            }
+            d4 = 1.0D / Math.sqrt(d4);
+            d *= d4;
+            d1 *= d4;
+            d2 *= d4;
+            double d5 = d * 100D;
+            double d6 = d1 * 100D;
+            double d7 = d2 * 100D;
+            double d8 = Math.atan2(d, d2);
+            double d9 = Math.sin(d8);
+            double d10 = Math.cos(d8);
+            double d11 = Math.atan2(Math.sqrt(d * d + d2 * d2), d1);
+            double d12 = Math.sin(d11);
+            double d13 = Math.cos(d11);
+            double d14 = random.nextDouble() * 3.1415926535897931D * 2D;
+            double d15 = Math.sin(d14);
+            double d16 = Math.cos(d14);
+            for (int j = 0; j < 4; j++) {
+                double d17 = 0.0D;
+                double d18 = (double) ((j & 2) - 1) * d3;
+                double d19 = (double) ((j + 1 & 2) - 1) * d3;
+                double d20 = d17;
+                double d21 = d18 * d16 - d19 * d15;
+                double d22 = d19 * d16 + d18 * d15;
+                double d23 = d22;
+                double d24 = d21 * d12 + d20 * d13;
+                double d25 = d20 * d12 - d21 * d13;
+                double d26 = d25 * d9 - d23 * d10;
+                double d27 = d24;
+                double d28 = d23 * d9 + d25 * d10;
+                tessellator.addVertex(d5 + d26, d6 + d27, d7 + d28);
+            }
+
         }
 
-        var2.draw();
+        tessellator.draw();
     }
 
-    public void func_946_a(World var1) {
-        if(this.worldObj != null) {
-            this.worldObj.removeWorldAccess(this);
-        }
-
-        this.field_1453_f = -9999.0D;
-        this.field_1452_g = -9999.0D;
-        this.field_1451_h = -9999.0D;
-        RenderManager.instance.func_852_a(var1);
-        this.worldObj = var1;
-        this.field_1438_u = new RenderBlocks(var1);
-        if(var1 != null) {
-            var1.addWorldAccess(this);
-            this.loadRenderers();
-        }
-
+    public void func_946_a(World world) {
+        if (worldObj != null) {
+            worldObj.removeWorldAccess(this);
+        }
+        field_1453_f = -9999D;
+        field_1452_g = -9999D;
+        field_1451_h = -9999D;
+        RenderManager.instance.func_852_a(world);
+        worldObj = world;
+        field_1438_u = new RenderBlocks(world);
+        if (world != null) {
+            world.addWorldAccess(this);
+            loadRenderers();
+        }
     }
 
     public void loadRenderers() {
-        Block.leaves.setGraphicsLevel(this.mc.gameSettings.fancyGraphics);
-        this.renderDistance = this.mc.gameSettings.renderDistance;
-        int var1;
-        if(this.worldRenderers != null) {
-            for(var1 = 0; var1 < this.worldRenderers.length; ++var1) {
-                this.worldRenderers[var1].func_1204_c();
+        Block.leaves.setGraphicsLevel(mc.gameSettings.fancyGraphics);
+        renderDistance = mc.gameSettings.renderDistance;
+        if (worldRenderers != null) {
+            for (int i = 0; i < worldRenderers.length; i++) {
+                worldRenderers[i].func_1204_c();
             }
-        }
-
-        var1 = 64 << 3 - this.renderDistance;
-        if(var1 > 400) {
-            var1 = 400;
-        }
-
-        this.renderChunksWide = var1 / 16 + 1;
-        this.renderChunksTall = 8;
-        this.renderChunksDeep = var1 / 16 + 1;
-        this.worldRenderers = new WorldRenderer[this.renderChunksWide * this.renderChunksTall * this.renderChunksDeep];
-        this.sortedWorldRenderers = new WorldRenderer[this.renderChunksWide * this.renderChunksTall * this.renderChunksDeep];
-        int var2 = 0;
-        int var3 = 0;
-        this.field_1431_B = 0;
-        this.field_1430_C = 0;
-        this.field_1429_D = 0;
-        this.field_1428_E = this.renderChunksWide;
-        this.field_1427_F = this.renderChunksTall;
-        this.field_1426_G = this.renderChunksDeep;
-
-        int var4;
-        for(var4 = 0; var4 < this.worldRenderersToUpdate.size(); ++var4) {
-            ((WorldRenderer)this.worldRenderersToUpdate.get(var4)).needsUpdate = false;
-        }
-
-        this.worldRenderersToUpdate.clear();
-        this.field_1458_a.clear();
-
-        for(var4 = 0; var4 < this.renderChunksWide; ++var4) {
-            for(int var5 = 0; var5 < this.renderChunksTall; ++var5) {
-                for(int var6 = 0; var6 < this.renderChunksDeep; ++var6) {
-                    this.worldRenderers[(var6 * this.renderChunksTall + var5) * this.renderChunksWide + var4] = new WorldRenderer(this.worldObj, this.field_1458_a, var4 * 16, var5 * 16, var6 * 16, 16, this.field_1440_s + var2);
-                    if(this.field_1436_w) {
-                        this.worldRenderers[(var6 * this.renderChunksTall + var5) * this.renderChunksWide + var4].field_1732_z = this.field_1437_v.get(var3);
+
+        }
+        int j = 64 << 3 - renderDistance;
+        if (j > 400) {
+            j = 400;
+        }
+        renderChunksWide = j / 16 + 1;
+        renderChunksTall = 8;
+        renderChunksDeep = j / 16 + 1;
+        worldRenderers = new WorldRenderer[renderChunksWide * renderChunksTall * renderChunksDeep];
+        sortedWorldRenderers = new WorldRenderer[renderChunksWide * renderChunksTall * renderChunksDeep];
+        int k = 0;
+        int l = 0;
+        field_1431_B = 0;
+        field_1430_C = 0;
+        field_1429_D = 0;
+        field_1428_E = renderChunksWide;
+        field_1427_F = renderChunksTall;
+        field_1426_G = renderChunksDeep;
+        for (int i1 = 0; i1 < worldRenderersToUpdate.size(); i1++) {
+            ((WorldRenderer) worldRenderersToUpdate.get(i1)).needsUpdate = false;
+        }
+
+        worldRenderersToUpdate.clear();
+        field_1458_a.clear();
+        for (int j1 = 0; j1 < renderChunksWide; j1++) {
+            for (int k1 = 0; k1 < renderChunksTall; k1++) {
+                for (int l1 = 0; l1 < renderChunksDeep; l1++) {
+                    worldRenderers[(l1 * renderChunksTall + k1) * renderChunksWide + j1] = new WorldRenderer(worldObj, field_1458_a, j1 * 16, k1 * 16, l1 * 16, 16, field_1440_s + k);
+                    if (field_1436_w) {
+                        worldRenderers[(l1 * renderChunksTall + k1) * renderChunksWide + j1].field_1732_z = field_1437_v.get(l);
                     }
-
-                    this.worldRenderers[(var6 * this.renderChunksTall + var5) * this.renderChunksWide + var4].isWaitingOnOcclusionQuery = false;
-                    this.worldRenderers[(var6 * this.renderChunksTall + var5) * this.renderChunksWide + var4].isVisible = true;
-                    this.worldRenderers[(var6 * this.renderChunksTall + var5) * this.renderChunksWide + var4].isInFrustrum = true;
-                    this.worldRenderers[(var6 * this.renderChunksTall + var5) * this.renderChunksWide + var4].field_1735_w = var3++;
-                    this.worldRenderers[(var6 * this.renderChunksTall + var5) * this.renderChunksWide + var4].markDirty();
-                    this.sortedWorldRenderers[(var6 * this.renderChunksTall + var5) * this.renderChunksWide + var4] = this.worldRenderers[(var6 * this.renderChunksTall + var5) * this.renderChunksWide + var4];
-                    this.worldRenderersToUpdate.add(this.worldRenderers[(var6 * this.renderChunksTall + var5) * this.renderChunksWide + var4]);
-                    var2 += 3;
+                    worldRenderers[(l1 * renderChunksTall + k1) * renderChunksWide + j1].isWaitingOnOcclusionQuery = false;
+                    worldRenderers[(l1 * renderChunksTall + k1) * renderChunksWide + j1].isVisible = true;
+                    worldRenderers[(l1 * renderChunksTall + k1) * renderChunksWide + j1].isInFrustrum = true;
+                    worldRenderers[(l1 * renderChunksTall + k1) * renderChunksWide + j1].field_1735_w = l++;
+                    worldRenderers[(l1 * renderChunksTall + k1) * renderChunksWide + j1].markDirty();
+                    sortedWorldRenderers[(l1 * renderChunksTall + k1) * renderChunksWide + j1] = worldRenderers[(l1 * renderChunksTall + k1) * renderChunksWide + j1];
+                    worldRenderersToUpdate.add(worldRenderers[(l1 * renderChunksTall + k1) * renderChunksWide + j1]);
+                    k += 3;
                 }
+
             }
-        }
-
-        if(this.worldObj != null) {
-            EntityPlayerSP var7 = this.mc.thePlayer;
-            this.func_956_b(MathHelper.floor_double(var7.posX), MathHelper.floor_double(var7.posY), MathHelper.floor_double(var7.posZ));
-            Arrays.sort(this.sortedWorldRenderers, new EntitySorter(var7));
-        }
-
-        this.field_1424_I = 2;
+
+        }
+
+        if (worldObj != null) {
+            EntityPlayerSP entityplayersp = mc.thePlayer;
+            func_956_b(MathHelper.floor_double(entityplayersp.posX), MathHelper.floor_double(entityplayersp.posY), MathHelper.floor_double(entityplayersp.posZ));
+            Arrays.sort(sortedWorldRenderers, new EntitySorter(entityplayersp));
+        }
+        field_1424_I = 2;
     }
 
-    public void func_951_a(Vec3D var1, ICamera var2, float var3) {
-        if(this.field_1424_I > 0) {
-            --this.field_1424_I;
-        } else {
-            TileEntityRenderer.instance.setRenderingContext(this.worldObj, this.renderEngine, this.mc.fontRenderer, this.mc.thePlayer, var3);
-            RenderManager.instance.func_857_a(this.worldObj, this.renderEngine, this.mc.fontRenderer, this.mc.thePlayer, this.mc.gameSettings, var3);
-            this.field_1423_J = 0;
-            this.field_1422_K = 0;
-            this.field_1421_L = 0;
-            EntityPlayerSP var4 = this.mc.thePlayer;
-            RenderManager.renderPosX = var4.lastTickPosX + (var4.posX - var4.lastTickPosX) * (double)var3;
-            RenderManager.renderPosY = var4.lastTickPosY + (var4.posY - var4.lastTickPosY) * (double)var3;
-            RenderManager.renderPosZ = var4.lastTickPosZ + (var4.posZ - var4.lastTickPosZ) * (double)var3;
-            TileEntityRenderer.staticPlayerX = var4.lastTickPosX + (var4.posX - var4.lastTickPosX) * (double)var3;
-            TileEntityRenderer.staticPlayerY = var4.lastTickPosY + (var4.posY - var4.lastTickPosY) * (double)var3;
-            TileEntityRenderer.staticPlayerZ = var4.lastTickPosZ + (var4.posZ - var4.lastTickPosZ) * (double)var3;
-            List var5 = this.worldObj.func_658_i();
-            this.field_1423_J = var5.size();
-
-            int var6;
-            for(var6 = 0; var6 < var5.size(); ++var6) {
-                Entity var7 = (Entity)var5.get(var6);
-                if(var7.isInRangeToRenderVec3D(var1) && var2.isBoundingBoxInFrustum(var7.boundingBox) && (var7 != this.mc.thePlayer || this.mc.gameSettings.thirdPersonView)) {
-                    ++this.field_1422_K;
-                    RenderManager.instance.renderEntity(var7, var3);
-                }
-            }
-
-            for(var6 = 0; var6 < this.field_1458_a.size(); ++var6) {
-                TileEntityRenderer.instance.renderTileEntity((TileEntity)this.field_1458_a.get(var6), var3);
-            }
-
-        }
+    public void func_951_a(Vec3D vec3d, ICamera icamera, float f) {
+        if (field_1424_I > 0) {
+            field_1424_I--;
+            return;
+        }
+        TileEntityRenderer.instance.setRenderingContext(worldObj, renderEngine, mc.fontRenderer, mc.thePlayer, f);
+        RenderManager.instance.func_857_a(worldObj, renderEngine, mc.fontRenderer, mc.thePlayer, mc.gameSettings, f);
+        field_1423_J = 0;
+        field_1422_K = 0;
+        field_1421_L = 0;
+        EntityPlayerSP entityplayersp = mc.thePlayer;
+        RenderManager.renderPosX = entityplayersp.lastTickPosX + (entityplayersp.posX - entityplayersp.lastTickPosX) * (double) f;
+        RenderManager.renderPosY = entityplayersp.lastTickPosY + (entityplayersp.posY - entityplayersp.lastTickPosY) * (double) f;
+        RenderManager.renderPosZ = entityplayersp.lastTickPosZ + (entityplayersp.posZ - entityplayersp.lastTickPosZ) * (double) f;
+        TileEntityRenderer.staticPlayerX = entityplayersp.lastTickPosX + (entityplayersp.posX - entityplayersp.lastTickPosX) * (double) f;
+        TileEntityRenderer.staticPlayerY = entityplayersp.lastTickPosY + (entityplayersp.posY - entityplayersp.lastTickPosY) * (double) f;
+        TileEntityRenderer.staticPlayerZ = entityplayersp.lastTickPosZ + (entityplayersp.posZ - entityplayersp.lastTickPosZ) * (double) f;
+        List list = worldObj.func_658_i();
+        field_1423_J = list.size();
+        for (int i = 0; i < list.size(); i++) {
+            Entity entity = (Entity) list.get(i);
+            if (entity.isInRangeToRenderVec3D(vec3d) && icamera.isBoundingBoxInFrustum(entity.boundingBox) && (entity != mc.thePlayer || mc.gameSettings.thirdPersonView)) {
+                field_1422_K++;
+                RenderManager.instance.renderEntity(entity, f);
+            }
+        }
+
+        for (int j = 0; j < field_1458_a.size(); j++) {
+            TileEntityRenderer.instance.renderTileEntity((TileEntity) field_1458_a.get(j), f);
+        }
+
     }
 
     public String func_953_b() {
-        return "C: " + this.field_1417_P + "/" + this.field_1420_M + ". F: " + this.field_1419_N + ", O: " + this.field_1418_O + ", E: " + this.field_1416_Q;
+        return "C: " + field_1417_P + "/" + field_1420_M + ". F: " + field_1419_N + ", O: " + field_1418_O + ", E: " + field_1416_Q;
     }
 
     public String func_957_c() {
-        return "E: " + this.field_1422_K + "/" + this.field_1423_J + ". B: " + this.field_1421_L + ", I: " + (this.field_1423_J - this.field_1421_L - this.field_1422_K);
-    }
-
-    private void func_956_b(int var1, int var2, int var3) {
-        var1 -= 8;
-        var2 -= 8;
-        var3 -= 8;
-        this.field_1431_B = Integer.MAX_VALUE;
-        this.field_1430_C = Integer.MAX_VALUE;
-        this.field_1429_D = Integer.MAX_VALUE;
-        this.field_1428_E = Integer.MIN_VALUE;
-        this.field_1427_F = Integer.MIN_VALUE;
-        this.field_1426_G = Integer.MIN_VALUE;
-        int var4 = this.renderChunksWide * 16;
-        int var5 = var4 / 2;
-
-        for(int var6 = 0; var6 < this.renderChunksWide; ++var6) {
-            int var7 = var6 * 16;
-            int var8 = var7 + var5 - var1;
-            if(var8 < 0) {
-                var8 -= var4 - 1;
-            }
-
-            var8 /= var4;
-            var7 -= var8 * var4;
-            if(var7 < this.field_1431_B) {
-                this.field_1431_B = var7;
-            }
-
-            if(var7 > this.field_1428_E) {
-                this.field_1428_E = var7;
-            }
-
-            for(int var9 = 0; var9 < this.renderChunksDeep; ++var9) {
-                int var10 = var9 * 16;
-                int var11 = var10 + var5 - var3;
-                if(var11 < 0) {
-                    var11 -= var4 - 1;
-                }
-
-                var11 /= var4;
-                var10 -= var11 * var4;
-                if(var10 < this.field_1429_D) {
-                    this.field_1429_D = var10;
-                }
-
-                if(var10 > this.field_1426_G) {
-                    this.field_1426_G = var10;
-                }
-
-                for(int var12 = 0; var12 < this.renderChunksTall; ++var12) {
-                    int var13 = var12 * 16;
-                    if(var13 < this.field_1430_C) {
-                        this.field_1430_C = var13;
-                    }
-
-                    if(var13 > this.field_1427_F) {
-                        this.field_1427_F = var13;
-                    }
-
-                    WorldRenderer var14 = this.worldRenderers[(var9 * this.renderChunksTall + var12) * this.renderChunksWide + var6];
-                    boolean var15 = var14.needsUpdate;
-                    var14.func_1197_a(var7, var13, var10);
-                    if(!var15 && var14.needsUpdate) {
-                        this.worldRenderersToUpdate.add(var14);
-                    }
-                }
-            }
-        }
-
-    }
-
-    public int func_943_a(EntityPlayer var1, int var2, double var3) {
-        if(this.mc.gameSettings.renderDistance != this.renderDistance) {
-            this.loadRenderers();
-        }
-
-        if(var2 == 0) {
-            this.field_1420_M = 0;
-            this.field_1419_N = 0;
-            this.field_1418_O = 0;
-            this.field_1417_P = 0;
-            this.field_1416_Q = 0;
-        }
-
-        double var5 = var1.lastTickPosX + (var1.posX - var1.lastTickPosX) * var3;
-        double var7 = var1.lastTickPosY + (var1.posY - var1.lastTickPosY) * var3;
-        double var9 = var1.lastTickPosZ + (var1.posZ - var1.lastTickPosZ) * var3;
-        double var11 = var1.posX - this.field_1453_f;
-        double var13 = var1.posY - this.field_1452_g;
-        double var15 = var1.posZ - this.field_1451_h;
-        if(var11 * var11 + var13 * var13 + var15 * var15 > 16.0D) {
-            this.field_1453_f = var1.posX;
-            this.field_1452_g = var1.posY;
-            this.field_1451_h = var1.posZ;
-            this.func_956_b(MathHelper.floor_double(var1.posX), MathHelper.floor_double(var1.posY), MathHelper.floor_double(var1.posZ));
-            Arrays.sort(this.sortedWorldRenderers, new EntitySorter(var1));
-        }
-
-        byte var17 = 0;
-        int var33;
-        if(this.field_1436_w && !this.mc.gameSettings.anaglyph && var2 == 0) {
-            byte var18 = 0;
-            int var19 = 16;
-            this.func_962_a(var18, var19);
-
-            for(int var20 = var18; var20 < var19; ++var20) {
-                this.sortedWorldRenderers[var20].isVisible = true;
-            }
-
-            var33 = var17 + this.func_952_a(var18, var19, var2, var3);
-
+        return "E: " + field_1422_K + "/" + field_1423_J + ". B: " + field_1421_L + ", I: " + (field_1423_J - field_1421_L - field_1422_K);
+    }
+
+    private void func_956_b(int i, int j, int k) {
+        i -= 8;
+        j -= 8;
+        k -= 8;
+        field_1431_B = 0x7fffffff;
+        field_1430_C = 0x7fffffff;
+        field_1429_D = 0x7fffffff;
+        field_1428_E = 0x80000000;
+        field_1427_F = 0x80000000;
+        field_1426_G = 0x80000000;
+        int l = renderChunksWide * 16;
+        int i1 = l / 2;
+        for (int j1 = 0; j1 < renderChunksWide; j1++) {
+            int k1 = j1 * 16;
+            int l1 = (k1 + i1) - i;
+            if (l1 < 0) {
+                l1 -= l - 1;
+            }
+            l1 /= l;
+            k1 -= l1 * l;
+            if (k1 < field_1431_B) {
+                field_1431_B = k1;
+            }
+            if (k1 > field_1428_E) {
+                field_1428_E = k1;
+            }
+            for (int i2 = 0; i2 < renderChunksDeep; i2++) {
+                int j2 = i2 * 16;
+                int k2 = (j2 + i1) - k;
+                if (k2 < 0) {
+                    k2 -= l - 1;
+                }
+                k2 /= l;
+                j2 -= k2 * l;
+                if (j2 < field_1429_D) {
+                    field_1429_D = j2;
+                }
+                if (j2 > field_1426_G) {
+                    field_1426_G = j2;
+                }
+                for (int l2 = 0; l2 < renderChunksTall; l2++) {
+                    int i3 = l2 * 16;
+                    if (i3 < field_1430_C) {
+                        field_1430_C = i3;
+                    }
+                    if (i3 > field_1427_F) {
+                        field_1427_F = i3;
+                    }
+                    WorldRenderer worldrenderer = worldRenderers[(i2 * renderChunksTall + l2) * renderChunksWide + j1];
+                    boolean flag = worldrenderer.needsUpdate;
+                    worldrenderer.func_1197_a(k1, i3, j2);
+                    if (!flag && worldrenderer.needsUpdate) {
+                        worldRenderersToUpdate.add(worldrenderer);
+                    }
+                }
+
+            }
+
+        }
+
+    }
+
+    public int func_943_a(EntityPlayer entityplayer, int i, double d) {
+        if (mc.gameSettings.renderDistance != renderDistance) {
+            loadRenderers();
+        }
+        if (i == 0) {
+            field_1420_M = 0;
+            field_1419_N = 0;
+            field_1418_O = 0;
+            field_1417_P = 0;
+            field_1416_Q = 0;
+        }
+        double d1 = entityplayer.lastTickPosX + (entityplayer.posX - entityplayer.lastTickPosX) * d;
+        double d2 = entityplayer.lastTickPosY + (entityplayer.posY - entityplayer.lastTickPosY) * d;
+        double d3 = entityplayer.lastTickPosZ + (entityplayer.posZ - entityplayer.lastTickPosZ) * d;
+        double d4 = entityplayer.posX - field_1453_f;
+        double d5 = entityplayer.posY - field_1452_g;
+        double d6 = entityplayer.posZ - field_1451_h;
+        if (d4 * d4 + d5 * d5 + d6 * d6 > 16D) {
+            field_1453_f = entityplayer.posX;
+            field_1452_g = entityplayer.posY;
+            field_1451_h = entityplayer.posZ;
+            func_956_b(MathHelper.floor_double(entityplayer.posX), MathHelper.floor_double(entityplayer.posY), MathHelper.floor_double(entityplayer.posZ));
+
+            try {
+                Arrays.sort(sortedWorldRenderers, new EntitySorter(entityplayer));
+            } catch (IllegalArgumentException e) {
+                e.printStackTrace();
+            }
+        }
+        int j = 0;
+        if (field_1436_w && !mc.gameSettings.anaglyph && i == 0) {
+            int k = 0;
+            int l = 16;
+            func_962_a(k, l);
+            for (int i1 = k; i1 < l; i1++) {
+                sortedWorldRenderers[i1].isVisible = true;
+            }
+
+            j += func_952_a(k, l, i, d);
             do {
-                int var34 = var19;
-                var19 *= 2;
-                if(var19 > this.sortedWorldRenderers.length) {
-                    var19 = this.sortedWorldRenderers.length;
+                byte byte0 = (byte) l;
+                l *= 2;
+                if (l > sortedWorldRenderers.length) {
+                    l = sortedWorldRenderers.length;
                 }
-
-                GL11.glDisable(GL11.GL_TEXTURE_2D);
-                GL11.glDisable(GL11.GL_LIGHTING);
-                GL11.glDisable(GL11.GL_ALPHA_TEST);
-                GL11.glDisable(GL11.GL_FOG);
+                GL11.glDisable(3553 /*GL_TEXTURE_2D*/);
+                GL11.glDisable(2896 /*GL_LIGHTING*/);
+                GL11.glDisable(3008 /*GL_ALPHA_TEST*/);
+                GL11.glDisable(2912 /*GL_FOG*/);
                 GL11.glColorMask(false, false, false, false);
                 GL11.glDepthMask(false);
-                this.func_962_a(var34, var19);
+                func_962_a(byte0, l);
                 GL11.glPushMatrix();
-                float var35 = 0.0F;
-                float var21 = 0.0F;
-                float var22 = 0.0F;
-
-                for(int var23 = var34; var23 < var19; ++var23) {
-                    if(this.sortedWorldRenderers[var23].canRender()) {
-                        this.sortedWorldRenderers[var23].isInFrustrum = false;
-                    } else {
-                        if(!this.sortedWorldRenderers[var23].isInFrustrum) {
-                            this.sortedWorldRenderers[var23].isVisible = true;
-                        }
-
-                        if(this.sortedWorldRenderers[var23].isInFrustrum && !this.sortedWorldRenderers[var23].isWaitingOnOcclusionQuery) {
-                            float var24 = MathHelper.sqrt_float(this.sortedWorldRenderers[var23].distanceToEntity(var1));
-                            int var25 = (int)(1.0F + var24 / 128.0F);
-                            if(this.field_1435_x % var25 == var23 % var25) {
-                                WorldRenderer var26 = this.sortedWorldRenderers[var23];
-                                float var27 = (float)((double)var26.field_1755_i - var5);
-                                float var28 = (float)((double)var26.field_1754_j - var7);
-                                float var29 = (float)((double)var26.field_1753_k - var9);
-                                float var30 = var27 - var35;
-                                float var31 = var28 - var21;
-                                float var32 = var29 - var22;
-                                if(var30 != 0.0F || var31 != 0.0F || var32 != 0.0F) {
-                                    GL11.glTranslatef(var30, var31, var32);
-                                    var35 += var30;
-                                    var21 += var31;
-                                    var22 += var32;
-                                }
-
-                                ARBOcclusionQuery.glBeginQueryARB(GL15.GL_SAMPLES_PASSED, this.sortedWorldRenderers[var23].field_1732_z);
-                                this.sortedWorldRenderers[var23].callOcclusionQueryList();
-                                ARBOcclusionQuery.glEndQueryARB(GL15.GL_SAMPLES_PASSED);
-                                this.sortedWorldRenderers[var23].isWaitingOnOcclusionQuery = true;
-                            }
-                        }
-                    }
+                float f = 0.0F;
+                float f1 = 0.0F;
+                float f2 = 0.0F;
+                for (int j1 = byte0; j1 < l; j1++) {
+                    if (sortedWorldRenderers[j1].canRender()) {
+                        sortedWorldRenderers[j1].isInFrustrum = false;
+                        continue;
+                    }
+                    if (!sortedWorldRenderers[j1].isInFrustrum) {
+                        sortedWorldRenderers[j1].isVisible = true;
+                    }
+                    if (!sortedWorldRenderers[j1].isInFrustrum || sortedWorldRenderers[j1].isWaitingOnOcclusionQuery) {
+                        continue;
+                    }
+                    float f3 = MathHelper.sqrt_float(sortedWorldRenderers[j1].distanceToEntity(entityplayer));
+                    int k1 = (int) (1.0F + f3 / 128F);
+                    if (field_1435_x % k1 != j1 % k1) {
+                        continue;
+                    }
+                    WorldRenderer worldrenderer = sortedWorldRenderers[j1];
+                    float f4 = (float) ((double) worldrenderer.field_1755_i - d1);
+                    float f5 = (float) ((double) worldrenderer.field_1754_j - d2);
+                    float f6 = (float) ((double) worldrenderer.field_1753_k - d3);
+                    float f7 = f4 - f;
+                    float f8 = f5 - f1;
+                    float f9 = f6 - f2;
+                    if (f7 != 0.0F || f8 != 0.0F || f9 != 0.0F) {
+                        GL11.glTranslatef(f7, f8, f9);
+                        f += f7;
+                        f1 += f8;
+                        f2 += f9;
+                    }
+                    ARBOcclusionQuery.glBeginQueryARB(35092 /*GL_SAMPLES_PASSED_ARB*/, sortedWorldRenderers[j1].field_1732_z);
+                    sortedWorldRenderers[j1].callOcclusionQueryList();
+                    ARBOcclusionQuery.glEndQueryARB(35092 /*GL_SAMPLES_PASSED_ARB*/);
+                    sortedWorldRenderers[j1].isWaitingOnOcclusionQuery = true;
                 }
 
                 GL11.glPopMatrix();
                 GL11.glColorMask(true, true, true, true);
                 GL11.glDepthMask(true);
-                GL11.glEnable(GL11.GL_TEXTURE_2D);
-                GL11.glEnable(GL11.GL_ALPHA_TEST);
-                GL11.glEnable(GL11.GL_FOG);
-                var33 += this.func_952_a(var34, var19, var2, var3);
-            } while(var19 < this.sortedWorldRenderers.length);
+                GL11.glEnable(3553 /*GL_TEXTURE_2D*/);
+                GL11.glEnable(3008 /*GL_ALPHA_TEST*/);
+                GL11.glEnable(2912 /*GL_FOG*/);
+                j += func_952_a(byte0, l, i, d);
+            } while (l < sortedWorldRenderers.length);
         } else {
-            var33 = var17 + this.func_952_a(0, this.sortedWorldRenderers.length, var2, var3);
-        }
-
-        return var33;
-    }
-
-    private void func_962_a(int var1, int var2) {
-        for(int var3 = var1; var3 < var2; ++var3) {
-            if(this.sortedWorldRenderers[var3].isWaitingOnOcclusionQuery) {
-                this.field_1456_c.clear();
-                ARBOcclusionQuery.glGetQueryObjectuARB(this.sortedWorldRenderers[var3].field_1732_z, GL15.GL_QUERY_RESULT_AVAILABLE, this.field_1456_c);
-                if(this.field_1456_c.get(0) != 0) {
-                    this.sortedWorldRenderers[var3].isWaitingOnOcclusionQuery = false;
-                    this.field_1456_c.clear();
-                    ARBOcclusionQuery.glGetQueryObjectuARB(this.sortedWorldRenderers[var3].field_1732_z, GL15.GL_QUERY_RESULT, this.field_1456_c);
-                    this.sortedWorldRenderers[var3].isVisible = this.field_1456_c.get(0) != 0;
-                }
-            }
-        }
-
-    }
-
-    private int func_952_a(int var1, int var2, int var3, double var4) {
-        this.field_1415_R.clear();
-        int var6 = 0;
-
-        for(int var7 = var1; var7 < var2; ++var7) {
-            if(var3 == 0) {
-                ++this.field_1420_M;
-                if(this.sortedWorldRenderers[var7].skipRenderPass[var3]) {
-                    ++this.field_1416_Q;
-                } else if(!this.sortedWorldRenderers[var7].isInFrustrum) {
-                    ++this.field_1419_N;
-                } else if(this.field_1436_w && !this.sortedWorldRenderers[var7].isVisible) {
-                    ++this.field_1418_O;
+            j += func_952_a(0, sortedWorldRenderers.length, i, d);
+        }
+        return j;
+    }
+
+    private void func_962_a(int i, int j) {
+        for (int k = i; k < j; k++) {
+            if (!sortedWorldRenderers[k].isWaitingOnOcclusionQuery) {
+                continue;
+            }
+            field_1456_c.clear();
+            ARBOcclusionQuery.glGetQueryObjectuARB(sortedWorldRenderers[k].field_1732_z, 34919 /*GL_QUERY_RESULT_AVAILABLE_ARB*/, field_1456_c);
+            if (field_1456_c.get(0) != 0) {
+                sortedWorldRenderers[k].isWaitingOnOcclusionQuery = false;
+                field_1456_c.clear();
+                ARBOcclusionQuery.glGetQueryObjectuARB(sortedWorldRenderers[k].field_1732_z, 34918 /*GL_QUERY_RESULT_ARB*/, field_1456_c);
+                sortedWorldRenderers[k].isVisible = field_1456_c.get(0) != 0;
+            }
+        }
+
+    }
+
+    private int func_952_a(int i, int j, int k, double d) {
+        field_1415_R.clear();
+        int l = 0;
+        for (int i1 = i; i1 < j; i1++) {
+            if (k == 0) {
+                field_1420_M++;
+                if (sortedWorldRenderers[i1].skipRenderPass[k]) {
+                    field_1416_Q++;
+                } else if (!sortedWorldRenderers[i1].isInFrustrum) {
+                    field_1419_N++;
+                } else if (field_1436_w && !sortedWorldRenderers[i1].isVisible) {
+                    field_1418_O++;
                 } else {
-                    ++this.field_1417_P;
-                }
-            }
-
-            if(!this.sortedWorldRenderers[var7].skipRenderPass[var3] && this.sortedWorldRenderers[var7].isInFrustrum && this.sortedWorldRenderers[var7].isVisible) {
-                int var8 = this.sortedWorldRenderers[var7].getGLCallListForPass(var3);
-                if(var8 >= 0) {
-                    this.field_1415_R.add(this.sortedWorldRenderers[var7]);
-                    ++var6;
-                }
-            }
-        }
-
-        EntityPlayerSP var19 = this.mc.thePlayer;
-        double var20 = var19.lastTickPosX + (var19.posX - var19.lastTickPosX) * var4;
-        double var10 = var19.lastTickPosY + (var19.posY - var19.lastTickPosY) * var4;
-        double var12 = var19.lastTickPosZ + (var19.posZ - var19.lastTickPosZ) * var4;
-        int var14 = 0;
-
-        int var15;
-        for(var15 = 0; var15 < this.field_1414_S.length; ++var15) {
-            this.field_1414_S[var15].func_859_b();
-        }
-
-        for(var15 = 0; var15 < this.field_1415_R.size(); ++var15) {
-            WorldRenderer var16 = (WorldRenderer)this.field_1415_R.get(var15);
-            int var17 = -1;
-
-            for(int var18 = 0; var18 < var14; ++var18) {
-                if(this.field_1414_S[var18].func_862_a(var16.field_1755_i, var16.field_1754_j, var16.field_1753_k)) {
-                    var17 = var18;
-                }
-            }
-
-            if(var17 < 0) {
-                var17 = var14++;
-                this.field_1414_S[var17].func_861_a(var16.field_1755_i, var16.field_1754_j, var16.field_1753_k, var20, var10, var12);
-            }
-
-            this.field_1414_S[var17].func_858_a(var16.getGLCallListForPass(var3));
-        }
-
-        this.func_944_a(var3, var4);
-        return var6;
+                    field_1417_P++;
+                }
+            }
+            if (sortedWorldRenderers[i1].skipRenderPass[k] || !sortedWorldRenderers[i1].isInFrustrum || !sortedWorldRenderers[i1].isVisible) {
+                continue;
+            }
+            int j1 = sortedWorldRenderers[i1].getGLCallListForPass(k);
+            if (j1 >= 0) {
+                field_1415_R.add(sortedWorldRenderers[i1]);
+                l++;
+            }
+        }
+
+        EntityPlayerSP entityplayersp = mc.thePlayer;
+        double d1 = entityplayersp.lastTickPosX + (entityplayersp.posX - entityplayersp.lastTickPosX) * d;
+        double d2 = entityplayersp.lastTickPosY + (entityplayersp.posY - entityplayersp.lastTickPosY) * d;
+        double d3 = entityplayersp.lastTickPosZ + (entityplayersp.posZ - entityplayersp.lastTickPosZ) * d;
+        int k1 = 0;
+        for (int l1 = 0; l1 < field_1414_S.length; l1++) {
+            field_1414_S[l1].func_859_b();
+        }
+
+        for (int i2 = 0; i2 < field_1415_R.size(); i2++) {
+            WorldRenderer worldrenderer = (WorldRenderer) field_1415_R.get(i2);
+            int j2 = -1;
+            for (int k2 = 0; k2 < k1; k2++) {
+                if (field_1414_S[k2].func_862_a(worldrenderer.field_1755_i, worldrenderer.field_1754_j, worldrenderer.field_1753_k)) {
+                    j2 = k2;
+                }
+            }
+
+            if (j2 < 0) {
+                j2 = k1++;
+                field_1414_S[j2].func_861_a(worldrenderer.field_1755_i, worldrenderer.field_1754_j, worldrenderer.field_1753_k, d1, d2, d3);
+            }
+            field_1414_S[j2].func_858_a(worldrenderer.getGLCallListForPass(k));
+        }
+
+        func_944_a(k, d);
+        return l;
     }
 
-    public void func_944_a(int var1, double var2) {
-        for(int var4 = 0; var4 < this.field_1414_S.length; ++var4) {
-            this.field_1414_S[var4].func_860_a();
+    public void func_944_a(int i, double d) {
+        for (int j = 0; j < field_1414_S.length; j++) {
+            field_1414_S[j].func_860_a();
         }
 
     }
 
     public void func_945_d() {
-        ++this.field_1435_x;
+        field_1435_x++;
     }
 
-    public void func_4142_a(float var1) {
-        if(!this.mc.theWorld.worldProvider.field_4220_c) {
-            GL11.glDisable(GL11.GL_TEXTURE_2D);
-            Vec3D var2 = this.worldObj.func_4079_a(this.mc.thePlayer, var1);
-            float var3 = (float)var2.xCoord;
-            float var4 = (float)var2.yCoord;
-            float var5 = (float)var2.zCoord;
-            float var7;
-            float var8;
-            if(this.mc.gameSettings.anaglyph) {
-                float var6 = (var3 * 30.0F + var4 * 59.0F + var5 * 11.0F) / 100.0F;
-                var7 = (var3 * 30.0F + var4 * 70.0F) / 100.0F;
-                var8 = (var3 * 30.0F + var5 * 70.0F) / 100.0F;
-                var3 = var6;
-                var4 = var7;
-                var5 = var8;
-            }
-
-            GL11.glColor3f(var3, var4, var5);
-            Tessellator var14 = Tessellator.instance;
-            GL11.glDepthMask(false);
-            GL11.glEnable(GL11.GL_FOG);
-            GL11.glColor3f(var3, var4, var5);
-            GL11.glCallList(this.field_1433_z);
-            GL11.glDisable(GL11.GL_FOG);
-            GL11.glDisable(GL11.GL_ALPHA_TEST);
-            GL11.glEnable(GL11.GL_BLEND);
-            GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-            float[] var15 = this.worldObj.worldProvider.func_4097_b(this.worldObj.getCelestialAngle(var1), var1);
-            float var11;
-            if(var15 != null) {
-                GL11.glDisable(GL11.GL_TEXTURE_2D);
-                GL11.glShadeModel(GL11.GL_SMOOTH);
-                GL11.glPushMatrix();
-                GL11.glRotatef(90.0F, 1.0F, 0.0F, 0.0F);
-                var8 = this.worldObj.getCelestialAngle(var1);
-                GL11.glRotatef(var8 > 0.5F ? 180.0F : 0.0F, 0.0F, 0.0F, 1.0F);
-                var14.startDrawing(6);
-                var14.setColorRGBA_F(var15[0], var15[1], var15[2], var15[3]);
-                var14.addVertex(0.0D, 100.0D, 0.0D);
-                byte var9 = 16;
-                var14.setColorRGBA_F(var15[0], var15[1], var15[2], 0.0F);
-
-                for(int var10 = 0; var10 <= var9; ++var10) {
-                    var11 = (float)var10 * (float)Math.PI * 2.0F / (float)var9;
-                    float var12 = MathHelper.sin(var11);
-                    float var13 = MathHelper.cos(var11);
-                    var14.addVertex((double)(var12 * 120.0F), (double)(var13 * 120.0F), (double)(-var13 * 40.0F * var15[3]));
-                }
-
-                var14.draw();
-                GL11.glPopMatrix();
-                GL11.glShadeModel(GL11.GL_FLAT);
-            }
-
-            GL11.glEnable(GL11.GL_TEXTURE_2D);
-            GL11.glBlendFunc(GL11.GL_ONE, GL11.GL_ONE);
+    public void func_4142_a(float f) {
+        if (mc.theWorld.worldProvider.field_4220_c) {
+            return;
+        }
+        GL11.glDisable(3553 /*GL_TEXTURE_2D*/);
+        Vec3D vec3d = worldObj.func_4079_a(mc.thePlayer, f);
+        float f1 = (float) vec3d.xCoord;
+        float f2 = (float) vec3d.yCoord;
+        float f3 = (float) vec3d.zCoord;
+        if (mc.gameSettings.anaglyph) {
+            float f4 = (f1 * 30F + f2 * 59F + f3 * 11F) / 100F;
+            float f5 = (f1 * 30F + f2 * 70F) / 100F;
+            float f7 = (f1 * 30F + f3 * 70F) / 100F;
+            f1 = f4;
+            f2 = f5;
+            f3 = f7;
+        }
+        GL11.glColor3f(f1, f2, f3);
+        Tessellator tessellator = Tessellator.instance;
+        GL11.glDepthMask(false);
+        GL11.glEnable(2912 /*GL_FOG*/);
+        GL11.glColor3f(f1, f2, f3);
+        GL11.glCallList(field_1433_z);
+        GL11.glDisable(2912 /*GL_FOG*/);
+        GL11.glDisable(3008 /*GL_ALPHA_TEST*/);
+        GL11.glEnable(3042 /*GL_BLEND*/);
+        GL11.glBlendFunc(770, 771);
+        float[] af = worldObj.worldProvider.func_4097_b(worldObj.getCelestialAngle(f), f);
+        if (af != null) {
+            GL11.glDisable(3553 /*GL_TEXTURE_2D*/);
+            GL11.glShadeModel(7425 /*GL_SMOOTH*/);
             GL11.glPushMatrix();
-            var7 = 0.0F;
-            var8 = 0.0F;
-            float var16 = 0.0F;
-            GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-            GL11.glTranslatef(var7, var8, var16);
-            GL11.glRotatef(0.0F, 0.0F, 0.0F, 1.0F);
-            GL11.glRotatef(this.worldObj.getCelestialAngle(var1) * 360.0F, 1.0F, 0.0F, 0.0F);
-            float var17 = 30.0F;
-            GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/terrain/sun.png"));
-            var14.startDrawingQuads();
-            var14.addVertexWithUV((double)(-var17), 100.0D, (double)(-var17), 0.0D, 0.0D);
-            var14.addVertexWithUV((double)var17, 100.0D, (double)(-var17), 1.0D, 0.0D);
-            var14.addVertexWithUV((double)var17, 100.0D, (double)var17, 1.0D, 1.0D);
-            var14.addVertexWithUV((double)(-var17), 100.0D, (double)var17, 0.0D, 1.0D);
-            var14.draw();
-            var17 = 20.0F;
-            GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/terrain/moon.png"));
-            var14.startDrawingQuads();
-            var14.addVertexWithUV((double)(-var17), -100.0D, (double)var17, 1.0D, 1.0D);
-            var14.addVertexWithUV((double)var17, -100.0D, (double)var17, 0.0D, 1.0D);
-            var14.addVertexWithUV((double)var17, -100.0D, (double)(-var17), 0.0D, 0.0D);
-            var14.addVertexWithUV((double)(-var17), -100.0D, (double)(-var17), 1.0D, 0.0D);
-            var14.draw();
-            GL11.glDisable(GL11.GL_TEXTURE_2D);
-            var11 = this.worldObj.func_679_f(var1);
-            if(var11 > 0.0F) {
-                GL11.glColor4f(var11, var11, var11, var11);
-                GL11.glCallList(this.field_1434_y);
+            GL11.glRotatef(90F, 1.0F, 0.0F, 0.0F);
+            float f8 = worldObj.getCelestialAngle(f);
+            GL11.glRotatef(f8 <= 0.5F ? 0.0F : 180F, 0.0F, 0.0F, 1.0F);
+            tessellator.startDrawing(6);
+            tessellator.setColorRGBA_F(af[0], af[1], af[2], af[3]);
+            tessellator.addVertex(0.0D, 100D, 0.0D);
+            int i = 16;
+            tessellator.setColorRGBA_F(af[0], af[1], af[2], 0.0F);
+            for (int j = 0; j <= i; j++) {
+                float f12 = ((float) j * 3.141593F * 2.0F) / (float) i;
+                float f14 = MathHelper.sin(f12);
+                float f15 = MathHelper.cos(f12);
+                tessellator.addVertex(f14 * 120F, f15 * 120F, -f15 * 40F * af[3]);
             }
 
-            GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-            GL11.glDisable(GL11.GL_BLEND);
-            GL11.glEnable(GL11.GL_ALPHA_TEST);
-            GL11.glEnable(GL11.GL_FOG);
+            tessellator.draw();
             GL11.glPopMatrix();
-            GL11.glColor3f(var3 * 0.2F + 0.04F, var4 * 0.2F + 0.04F, var5 * 0.6F + 0.1F);
-            GL11.glDisable(GL11.GL_TEXTURE_2D);
-            GL11.glCallList(this.field_1432_A);
-            GL11.glEnable(GL11.GL_TEXTURE_2D);
-            GL11.glDepthMask(true);
-        }
+            GL11.glShadeModel(7424 /*GL_FLAT*/);
+        }
+        GL11.glEnable(3553 /*GL_TEXTURE_2D*/);
+        GL11.glBlendFunc(1, 1);
+        GL11.glPushMatrix();
+        float f6 = 0.0F;
+        float f9 = 0.0F;
+        float f10 = 0.0F;
+        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+        GL11.glTranslatef(f6, f9, f10);
+        GL11.glRotatef(0.0F, 0.0F, 0.0F, 1.0F);
+        GL11.glRotatef(worldObj.getCelestialAngle(f) * 360F, 1.0F, 0.0F, 0.0F);
+        float f11 = 30F;
+        GL11.glBindTexture(3553 /*GL_TEXTURE_2D*/, renderEngine.getTexture("/terrain/sun.png"));
+        tessellator.startDrawingQuads();
+        tessellator.addVertexWithUV(-f11, 100D, -f11, 0.0D, 0.0D);
+        tessellator.addVertexWithUV(f11, 100D, -f11, 1.0D, 0.0D);
+        tessellator.addVertexWithUV(f11, 100D, f11, 1.0D, 1.0D);
+        tessellator.addVertexWithUV(-f11, 100D, f11, 0.0D, 1.0D);
+        tessellator.draw();
+        f11 = 20F;
+        GL11.glBindTexture(3553 /*GL_TEXTURE_2D*/, renderEngine.getTexture("/terrain/moon.png"));
+        tessellator.startDrawingQuads();
+        tessellator.addVertexWithUV(-f11, -100D, f11, 1.0D, 1.0D);
+        tessellator.addVertexWithUV(f11, -100D, f11, 0.0D, 1.0D);
+        tessellator.addVertexWithUV(f11, -100D, -f11, 0.0D, 0.0D);
+        tessellator.addVertexWithUV(-f11, -100D, -f11, 1.0D, 0.0D);
+        tessellator.draw();
+        GL11.glDisable(3553 /*GL_TEXTURE_2D*/);
+        float f13 = worldObj.func_679_f(f);
+        if (f13 > 0.0F) {
+            GL11.glColor4f(f13, f13, f13, f13);
+            GL11.glCallList(field_1434_y);
+        }
+        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+        GL11.glDisable(3042 /*GL_BLEND*/);
+        GL11.glEnable(3008 /*GL_ALPHA_TEST*/);
+        GL11.glEnable(2912 /*GL_FOG*/);
+        GL11.glPopMatrix();
+        GL11.glColor3f(f1 * 0.2F + 0.04F, f2 * 0.2F + 0.04F, f3 * 0.6F + 0.1F);
+        GL11.glDisable(3553 /*GL_TEXTURE_2D*/);
+        GL11.glCallList(field_1432_A);
+        GL11.glEnable(3553 /*GL_TEXTURE_2D*/);
+        GL11.glDepthMask(true);
     }
 
-    public void func_4141_b(float var1) {
-        if(!this.mc.theWorld.worldProvider.field_4220_c) {
-            if(this.mc.gameSettings.fancyGraphics) {
-                this.func_6510_c(var1);
-            } else {
-                GL11.glDisable(GL11.GL_CULL_FACE);
-                float var2 = (float)(this.mc.thePlayer.lastTickPosY + (this.mc.thePlayer.posY - this.mc.thePlayer.lastTickPosY) * (double)var1);
-                byte var3 = 32;
-                int var4 = 256 / var3;
-                Tessellator var5 = Tessellator.instance;
-                GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/environment/clouds.png"));
-                GL11.glEnable(GL11.GL_BLEND);
-                GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-                Vec3D var6 = this.worldObj.func_628_d(var1);
-                float var7 = (float)var6.xCoord;
-                float var8 = (float)var6.yCoord;
-                float var9 = (float)var6.zCoord;
-                float var10;
-                if(this.mc.gameSettings.anaglyph) {
-                    var10 = (var7 * 30.0F + var8 * 59.0F + var9 * 11.0F) / 100.0F;
-                    float var11 = (var7 * 30.0F + var8 * 70.0F) / 100.0F;
-                    float var12 = (var7 * 30.0F + var9 * 70.0F) / 100.0F;
-                    var7 = var10;
-                    var8 = var11;
-                    var9 = var12;
-                }
-
-                var10 = 0.5F / 1024.0F;
-                double var22 = this.mc.thePlayer.prevPosX + (this.mc.thePlayer.posX - this.mc.thePlayer.prevPosX) * (double)var1 + (double)(((float)this.field_1435_x + var1) * 0.03F);
-                double var13 = this.mc.thePlayer.prevPosZ + (this.mc.thePlayer.posZ - this.mc.thePlayer.prevPosZ) * (double)var1;
-                int var15 = MathHelper.floor_double(var22 / 2048.0D);
-                int var16 = MathHelper.floor_double(var13 / 2048.0D);
-                var22 -= (double)(var15 * 2048);
-                var13 -= (double)(var16 * 2048);
-                float var17 = 120.0F - var2 + 0.33F;
-                float var18 = (float)(var22 * (double)var10);
-                float var19 = (float)(var13 * (double)var10);
-                var5.startDrawingQuads();
-                var5.setColorRGBA_F(var7, var8, var9, 0.8F);
-
-                for(int var20 = -var3 * var4; var20 < var3 * var4; var20 += var3) {
-                    for(int var21 = -var3 * var4; var21 < var3 * var4; var21 += var3) {
-                        var5.addVertexWithUV((double)(var20 + 0), (double)var17, (double)(var21 + var3), (double)((float)(var20 + 0) * var10 + var18), (double)((float)(var21 + var3) * var10 + var19));
-                        var5.addVertexWithUV((double)(var20 + var3), (double)var17, (double)(var21 + var3), (double)((float)(var20 + var3) * var10 + var18), (double)((float)(var21 + var3) * var10 + var19));
-                        var5.addVertexWithUV((double)(var20 + var3), (double)var17, (double)(var21 + 0), (double)((float)(var20 + var3) * var10 + var18), (double)((float)(var21 + 0) * var10 + var19));
-                        var5.addVertexWithUV((double)(var20 + 0), (double)var17, (double)(var21 + 0), (double)((float)(var20 + 0) * var10 + var18), (double)((float)(var21 + 0) * var10 + var19));
-                    }
-                }
-
-                var5.draw();
-                GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-                GL11.glDisable(GL11.GL_BLEND);
-                GL11.glEnable(GL11.GL_CULL_FACE);
+    public void func_4141_b(float f) {
+        if (mc.theWorld.worldProvider.field_4220_c) {
+            return;
+        }
+
+        CloudRenderEvent event = new CloudRenderEvent();
+        Ref.getEventManager().handleEvent(event);
+
+        if (event.isCancelled()) {
+            return;
+        }
+
+        if (mc.gameSettings.fancyGraphics) {
+            func_6510_c(f);
+            return;
+        }
+        GL11.glDisable(2884 /*GL_CULL_FACE*/);
+        float f1 = (float) (mc.thePlayer.lastTickPosY + (mc.thePlayer.posY - mc.thePlayer.lastTickPosY) * (double) f);
+        byte byte0 = 32;
+        int i = 256 / byte0;
+        Tessellator tessellator = Tessellator.instance;
+        GL11.glBindTexture(3553 /*GL_TEXTURE_2D*/, renderEngine.getTexture("/environment/clouds.png"));
+        GL11.glEnable(3042 /*GL_BLEND*/);
+        GL11.glBlendFunc(770, 771);
+        Vec3D vec3d = worldObj.func_628_d(f);
+        float f2 = (float) vec3d.xCoord;
+        float f3 = (float) vec3d.yCoord;
+        float f4 = (float) vec3d.zCoord;
+        if (mc.gameSettings.anaglyph) {
+            float f5 = (f2 * 30F + f3 * 59F + f4 * 11F) / 100F;
+            float f7 = (f2 * 30F + f3 * 70F) / 100F;
+            float f8 = (f2 * 30F + f4 * 70F) / 100F;
+            f2 = f5;
+            f3 = f7;
+            f4 = f8;
+        }
+        float f6 = 0.0004882813F;
+        double d = mc.thePlayer.prevPosX + (mc.thePlayer.posX - mc.thePlayer.prevPosX) * (double) f + (double) (((float) field_1435_x + f) * 0.03F);
+        double d1 = mc.thePlayer.prevPosZ + (mc.thePlayer.posZ - mc.thePlayer.prevPosZ) * (double) f;
+        int j = MathHelper.floor_double(d / 2048D);
+        int k = MathHelper.floor_double(d1 / 2048D);
+        d -= j * 2048 /*GL_EXP*/;
+        d1 -= k * 2048 /*GL_EXP*/;
+        float f9 = (120F - f1) + 0.33F;
+        float f10 = (float) (d * (double) f6);
+        float f11 = (float) (d1 * (double) f6);
+        tessellator.startDrawingQuads();
+        tessellator.setColorRGBA_F(f2, f3, f4, 0.8F);
+        for (int l = -byte0 * i; l < byte0 * i; l += byte0) {
+            for (int i1 = -byte0 * i; i1 < byte0 * i; i1 += byte0) {
+                tessellator.addVertexWithUV(l, f9, i1 + byte0, (float) (l) * f6 + f10, (float) (i1 + byte0) * f6 + f11);
+                tessellator.addVertexWithUV(l + byte0, f9, i1 + byte0, (float) (l + byte0) * f6 + f10, (float) (i1 + byte0) * f6 + f11);
+                tessellator.addVertexWithUV(l + byte0, f9, i1, (float) (l + byte0) * f6 + f10, (float) (i1) * f6 + f11);
+                tessellator.addVertexWithUV(l, f9, i1, (float) (l) * f6 + f10, (float) (i1) * f6 + f11);
             }
+
         }
+
+        tessellator.draw();
+        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+        GL11.glDisable(3042 /*GL_BLEND*/);
+        GL11.glEnable(2884 /*GL_CULL_FACE*/);
     }
 
-    public void func_6510_c(float var1) {
-        GL11.glDisable(GL11.GL_CULL_FACE);
-        float var2 = (float)(this.mc.thePlayer.lastTickPosY + (this.mc.thePlayer.posY - this.mc.thePlayer.lastTickPosY) * (double)var1);
-        Tessellator var3 = Tessellator.instance;
-        float var4 = 12.0F;
-        float var5 = 4.0F;
-        double var6 = (this.mc.thePlayer.prevPosX + (this.mc.thePlayer.posX - this.mc.thePlayer.prevPosX) * (double)var1 + (double)(((float)this.field_1435_x + var1) * 0.03F)) / (double)var4;
-        double var8 = (this.mc.thePlayer.prevPosZ + (this.mc.thePlayer.posZ - this.mc.thePlayer.prevPosZ) * (double)var1) / (double)var4 + (double)0.33F;
-        float var10 = 108.0F - var2 + 0.33F;
-        int var11 = MathHelper.floor_double(var6 / 2048.0D);
-        int var12 = MathHelper.floor_double(var8 / 2048.0D);
-        var6 -= (double)(var11 * 2048);
-        var8 -= (double)(var12 * 2048);
-        GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/environment/clouds.png"));
-        GL11.glEnable(GL11.GL_BLEND);
-        GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-        Vec3D var13 = this.worldObj.func_628_d(var1);
-        float var14 = (float)var13.xCoord;
-        float var15 = (float)var13.yCoord;
-        float var16 = (float)var13.zCoord;
-        float var17;
-        float var18;
-        float var19;
-        if(this.mc.gameSettings.anaglyph) {
-            var17 = (var14 * 30.0F + var15 * 59.0F + var16 * 11.0F) / 100.0F;
-            var18 = (var14 * 30.0F + var15 * 70.0F) / 100.0F;
-            var19 = (var14 * 30.0F + var16 * 70.0F) / 100.0F;
-            var14 = var17;
-            var15 = var18;
-            var16 = var19;
+    public void func_6510_c(float f) {
+        GL11.glDisable(2884 /*GL_CULL_FACE*/);
+        float f1 = (float) (mc.thePlayer.lastTickPosY + (mc.thePlayer.posY - mc.thePlayer.lastTickPosY) * (double) f);
+        Tessellator tessellator = Tessellator.instance;
+        float f2 = 12F;
+        float f3 = 4F;
+        double d = (mc.thePlayer.prevPosX + (mc.thePlayer.posX - mc.thePlayer.prevPosX) * (double) f + (double) (((float) field_1435_x + f) * 0.03F)) / (double) f2;
+        double d1 = (mc.thePlayer.prevPosZ + (mc.thePlayer.posZ - mc.thePlayer.prevPosZ) * (double) f) / (double) f2 + 0.33000001311302185D;
+        float f4 = (108F - f1) + 0.33F;
+        int i = MathHelper.floor_double(d / 2048D);
+        int j = MathHelper.floor_double(d1 / 2048D);
+        d -= i * 2048 /*GL_EXP*/;
+        d1 -= j * 2048 /*GL_EXP*/;
+        GL11.glBindTexture(3553 /*GL_TEXTURE_2D*/, renderEngine.getTexture("/environment/clouds.png"));
+        GL11.glEnable(3042 /*GL_BLEND*/);
+        GL11.glBlendFunc(770, 771);
+        Vec3D vec3d = worldObj.func_628_d(f);
+        float f5 = (float) vec3d.xCoord;
+        float f6 = (float) vec3d.yCoord;
+        float f7 = (float) vec3d.zCoord;
+        if (mc.gameSettings.anaglyph) {
+            float f8 = (f5 * 30F + f6 * 59F + f7 * 11F) / 100F;
+            float f10 = (f5 * 30F + f6 * 70F) / 100F;
+            float f12 = (f5 * 30F + f7 * 70F) / 100F;
+            f5 = f8;
+            f6 = f10;
+            f7 = f12;
         }
-
-        var17 = (float)(var6 * 0.0D);
-        var18 = (float)(var8 * 0.0D);
-        var19 = 0.00390625F;
-        var17 = (float)MathHelper.floor_double(var6) * var19;
-        var18 = (float)MathHelper.floor_double(var8) * var19;
-        float var20 = (float)(var6 - (double)MathHelper.floor_double(var6));
-        float var21 = (float)(var8 - (double)MathHelper.floor_double(var8));
-        byte var22 = 8;
-        byte var23 = 3;
-        float var24 = 1.0F / 1024.0F;
-        GL11.glScalef(var4, 1.0F, var4);
-
-        for(int var25 = 0; var25 < 2; ++var25) {
-            if(var25 == 0) {
+        float f9 = (float) (d * 0.0D);
+        float f11 = (float) (d1 * 0.0D);
+        float f13 = 0.00390625F;
+        f9 = (float) MathHelper.floor_double(d) * f13;
+        f11 = (float) MathHelper.floor_double(d1) * f13;
+        float f14 = (float) (d - (double) MathHelper.floor_double(d));
+        float f15 = (float) (d1 - (double) MathHelper.floor_double(d1));
+        int k = 8;
+        byte byte0 = 3;
+        float f16 = 0.0009765625F;
+        GL11.glScalef(f2, 1.0F, f2);
+        for (int l = 0; l < 2; l++) {
+            if (l == 0) {
                 GL11.glColorMask(false, false, false, false);
             } else {
                 GL11.glColorMask(true, true, true, true);
             }
-
-            for(int var26 = -var23 + 1; var26 <= var23; ++var26) {
-                for(int var27 = -var23 + 1; var27 <= var23; ++var27) {
-                    var3.startDrawingQuads();
-                    float var28 = (float)(var26 * var22);
-                    float var29 = (float)(var27 * var22);
-                    float var30 = var28 - var20;
-                    float var31 = var29 - var21;
-                    if(var10 > -var5 - 1.0F) {
-                        var3.setColorRGBA_F(var14 * 0.7F, var15 * 0.7F, var16 * 0.7F, 0.8F);
-                        var3.setNormal(0.0F, -1.0F, 0.0F);
-                        var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + 0.0F), (double)(var31 + (float)var22), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-                        var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + 0.0F), (double)(var31 + (float)var22), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-                        var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + 0.0F), (double)(var31 + 0.0F), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
-                        var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + 0.0F), (double)(var31 + 0.0F), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
-                    }
-
-                    if(var10 <= var5 + 1.0F) {
-                        var3.setColorRGBA_F(var14, var15, var16, 0.8F);
-                        var3.setNormal(0.0F, 1.0F, 0.0F);
-                        var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + var5 - var24), (double)(var31 + (float)var22), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-                        var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + var5 - var24), (double)(var31 + (float)var22), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-                        var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + var5 - var24), (double)(var31 + 0.0F), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
-                        var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + var5 - var24), (double)(var31 + 0.0F), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
-                    }
-
-                    var3.setColorRGBA_F(var14 * 0.9F, var15 * 0.9F, var16 * 0.9F, 0.8F);
-                    int var32;
-                    if(var26 > -1) {
-                        var3.setNormal(-1.0F, 0.0F, 0.0F);
-
-                        for(var32 = 0; var32 < var22; ++var32) {
-                            var3.addVertexWithUV((double)(var30 + (float)var32 + 0.0F), (double)(var10 + 0.0F), (double)(var31 + (float)var22), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-                            var3.addVertexWithUV((double)(var30 + (float)var32 + 0.0F), (double)(var10 + var5), (double)(var31 + (float)var22), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-                            var3.addVertexWithUV((double)(var30 + (float)var32 + 0.0F), (double)(var10 + var5), (double)(var31 + 0.0F), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
-                            var3.addVertexWithUV((double)(var30 + (float)var32 + 0.0F), (double)(var10 + 0.0F), (double)(var31 + 0.0F), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
-                        }
-                    }
-
-                    if(var26 <= 1) {
-                        var3.setNormal(1.0F, 0.0F, 0.0F);
-
-                        for(var32 = 0; var32 < var22; ++var32) {
-                            var3.addVertexWithUV((double)(var30 + (float)var32 + 1.0F - var24), (double)(var10 + 0.0F), (double)(var31 + (float)var22), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-                            var3.addVertexWithUV((double)(var30 + (float)var32 + 1.0F - var24), (double)(var10 + var5), (double)(var31 + (float)var22), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-                            var3.addVertexWithUV((double)(var30 + (float)var32 + 1.0F - var24), (double)(var10 + var5), (double)(var31 + 0.0F), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
-                            var3.addVertexWithUV((double)(var30 + (float)var32 + 1.0F - var24), (double)(var10 + 0.0F), (double)(var31 + 0.0F), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
-                        }
-                    }
-
-                    var3.setColorRGBA_F(var14 * 0.8F, var15 * 0.8F, var16 * 0.8F, 0.8F);
-                    if(var27 > -1) {
-                        var3.setNormal(0.0F, 0.0F, -1.0F);
-
-                        for(var32 = 0; var32 < var22; ++var32) {
-                            var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + var5), (double)(var31 + (float)var32 + 0.0F), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
-                            var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + var5), (double)(var31 + (float)var32 + 0.0F), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
-                            var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + 0.0F), (double)(var31 + (float)var32 + 0.0F), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
-                            var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + 0.0F), (double)(var31 + (float)var32 + 0.0F), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
-                        }
-                    }
-
-                    if(var27 <= 1) {
-                        var3.setNormal(0.0F, 0.0F, 1.0F);
-
-                        for(var32 = 0; var32 < var22; ++var32) {
-                            var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + var5), (double)(var31 + (float)var32 + 1.0F - var24), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
-                            var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + var5), (double)(var31 + (float)var32 + 1.0F - var24), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
-                            var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + 0.0F), (double)(var31 + (float)var32 + 1.0F - var24), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
-                            var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + 0.0F), (double)(var31 + (float)var32 + 1.0F - var24), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
-                        }
-                    }
-
-                    var3.draw();
+            for (int i1 = -byte0 + 1; i1 <= byte0; i1++) {
+                for (int j1 = -byte0 + 1; j1 <= byte0; j1++) {
+                    tessellator.startDrawingQuads();
+                    float f17 = i1 * k;
+                    float f18 = j1 * k;
+                    float f19 = f17 - f14;
+                    float f20 = f18 - f15;
+                    if (f4 > -f3 - 1.0F) {
+                        tessellator.setColorRGBA_F(f5 * 0.7F, f6 * 0.7F, f7 * 0.7F, 0.8F);
+                        tessellator.setNormal(0.0F, -1F, 0.0F);
+                        tessellator.addVertexWithUV(f19 + 0.0F, f4 + 0.0F, f20 + (float) k, (f17 + 0.0F) * f13 + f9, (f18 + (float) k) * f13 + f11);
+                        tessellator.addVertexWithUV(f19 + (float) k, f4 + 0.0F, f20 + (float) k, (f17 + (float) k) * f13 + f9, (f18 + (float) k) * f13 + f11);
+                        tessellator.addVertexWithUV(f19 + (float) k, f4 + 0.0F, f20 + 0.0F, (f17 + (float) k) * f13 + f9, (f18 + 0.0F) * f13 + f11);
+                        tessellator.addVertexWithUV(f19 + 0.0F, f4 + 0.0F, f20 + 0.0F, (f17 + 0.0F) * f13 + f9, (f18 + 0.0F) * f13 + f11);
+                    }
+                    if (f4 <= f3 + 1.0F) {
+                        tessellator.setColorRGBA_F(f5, f6, f7, 0.8F);
+                        tessellator.setNormal(0.0F, 1.0F, 0.0F);
+                        tessellator.addVertexWithUV(f19 + 0.0F, (f4 + f3) - f16, f20 + (float) k, (f17 + 0.0F) * f13 + f9, (f18 + (float) k) * f13 + f11);
+                        tessellator.addVertexWithUV(f19 + (float) k, (f4 + f3) - f16, f20 + (float) k, (f17 + (float) k) * f13 + f9, (f18 + (float) k) * f13 + f11);
+                        tessellator.addVertexWithUV(f19 + (float) k, (f4 + f3) - f16, f20 + 0.0F, (f17 + (float) k) * f13 + f9, (f18 + 0.0F) * f13 + f11);
+                        tessellator.addVertexWithUV(f19 + 0.0F, (f4 + f3) - f16, f20 + 0.0F, (f17 + 0.0F) * f13 + f9, (f18 + 0.0F) * f13 + f11);
+                    }
+                    tessellator.setColorRGBA_F(f5 * 0.9F, f6 * 0.9F, f7 * 0.9F, 0.8F);
+                    if (i1 > -1) {
+                        tessellator.setNormal(-1F, 0.0F, 0.0F);
+                        for (int k1 = 0; k1 < k; k1++) {
+                            tessellator.addVertexWithUV(f19 + (float) k1 + 0.0F, f4 + 0.0F, f20 + (float) k, (f17 + (float) k1 + 0.5F) * f13 + f9, (f18 + (float) k) * f13 + f11);
+                            tessellator.addVertexWithUV(f19 + (float) k1 + 0.0F, f4 + f3, f20 + (float) k, (f17 + (float) k1 + 0.5F) * f13 + f9, (f18 + (float) k) * f13 + f11);
+                            tessellator.addVertexWithUV(f19 + (float) k1 + 0.0F, f4 + f3, f20 + 0.0F, (f17 + (float) k1 + 0.5F) * f13 + f9, (f18 + 0.0F) * f13 + f11);
+                            tessellator.addVertexWithUV(f19 + (float) k1 + 0.0F, f4 + 0.0F, f20 + 0.0F, (f17 + (float) k1 + 0.5F) * f13 + f9, (f18 + 0.0F) * f13 + f11);
+                        }
+
+                    }
+                    if (i1 <= 1) {
+                        tessellator.setNormal(1.0F, 0.0F, 0.0F);
+                        for (int l1 = 0; l1 < k; l1++) {
+                            tessellator.addVertexWithUV((f19 + (float) l1 + 1.0F) - f16, f4 + 0.0F, f20 + (float) k, (f17 + (float) l1 + 0.5F) * f13 + f9, (f18 + (float) k) * f13 + f11);
+                            tessellator.addVertexWithUV((f19 + (float) l1 + 1.0F) - f16, f4 + f3, f20 + (float) k, (f17 + (float) l1 + 0.5F) * f13 + f9, (f18 + (float) k) * f13 + f11);
+                            tessellator.addVertexWithUV((f19 + (float) l1 + 1.0F) - f16, f4 + f3, f20 + 0.0F, (f17 + (float) l1 + 0.5F) * f13 + f9, (f18 + 0.0F) * f13 + f11);
+                            tessellator.addVertexWithUV((f19 + (float) l1 + 1.0F) - f16, f4 + 0.0F, f20 + 0.0F, (f17 + (float) l1 + 0.5F) * f13 + f9, (f18 + 0.0F) * f13 + f11);
+                        }
+
+                    }
+                    tessellator.setColorRGBA_F(f5 * 0.8F, f6 * 0.8F, f7 * 0.8F, 0.8F);
+                    if (j1 > -1) {
+                        tessellator.setNormal(0.0F, 0.0F, -1F);
+                        for (int i2 = 0; i2 < k; i2++) {
+                            tessellator.addVertexWithUV(f19 + 0.0F, f4 + f3, f20 + (float) i2 + 0.0F, (f17 + 0.0F) * f13 + f9, (f18 + (float) i2 + 0.5F) * f13 + f11);
+                            tessellator.addVertexWithUV(f19 + (float) k, f4 + f3, f20 + (float) i2 + 0.0F, (f17 + (float) k) * f13 + f9, (f18 + (float) i2 + 0.5F) * f13 + f11);
+                            tessellator.addVertexWithUV(f19 + (float) k, f4 + 0.0F, f20 + (float) i2 + 0.0F, (f17 + (float) k) * f13 + f9, (f18 + (float) i2 + 0.5F) * f13 + f11);
+                            tessellator.addVertexWithUV(f19 + 0.0F, f4 + 0.0F, f20 + (float) i2 + 0.0F, (f17 + 0.0F) * f13 + f9, (f18 + (float) i2 + 0.5F) * f13 + f11);
+                        }
+
+                    }
+                    if (j1 <= 1) {
+                        tessellator.setNormal(0.0F, 0.0F, 1.0F);
+                        for (int j2 = 0; j2 < k; j2++) {
+                            tessellator.addVertexWithUV(f19 + 0.0F, f4 + f3, (f20 + (float) j2 + 1.0F) - f16, (f17 + 0.0F) * f13 + f9, (f18 + (float) j2 + 0.5F) * f13 + f11);
+                            tessellator.addVertexWithUV(f19 + (float) k, f4 + f3, (f20 + (float) j2 + 1.0F) - f16, (f17 + (float) k) * f13 + f9, (f18 + (float) j2 + 0.5F) * f13 + f11);
+                            tessellator.addVertexWithUV(f19 + (float) k, f4 + 0.0F, (f20 + (float) j2 + 1.0F) - f16, (f17 + (float) k) * f13 + f9, (f18 + (float) j2 + 0.5F) * f13 + f11);
+                            tessellator.addVertexWithUV(f19 + 0.0F, f4 + 0.0F, (f20 + (float) j2 + 1.0F) - f16, (f17 + 0.0F) * f13 + f9, (f18 + (float) j2 + 0.5F) * f13 + f11);
+                        }
+
+                    }
+                    tessellator.draw();
                 }
+
             }
+
         }
 
         GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-        GL11.glDisable(GL11.GL_BLEND);
-        GL11.glEnable(GL11.GL_CULL_FACE);
+        GL11.glDisable(3042 /*GL_BLEND*/);
+        GL11.glEnable(2884 /*GL_CULL_FACE*/);
     }
 
-    public boolean updateRenderers(EntityPlayer var1, boolean var2) {
-        Collections.sort(this.worldRenderersToUpdate, new RenderSorter(var1));
-        int var3 = this.worldRenderersToUpdate.size() - 1;
-        int var4 = this.worldRenderersToUpdate.size();
-
-        for(int var5 = 0; var5 < var4; ++var5) {
-            WorldRenderer var6 = (WorldRenderer)this.worldRenderersToUpdate.get(var3 - var5);
-            if(!var2) {
-                if(var6.distanceToEntity(var1) > 1024.0F) {
-                    if(var6.isInFrustrum) {
-                        if(var5 >= 3) {
+    public boolean updateRenderers(EntityPlayer entityplayer, boolean flag) {
+        Collections.sort(worldRenderersToUpdate, new RenderSorter(entityplayer));
+        int i = worldRenderersToUpdate.size() - 1;
+        int j = worldRenderersToUpdate.size();
+        for (int k = 0; k < j; k++) {
+            WorldRenderer worldrenderer = (WorldRenderer) worldRenderersToUpdate.get(i - k);
+            if (!flag) {
+                if (worldrenderer.distanceToEntity(entityplayer) > 1024F) {
+                    if (worldrenderer.isInFrustrum) {
+                        if (k >= 3) {
                             return false;
                         }
-                    } else if(var5 >= 1) {
+                    } else if (k >= 1) {
                         return false;
                     }
                 }
-            } else if(!var6.isInFrustrum) {
+            } else if (!worldrenderer.isInFrustrum) {
                 continue;
             }
-
-            var6.updateRenderer();
-            this.worldRenderersToUpdate.remove(var6);
-            var6.needsUpdate = false;
+            worldrenderer.updateRenderer();
+            worldRenderersToUpdate.remove(worldrenderer);
+            worldrenderer.needsUpdate = false;
         }
 
-        return this.worldRenderersToUpdate.size() == 0;
+        return worldRenderersToUpdate.size() == 0;
     }
 
-    public void func_959_a(EntityPlayer var1, MovingObjectPosition var2, int var3, ItemStack var4, float var5) {
-        Tessellator var6 = Tessellator.instance;
-        GL11.glEnable(GL11.GL_BLEND);
-        GL11.glEnable(GL11.GL_ALPHA_TEST);
-        GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE);
-        GL11.glColor4f(1.0F, 1.0F, 1.0F, (MathHelper.sin((float)System.currentTimeMillis() / 100.0F) * 0.2F + 0.4F) * 0.5F);
-        int var8;
-        if(var3 == 0) {
-            if(this.field_1450_i > 0.0F) {
-                GL11.glBlendFunc(GL11.GL_DST_COLOR, GL11.GL_SRC_COLOR);
-                int var7 = this.renderEngine.getTexture("/terrain.png");
-                GL11.glBindTexture(GL11.GL_TEXTURE_2D, var7);
+    public void func_959_a(EntityPlayer entityplayer, MovingObjectPosition movingobjectposition, int i, ItemStack itemstack, float f) {
+        Tessellator tessellator = Tessellator.instance;
+        GL11.glEnable(3042 /*GL_BLEND*/);
+        GL11.glEnable(3008 /*GL_ALPHA_TEST*/);
+        GL11.glBlendFunc(770, 1);
+        GL11.glColor4f(1.0F, 1.0F, 1.0F, (MathHelper.sin((float) System.currentTimeMillis() / 100F) * 0.2F + 0.4F) * 0.5F);
+        if (i == 0) {
+            if (field_1450_i > 0.0F) {
+                GL11.glBlendFunc(774, 768);
+                int j = renderEngine.getTexture("/terrain.png");
+                GL11.glBindTexture(3553 /*GL_TEXTURE_2D*/, j);
                 GL11.glColor4f(1.0F, 1.0F, 1.0F, 0.5F);
                 GL11.glPushMatrix();
-                var8 = this.worldObj.getBlockId(var2.blockX, var2.blockY, var2.blockZ);
-                Block var9 = var8 > 0 ? Block.blocksList[var8] : null;
-                GL11.glDisable(GL11.GL_ALPHA_TEST);
-                GL11.glPolygonOffset(-3.0F, -3.0F);
-                GL11.glEnable(GL11.GL_POLYGON_OFFSET_FILL);
-                var6.startDrawingQuads();
-                double var10 = var1.lastTickPosX + (var1.posX - var1.lastTickPosX) * (double)var5;
-                double var12 = var1.lastTickPosY + (var1.posY - var1.lastTickPosY) * (double)var5;
-                double var14 = var1.lastTickPosZ + (var1.posZ - var1.lastTickPosZ) * (double)var5;
-                var6.setTranslationD(-var10, -var12, -var14);
-                var6.disableColor();
-                if(var9 == null) {
-                    var9 = Block.stone;
+                int k = worldObj.getBlockId(movingobjectposition.blockX, movingobjectposition.blockY, movingobjectposition.blockZ);
+                Block block = k <= 0 ? null : Block.blocksList[k];
+                GL11.glDisable(3008 /*GL_ALPHA_TEST*/);
+                GL11.glPolygonOffset(-3F, -3F);
+                GL11.glEnable(32823 /*GL_POLYGON_OFFSET_FILL*/);
+                tessellator.startDrawingQuads();
+                double d = entityplayer.lastTickPosX + (entityplayer.posX - entityplayer.lastTickPosX) * (double) f;
+                double d1 = entityplayer.lastTickPosY + (entityplayer.posY - entityplayer.lastTickPosY) * (double) f;
+                double d2 = entityplayer.lastTickPosZ + (entityplayer.posZ - entityplayer.lastTickPosZ) * (double) f;
+                tessellator.setTranslationD(-d, -d1, -d2);
+                tessellator.disableColor();
+                if (block == null) {
+                    block = Block.stone;
                 }
-
-                this.field_1438_u.renderBlockUsingTexture(var9, var2.blockX, var2.blockY, var2.blockZ, 240 + (int)(this.field_1450_i * 10.0F));
-                var6.draw();
-                var6.setTranslationD(0.0D, 0.0D, 0.0D);
+                field_1438_u.renderBlockUsingTexture(block, movingobjectposition.blockX, movingobjectposition.blockY, movingobjectposition.blockZ, 240 + (int) (field_1450_i * 10F));
+                tessellator.draw();
+                tessellator.setTranslationD(0.0D, 0.0D, 0.0D);
                 GL11.glPolygonOffset(0.0F, 0.0F);
-                GL11.glDisable(GL11.GL_POLYGON_OFFSET_FILL);
-                GL11.glEnable(GL11.GL_ALPHA_TEST);
+                GL11.glDisable(32823 /*GL_POLYGON_OFFSET_FILL*/);
+                GL11.glEnable(3008 /*GL_ALPHA_TEST*/);
                 GL11.glDepthMask(true);
                 GL11.glPopMatrix();
             }
-        } else if(var4 != null) {
-            GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-            float var16 = MathHelper.sin((float)System.currentTimeMillis() / 100.0F) * 0.2F + 0.8F;
-            GL11.glColor4f(var16, var16, var16, MathHelper.sin((float)System.currentTimeMillis() / 200.0F) * 0.2F + 0.5F);
-            var8 = this.renderEngine.getTexture("/terrain.png");
-            GL11.glBindTexture(GL11.GL_TEXTURE_2D, var8);
-            int var17 = var2.blockX;
-            int var18 = var2.blockY;
-            int var11 = var2.blockZ;
-            if(var2.sideHit == 0) {
-                --var18;
-            }
-
-            if(var2.sideHit == 1) {
-                ++var18;
-            }
-
-            if(var2.sideHit == 2) {
-                --var11;
-            }
-
-            if(var2.sideHit == 3) {
-                ++var11;
-            }
-
-            if(var2.sideHit == 4) {
-                --var17;
-            }
-
-            if(var2.sideHit == 5) {
-                ++var17;
+        } else if (itemstack != null) {
+            GL11.glBlendFunc(770, 771);
+            float f1 = MathHelper.sin((float) System.currentTimeMillis() / 100F) * 0.2F + 0.8F;
+            GL11.glColor4f(f1, f1, f1, MathHelper.sin((float) System.currentTimeMillis() / 200F) * 0.2F + 0.5F);
+            int l = renderEngine.getTexture("/terrain.png");
+            GL11.glBindTexture(3553 /*GL_TEXTURE_2D*/, l);
+            int i1 = movingobjectposition.blockX;
+            int j1 = movingobjectposition.blockY;
+            int k1 = movingobjectposition.blockZ;
+            if (movingobjectposition.sideHit == 0) {
+                j1--;
+            }
+            if (movingobjectposition.sideHit == 1) {
+                j1++;
+            }
+            if (movingobjectposition.sideHit == 2) {
+                k1--;
+            }
+            if (movingobjectposition.sideHit == 3) {
+                k1++;
+            }
+            if (movingobjectposition.sideHit == 4) {
+                i1--;
+            }
+            if (movingobjectposition.sideHit == 5) {
+                i1++;
             }
         }
-
-        GL11.glDisable(GL11.GL_BLEND);
-        GL11.glDisable(GL11.GL_ALPHA_TEST);
+        GL11.glDisable(3042 /*GL_BLEND*/);
+        GL11.glDisable(3008 /*GL_ALPHA_TEST*/);
     }
 
-    public void drawSelectionBox(EntityPlayer var1, MovingObjectPosition var2, int var3, ItemStack var4, float var5) {
-        if(var3 == 0 && var2.typeOfHit == 0) {
-            GL11.glEnable(GL11.GL_BLEND);
-            GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+    public void drawSelectionBox(EntityPlayer entityplayer, MovingObjectPosition movingobjectposition, int i, ItemStack itemstack, float f) {
+        if (i == 0 && movingobjectposition.typeOfHit == 0) {
+            GL11.glEnable(3042 /*GL_BLEND*/);
+            GL11.glBlendFunc(770, 771);
             GL11.glColor4f(0.0F, 0.0F, 0.0F, 0.4F);
             GL11.glLineWidth(2.0F);
-            GL11.glDisable(GL11.GL_TEXTURE_2D);
+            GL11.glDisable(3553 /*GL_TEXTURE_2D*/);
             GL11.glDepthMask(false);
-            float var6 = 0.002F;
-            int var7 = this.worldObj.getBlockId(var2.blockX, var2.blockY, var2.blockZ);
-            if(var7 > 0) {
-                Block.blocksList[var7].setBlockBoundsBasedOnState(this.worldObj, var2.blockX, var2.blockY, var2.blockZ);
-                double var8 = var1.lastTickPosX + (var1.posX - var1.lastTickPosX) * (double)var5;
-                double var10 = var1.lastTickPosY + (var1.posY - var1.lastTickPosY) * (double)var5;
-                double var12 = var1.lastTickPosZ + (var1.posZ - var1.lastTickPosZ) * (double)var5;
-                this.drawOutlinedBoundingBox(Block.blocksList[var7].getSelectedBoundingBoxFromPool(this.worldObj, var2.blockX, var2.blockY, var2.blockZ).expand((double)var6, (double)var6, (double)var6).getOffsetBoundingBox(-var8, -var10, -var12));
+            float f1 = 0.002F;
+            int j = worldObj.getBlockId(movingobjectposition.blockX, movingobjectposition.blockY, movingobjectposition.blockZ);
+            if (j > 0) {
+                Block.blocksList[j].setBlockBoundsBasedOnState(worldObj, movingobjectposition.blockX, movingobjectposition.blockY, movingobjectposition.blockZ);
+                double d = entityplayer.lastTickPosX + (entityplayer.posX - entityplayer.lastTickPosX) * (double) f;
+                double d1 = entityplayer.lastTickPosY + (entityplayer.posY - entityplayer.lastTickPosY) * (double) f;
+                double d2 = entityplayer.lastTickPosZ + (entityplayer.posZ - entityplayer.lastTickPosZ) * (double) f;
+                drawOutlinedBoundingBox(Block.blocksList[j].getSelectedBoundingBoxFromPool(worldObj, movingobjectposition.blockX, movingobjectposition.blockY, movingobjectposition.blockZ).expand(f1, f1, f1).getOffsetBoundingBox(-d, -d1, -d2));
             }
-
             GL11.glDepthMask(true);
-            GL11.glEnable(GL11.GL_TEXTURE_2D);
-            GL11.glDisable(GL11.GL_BLEND);
-        }
-
-    }
-
-    private void drawOutlinedBoundingBox(AxisAlignedBB var1) {
-        Tessellator var2 = Tessellator.instance;
-        var2.startDrawing(3);
-        var2.addVertex(var1.minX, var1.minY, var1.minZ);
-        var2.addVertex(var1.maxX, var1.minY, var1.minZ);
-        var2.addVertex(var1.maxX, var1.minY, var1.maxZ);
-        var2.addVertex(var1.minX, var1.minY, var1.maxZ);
-        var2.addVertex(var1.minX, var1.minY, var1.minZ);
-        var2.draw();
-        var2.startDrawing(3);
-        var2.addVertex(var1.minX, var1.maxY, var1.minZ);
-        var2.addVertex(var1.maxX, var1.maxY, var1.minZ);
-        var2.addVertex(var1.maxX, var1.maxY, var1.maxZ);
-        var2.addVertex(var1.minX, var1.maxY, var1.maxZ);
-        var2.addVertex(var1.minX, var1.maxY, var1.minZ);
-        var2.draw();
-        var2.startDrawing(1);
-        var2.addVertex(var1.minX, var1.minY, var1.minZ);
-        var2.addVertex(var1.minX, var1.maxY, var1.minZ);
-        var2.addVertex(var1.maxX, var1.minY, var1.minZ);
-        var2.addVertex(var1.maxX, var1.maxY, var1.minZ);
-        var2.addVertex(var1.maxX, var1.minY, var1.maxZ);
-        var2.addVertex(var1.maxX, var1.maxY, var1.maxZ);
-        var2.addVertex(var1.minX, var1.minY, var1.maxZ);
-        var2.addVertex(var1.minX, var1.maxY, var1.maxZ);
-        var2.draw();
-    }
-
-    public void func_949_a(int var1, int var2, int var3, int var4, int var5, int var6) {
-        int var7 = MathHelper.bucketInt(var1, 16);
-        int var8 = MathHelper.bucketInt(var2, 16);
-        int var9 = MathHelper.bucketInt(var3, 16);
-        int var10 = MathHelper.bucketInt(var4, 16);
-        int var11 = MathHelper.bucketInt(var5, 16);
-        int var12 = MathHelper.bucketInt(var6, 16);
-
-        for(int var13 = var7; var13 <= var10; ++var13) {
-            int var14 = var13 % this.renderChunksWide;
-            if(var14 < 0) {
-                var14 += this.renderChunksWide;
-            }
-
-            for(int var15 = var8; var15 <= var11; ++var15) {
-                int var16 = var15 % this.renderChunksTall;
-                if(var16 < 0) {
-                    var16 += this.renderChunksTall;
-                }
-
-                for(int var17 = var9; var17 <= var12; ++var17) {
-                    int var18 = var17 % this.renderChunksDeep;
-                    if(var18 < 0) {
-                        var18 += this.renderChunksDeep;
-                    }
-
-                    int var19 = (var18 * this.renderChunksTall + var16) * this.renderChunksWide + var14;
-                    WorldRenderer var20 = this.worldRenderers[var19];
-                    if(!var20.needsUpdate) {
-                        this.worldRenderersToUpdate.add(var20);
-                    }
-
-                    var20.markDirty();
-                }
-            }
-        }
-
-    }
-
-    public void func_934_a(int var1, int var2, int var3) {
-        this.func_949_a(var1 - 1, var2 - 1, var3 - 1, var1 + 1, var2 + 1, var3 + 1);
-    }
-
-    public void markBlockRangeNeedsUpdate(int var1, int var2, int var3, int var4, int var5, int var6) {
-        this.func_949_a(var1 - 1, var2 - 1, var3 - 1, var4 + 1, var5 + 1, var6 + 1);
-    }
-
-    public void func_960_a(ICamera var1, float var2) {
-        for(int var3 = 0; var3 < this.worldRenderers.length; ++var3) {
-            if(!this.worldRenderers[var3].canRender() && (!this.worldRenderers[var3].isInFrustrum || (var3 + this.field_1449_j & 15) == 0)) {
-                this.worldRenderers[var3].updateInFrustrum(var1);
-            }
-        }
-
-        ++this.field_1449_j;
-    }
-
-    public void playRecord(String var1, int var2, int var3, int var4) {
-        if(var1 != null) {
-            this.mc.ingameGUI.func_553_b("C418 - " + var1);
-        }
-
-        this.mc.sndManager.func_331_a(var1, (float)var2, (float)var3, (float)var4, 1.0F, 1.0F);
-    }
-
-    public void playSound(String var1, double var2, double var4, double var6, float var8, float var9) {
-        float var10 = 16.0F;
-        if(var8 > 1.0F) {
-            var10 *= var8;
-        }
-
-        if(this.mc.thePlayer.getDistanceSq(var2, var4, var6) < (double)(var10 * var10)) {
-            this.mc.sndManager.playSound(var1, (float)var2, (float)var4, (float)var6, var8, var9);
-        }
-
-    }
-
-    public void spawnParticle(String var1, double var2, double var4, double var6, double var8, double var10, double var12) {
-        double var14 = this.mc.thePlayer.posX - var2;
-        double var16 = this.mc.thePlayer.posY - var4;
-        double var18 = this.mc.thePlayer.posZ - var6;
-        if(var14 * var14 + var16 * var16 + var18 * var18 <= 256.0D) {
-            if(var1 == "bubble") {
-                this.mc.effectRenderer.func_1192_a(new EntityBubbleFX(this.worldObj, var2, var4, var6, var8, var10, var12));
-            } else if(var1 == "smoke") {
-                this.mc.effectRenderer.func_1192_a(new EntitySmokeFX(this.worldObj, var2, var4, var6));
-            } else if(var1 == "portal") {
-                this.mc.effectRenderer.func_1192_a(new EntityPortalFX(this.worldObj, var2, var4, var6, var8, var10, var12));
-            } else if(var1 == "explode") {
-                this.mc.effectRenderer.func_1192_a(new EntityExplodeFX(this.worldObj, var2, var4, var6, var8, var10, var12));
-            } else if(var1 == "flame") {
-                this.mc.effectRenderer.func_1192_a(new EntityFlameFX(this.worldObj, var2, var4, var6, var8, var10, var12));
-            } else if(var1 == "lava") {
-                this.mc.effectRenderer.func_1192_a(new EntityLavaFX(this.worldObj, var2, var4, var6));
-            } else if(var1 == "splash") {
-                this.mc.effectRenderer.func_1192_a(new EntitySplashFX(this.worldObj, var2, var4, var6, var8, var10, var12));
-            } else if(var1 == "largesmoke") {
-                this.mc.effectRenderer.func_1192_a(new EntitySmokeFX(this.worldObj, var2, var4, var6, 2.5F));
-            } else if(var1 == "reddust") {
-                this.mc.effectRenderer.func_1192_a(new EntityReddustFX(this.worldObj, var2, var4, var6));
-            } else if(var1 == "snowballpoof") {
-                this.mc.effectRenderer.func_1192_a(new EntitySlimeFX(this.worldObj, var2, var4, var6, Item.snowball));
-            } else if(var1 == "slime") {
-                this.mc.effectRenderer.func_1192_a(new EntitySlimeFX(this.worldObj, var2, var4, var6, Item.slimeBall));
-            }
-
-        }
-    }
-
-    public void obtainEntitySkin(Entity var1) {
-        var1.func_20046_s();
-        if(var1.field_20047_bv != null) {
-            this.renderEngine.obtainImageData(var1.field_20047_bv, new ImageBufferDownload());
-        }
-
-        if(var1.skinUrl != null) {
-            this.renderEngine.obtainImageData(var1.skinUrl, new ImageBufferDownload());
-        }
-
-    }
-
-    public void releaseEntitySkin(Entity var1) {
-        if(var1.field_20047_bv != null) {
-            this.renderEngine.releaseImageData(var1.field_20047_bv);
-        }
-
-        if(var1.skinUrl != null) {
-            this.renderEngine.releaseImageData(var1.skinUrl);
-        }
-
+            GL11.glEnable(3553 /*GL_TEXTURE_2D*/);
+            GL11.glDisable(3042 /*GL_BLEND*/);
+        }
+    }
+
+    private void drawOutlinedBoundingBox(AxisAlignedBB axisalignedbb) {
+        Tessellator tessellator = Tessellator.instance;
+        tessellator.startDrawing(3);
+        tessellator.addVertex(axisalignedbb.minX, axisalignedbb.minY, axisalignedbb.minZ);
+        tessellator.addVertex(axisalignedbb.maxX, axisalignedbb.minY, axisalignedbb.minZ);
+        tessellator.addVertex(axisalignedbb.maxX, axisalignedbb.minY, axisalignedbb.maxZ);
+        tessellator.addVertex(axisalignedbb.minX, axisalignedbb.minY, axisalignedbb.maxZ);
+        tessellator.addVertex(axisalignedbb.minX, axisalignedbb.minY, axisalignedbb.minZ);
+        tessellator.draw();
+        tessellator.startDrawing(3);
+        tessellator.addVertex(axisalignedbb.minX, axisalignedbb.maxY, axisalignedbb.minZ);
+        tessellator.addVertex(axisalignedbb.maxX, axisalignedbb.maxY, axisalignedbb.minZ);
+        tessellator.addVertex(axisalignedbb.maxX, axisalignedbb.maxY, axisalignedbb.maxZ);
+        tessellator.addVertex(axisalignedbb.minX, axisalignedbb.maxY, axisalignedbb.maxZ);
+        tessellator.addVertex(axisalignedbb.minX, axisalignedbb.maxY, axisalignedbb.minZ);
+        tessellator.draw();
+        tessellator.startDrawing(1);
+        tessellator.addVertex(axisalignedbb.minX, axisalignedbb.minY, axisalignedbb.minZ);
+        tessellator.addVertex(axisalignedbb.minX, axisalignedbb.maxY, axisalignedbb.minZ);
+        tessellator.addVertex(axisalignedbb.maxX, axisalignedbb.minY, axisalignedbb.minZ);
+        tessellator.addVertex(axisalignedbb.maxX, axisalignedbb.maxY, axisalignedbb.minZ);
+        tessellator.addVertex(axisalignedbb.maxX, axisalignedbb.minY, axisalignedbb.maxZ);
+        tessellator.addVertex(axisalignedbb.maxX, axisalignedbb.maxY, axisalignedbb.maxZ);
+        tessellator.addVertex(axisalignedbb.minX, axisalignedbb.minY, axisalignedbb.maxZ);
+        tessellator.addVertex(axisalignedbb.minX, axisalignedbb.maxY, axisalignedbb.maxZ);
+        tessellator.draw();
+    }
+
+    public void func_949_a(int i, int j, int k, int l, int i1, int j1) {
+        int k1 = MathHelper.bucketInt(i, 16);
+        int l1 = MathHelper.bucketInt(j, 16);
+        int i2 = MathHelper.bucketInt(k, 16);
+        int j2 = MathHelper.bucketInt(l, 16);
+        int k2 = MathHelper.bucketInt(i1, 16);
+        int l2 = MathHelper.bucketInt(j1, 16);
+        for (int i3 = k1; i3 <= j2; i3++) {
+            int j3 = i3 % renderChunksWide;
+            if (j3 < 0) {
+                j3 += renderChunksWide;
+            }
+            for (int k3 = l1; k3 <= k2; k3++) {
+                int l3 = k3 % renderChunksTall;
+                if (l3 < 0) {
+                    l3 += renderChunksTall;
+                }
+                for (int i4 = i2; i4 <= l2; i4++) {
+                    int j4 = i4 % renderChunksDeep;
+                    if (j4 < 0) {
+                        j4 += renderChunksDeep;
+                    }
+                    int k4 = (j4 * renderChunksTall + l3) * renderChunksWide + j3;
+                    WorldRenderer worldrenderer = worldRenderers[k4];
+                    if (!worldrenderer.needsUpdate) {
+                        worldRenderersToUpdate.add(worldrenderer);
+                    }
+                    worldrenderer.markDirty();
+                }
+
+            }
+
+        }
+
+    }
+
+    public void func_934_a(int i, int j, int k) {
+        func_949_a(i - 1, j - 1, k - 1, i + 1, j + 1, k + 1);
+    }
+
+    public void markBlockRangeNeedsUpdate(int i, int j, int k, int l, int i1, int j1) {
+        func_949_a(i - 1, j - 1, k - 1, l + 1, i1 + 1, j1 + 1);
+    }
+
+    public void func_960_a(ICamera icamera, float f) {
+        for (int i = 0; i < worldRenderers.length; i++) {
+            if (!worldRenderers[i].canRender() && (!worldRenderers[i].isInFrustrum || (i + field_1449_j & 0xf) == 0)) {
+                worldRenderers[i].updateInFrustrum(icamera);
+            }
+        }
+
+        field_1449_j++;
+    }
+
+    public void playRecord(String s, int i, int j, int k) {
+        if (s != null) {
+            mc.ingameGUI.func_553_b("C418 - " + s);
+        }
+        mc.sndManager.func_331_a(s, i, j, k, 1.0F, 1.0F);
+    }
+
+    public void playSound(String s, double d, double d1, double d2,
+                          float f, float f1) {
+        float f2 = 16F;
+        if (f > 1.0F) {
+            f2 *= f;
+        }
+        if (mc.thePlayer.getDistanceSq(d, d1, d2) < (double) (f2 * f2)) {
+            mc.sndManager.playSound(s, (float) d, (float) d1, (float) d2, f, f1);
+        }
+    }
+
+    public void spawnParticle(String s, double d, double d1, double d2,
+                              double d3, double d4, double d5) {
+        double d6 = mc.thePlayer.posX - d;
+        double d7 = mc.thePlayer.posY - d1;
+        double d8 = mc.thePlayer.posZ - d2;
+        if (d6 * d6 + d7 * d7 + d8 * d8 > 256D) {
+            return;
+        }
+        if (s == "bubble") {
+            mc.effectRenderer.func_1192_a(new EntityBubbleFX(worldObj, d, d1, d2, d3, d4, d5));
+        } else if (s == "smoke") {
+            mc.effectRenderer.func_1192_a(new EntitySmokeFX(worldObj, d, d1, d2));
+        } else if (s == "portal") {
+            mc.effectRenderer.func_1192_a(new EntityPortalFX(worldObj, d, d1, d2, d3, d4, d5));
+        } else if (s == "explode") {
+            mc.effectRenderer.func_1192_a(new EntityExplodeFX(worldObj, d, d1, d2, d3, d4, d5));
+        } else if (s == "flame") {
+            mc.effectRenderer.func_1192_a(new EntityFlameFX(worldObj, d, d1, d2, d3, d4, d5));
+        } else if (s == "lava") {
+            mc.effectRenderer.func_1192_a(new EntityLavaFX(worldObj, d, d1, d2));
+        } else if (s == "splash") {
+            mc.effectRenderer.func_1192_a(new EntitySplashFX(worldObj, d, d1, d2, d3, d4, d5));
+        } else if (s == "largesmoke") {
+            mc.effectRenderer.func_1192_a(new EntitySmokeFX(worldObj, d, d1, d2, 2.5F));
+        } else if (s == "reddust") {
+            mc.effectRenderer.func_1192_a(new EntityReddustFX(worldObj, d, d1, d2));
+        } else if (s == "snowballpoof") {
+            mc.effectRenderer.func_1192_a(new EntitySlimeFX(worldObj, d, d1, d2, Item.snowball));
+        } else if (s == "slime") {
+            mc.effectRenderer.func_1192_a(new EntitySlimeFX(worldObj, d, d1, d2, Item.slimeBall));
+        }
+    }
+
+    public void obtainEntitySkin(Entity entity) {
+        entity.func_20046_s();
+        if (entity.field_20047_bv != null) {
+            renderEngine.obtainImageData(entity.field_20047_bv, new ImageBufferDownload());
+        }
+        if (entity.skinUrl != null) {
+            renderEngine.obtainImageData(entity.skinUrl, new ImageBufferDownload());
+        }
+    }
+
+    public void releaseEntitySkin(Entity entity) {
+        if (entity.field_20047_bv != null) {
+            renderEngine.releaseImageData(entity.field_20047_bv);
+        }
+        if (entity.skinUrl != null) {
+            renderEngine.releaseImageData(entity.skinUrl);
+        }
     }
 
     public void updateAllRenderers() {
-        for(int var1 = 0; var1 < this.worldRenderers.length; ++var1) {
-            if(this.worldRenderers[var1].field_1747_A) {
-                if(!this.worldRenderers[var1].needsUpdate) {
-                    this.worldRenderersToUpdate.add(this.worldRenderers[var1]);
-                }
-
-                this.worldRenderers[var1].markDirty();
-            }
+        for (int i = 0; i < worldRenderers.length; i++) {
+            if (!worldRenderers[i].field_1747_A) {
+                continue;
+            }
+            if (!worldRenderers[i].needsUpdate) {
+                worldRenderersToUpdate.add(worldRenderers[i]);
+            }
+            worldRenderers[i].markDirty();
         }
 
     }
 
-    public void func_935_a(int var1, int var2, int var3, TileEntity var4) {
+    public void func_935_a(int i, int j, int k, TileEntity tileentity) {
     }
 }
