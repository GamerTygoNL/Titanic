--- net/minecraft/src/BlockMinecartTrack.java
+++ net/minecraft/src/BlockMinecartTrack.java
@@ -3,12 +3,13 @@
 import java.util.Random;
 
 public class BlockMinecartTrack extends Block {
-    protected BlockMinecartTrack(int var1, int var2) {
-        super(var1, var2, Material.circuits);
-        this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 2.0F / 16.0F, 1.0F);
+
+    protected BlockMinecartTrack(int i, int j) {
+        super(i, j, Material.circuits);
+        setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.125F, 1.0F);
     }
 
-    public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+    public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int i, int j, int k) {
         return null;
     }
 
@@ -16,23 +17,26 @@
         return false;
     }
 
-    public MovingObjectPosition collisionRayTrace(World var1, int var2, int var3, int var4, Vec3D var5, Vec3D var6) {
-        this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
-        return super.collisionRayTrace(var1, var2, var3, var4, var5, var6);
-    }
-
-    public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-        int var5 = var1.getBlockMetadata(var2, var3, var4);
-        if(var5 >= 2 && var5 <= 5) {
-            this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 10.0F / 16.0F, 1.0F);
-        } else {
-            this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 2.0F / 16.0F, 1.0F);
-        }
-
-    }
-
-    public int getBlockTextureFromSideAndMetadata(int var1, int var2) {
-        return var2 >= 6 ? this.blockIndexInTexture - 16 : this.blockIndexInTexture;
+    public MovingObjectPosition collisionRayTrace(World world, int i, int j, int k, Vec3D vec3d, Vec3D vec3d1) {
+        setBlockBoundsBasedOnState(world, i, j, k);
+        return super.collisionRayTrace(world, i, j, k, vec3d, vec3d1);
+    }
+
+    public void setBlockBoundsBasedOnState(IBlockAccess iblockaccess, int i, int j, int k) {
+        int l = iblockaccess.getBlockMetadata(i, j, k);
+        if (l >= 2 && l <= 5) {
+            setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.625F, 1.0F);
+        } else {
+            setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.125F, 1.0F);
+        }
+    }
+
+    public int getBlockTextureFromSideAndMetadata(int i, int j) {
+        if (j >= 6) {
+            return blockIndexInTexture - 16;
+        } else {
+            return blockIndexInTexture;
+        }
     }
 
     public boolean renderAsNormalBlock() {
@@ -43,59 +47,51 @@
         return 9;
     }
 
-    public int quantityDropped(Random var1) {
+    public int quantityDropped(Random random) {
         return 1;
     }
 
-    public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-        return var1.isBlockOpaqueCube(var2, var3 - 1, var4);
-    }
-
-    public void onBlockAdded(World var1, int var2, int var3, int var4) {
-        if(!var1.multiplayerWorld) {
-            var1.setBlockMetadataWithNotify(var2, var3, var4, 15);
-            this.func_4031_h(var1, var2, var3, var4);
-        }
-
-    }
-
-    public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-        if(!var1.multiplayerWorld) {
-            int var6 = var1.getBlockMetadata(var2, var3, var4);
-            boolean var7 = false;
-            if(!var1.isBlockOpaqueCube(var2, var3 - 1, var4)) {
-                var7 = true;
-            }
-
-            if(var6 == 2 && !var1.isBlockOpaqueCube(var2 + 1, var3, var4)) {
-                var7 = true;
-            }
-
-            if(var6 == 3 && !var1.isBlockOpaqueCube(var2 - 1, var3, var4)) {
-                var7 = true;
-            }
-
-            if(var6 == 4 && !var1.isBlockOpaqueCube(var2, var3, var4 - 1)) {
-                var7 = true;
-            }
-
-            if(var6 == 5 && !var1.isBlockOpaqueCube(var2, var3, var4 + 1)) {
-                var7 = true;
-            }
-
-            if(var7) {
-                this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-                var1.setBlockWithNotify(var2, var3, var4, 0);
-            } else if(var5 > 0 && Block.blocksList[var5].canProvidePower() && MinecartTrackLogic.func_791_a(new MinecartTrackLogic(this, var1, var2, var3, var4)) == 3) {
-                this.func_4031_h(var1, var2, var3, var4);
-            }
-
-        }
-    }
-
-    private void func_4031_h(World var1, int var2, int var3, int var4) {
-        if(!var1.multiplayerWorld) {
-            (new MinecartTrackLogic(this, var1, var2, var3, var4)).func_792_a(var1.isBlockIndirectlyGettingPowered(var2, var3, var4));
+    public boolean canPlaceBlockAt(World world, int i, int j, int k) {
+        return world.isBlockOpaqueCube(i, j - 1, k);
+    }
+
+    public void onBlockAdded(World world, int i, int j, int k) {
+        if (!world.multiplayerWorld) {
+            world.setBlockMetadataWithNotify(i, j, k, 15);
+            func_4031_h(world, i, j, k);
+        }
+    }
+
+    public void onNeighborBlockChange(World world, int i, int j, int k, int l) {
+        if (world.multiplayerWorld) {
+            return;
+        }
+        int i1 = world.getBlockMetadata(i, j, k);
+        boolean flag = !world.isBlockOpaqueCube(i, j - 1, k);
+        if (i1 == 2 && !world.isBlockOpaqueCube(i + 1, j, k)) {
+            flag = true;
+        }
+        if (i1 == 3 && !world.isBlockOpaqueCube(i - 1, j, k)) {
+            flag = true;
+        }
+        if (i1 == 4 && !world.isBlockOpaqueCube(i, j, k - 1)) {
+            flag = true;
+        }
+        if (i1 == 5 && !world.isBlockOpaqueCube(i, j, k + 1)) {
+            flag = true;
+        }
+        if (flag) {
+            dropBlockAsItem(world, i, j, k, world.getBlockMetadata(i, j, k));
+            world.setBlockWithNotify(i, j, k, 0);
+        } else if (l > 0 && Block.blocksList[l].canProvidePower() && MinecartTrackLogic.func_791_a(new MinecartTrackLogic(this, world, i, j, k)) == 3) {
+            func_4031_h(world, i, j, k);
+        }
+    }
+
+    private void func_4031_h(World world, int i, int j, int k) {
+        if (world.multiplayerWorld) {
+        } else {
+            (new MinecartTrackLogic(this, world, i, j, k)).func_792_a(world.isBlockIndirectlyGettingPowered(i, j, k));
         }
     }
 }
