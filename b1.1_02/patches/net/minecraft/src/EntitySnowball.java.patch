--- net/minecraft/src/EntitySnowball.java
+++ net/minecraft/src/EntitySnowball.java
@@ -3,226 +3,233 @@
 import java.util.List;
 
 public class EntitySnowball extends Entity {
-    private int field_816_b = -1;
-    private int field_815_c = -1;
-    private int field_814_d = -1;
-    private int field_813_e = 0;
-    private boolean field_812_f = false;
-    public int field_817_a = 0;
+
+    public int field_817_a;
+    private int field_816_b;
+    private int field_815_c;
+    private int field_814_d;
+    private int field_813_e;
+    private boolean field_812_f;
     private EntityLiving field_811_g;
     private int field_810_h;
-    private int field_809_i = 0;
-
-    public EntitySnowball(World var1) {
-        super(var1);
-        this.setSize(0.25F, 0.25F);
-    }
-
-    public boolean isInRangeToRenderDist(double var1) {
-        double var3 = this.boundingBox.getAverageEdgeLength() * 4.0D;
-        var3 *= 64.0D;
-        return var1 < var3 * var3;
-    }
-
-    public EntitySnowball(World var1, EntityLiving var2) {
-        super(var1);
-        this.field_811_g = var2;
-        this.setSize(0.25F, 0.25F);
-        this.setLocationAndAngles(var2.posX, var2.posY + (double)var2.func_373_s(), var2.posZ, var2.rotationYaw, var2.rotationPitch);
-        this.posX -= (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
-        this.posY -= (double)0.1F;
-        this.posZ -= (double)(MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
-        this.setPosition(this.posX, this.posY, this.posZ);
-        this.yOffset = 0.0F;
-        float var3 = 0.4F;
-        this.motionX = (double)(-MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * var3);
-        this.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * var3);
-        this.motionY = (double)(-MathHelper.sin(this.rotationPitch / 180.0F * (float)Math.PI) * var3);
-        this.func_467_a(this.motionX, this.motionY, this.motionZ, 1.5F, 1.0F);
-    }
-
-    public EntitySnowball(World var1, double var2, double var4, double var6) {
-        super(var1);
-        this.field_810_h = 0;
-        this.setSize(0.25F, 0.25F);
-        this.setPosition(var2, var4, var6);
-        this.yOffset = 0.0F;
-    }
-
-    public void func_467_a(double var1, double var3, double var5, float var7, float var8) {
-        float var9 = MathHelper.sqrt_double(var1 * var1 + var3 * var3 + var5 * var5);
-        var1 /= (double)var9;
-        var3 /= (double)var9;
-        var5 /= (double)var9;
-        var1 += this.rand.nextGaussian() * (double)0.0075F * (double)var8;
-        var3 += this.rand.nextGaussian() * (double)0.0075F * (double)var8;
-        var5 += this.rand.nextGaussian() * (double)0.0075F * (double)var8;
-        var1 *= (double)var7;
-        var3 *= (double)var7;
-        var5 *= (double)var7;
-        this.motionX = var1;
-        this.motionY = var3;
-        this.motionZ = var5;
-        float var10 = MathHelper.sqrt_double(var1 * var1 + var5 * var5);
-        this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(var1, var5) * 180.0D / (double)((float)Math.PI));
-        this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(var3, (double)var10) * 180.0D / (double)((float)Math.PI));
-        this.field_810_h = 0;
-    }
-
-    public void setVelocity(double var1, double var3, double var5) {
-        this.motionX = var1;
-        this.motionY = var3;
-        this.motionZ = var5;
-        if(this.prevRotationPitch == 0.0F && this.prevRotationYaw == 0.0F) {
-            float var7 = MathHelper.sqrt_double(var1 * var1 + var5 * var5);
-            this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(var1, var5) * 180.0D / (double)((float)Math.PI));
-            this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(var3, (double)var7) * 180.0D / (double)((float)Math.PI));
+    private int field_809_i;
+
+    public EntitySnowball(World world) {
+        super(world);
+        field_816_b = -1;
+        field_815_c = -1;
+        field_814_d = -1;
+        field_813_e = 0;
+        field_812_f = false;
+        field_817_a = 0;
+        field_809_i = 0;
+        setSize(0.25F, 0.25F);
+    }
+
+    public EntitySnowball(World world, EntityLiving entityliving) {
+        super(world);
+        field_816_b = -1;
+        field_815_c = -1;
+        field_814_d = -1;
+        field_813_e = 0;
+        field_812_f = false;
+        field_817_a = 0;
+        field_809_i = 0;
+        field_811_g = entityliving;
+        setSize(0.25F, 0.25F);
+        setLocationAndAngles(entityliving.posX, entityliving.posY + (double) entityliving.func_373_s(), entityliving.posZ, entityliving.rotationYaw, entityliving.rotationPitch);
+        posX -= MathHelper.cos((rotationYaw / 180F) * 3.141593F) * 0.16F;
+        posY -= 0.10000000149011612D;
+        posZ -= MathHelper.sin((rotationYaw / 180F) * 3.141593F) * 0.16F;
+        setPosition(posX, posY, posZ);
+        yOffset = 0.0F;
+        float f = 0.4F;
+        motionX = -MathHelper.sin((rotationYaw / 180F) * 3.141593F) * MathHelper.cos((rotationPitch / 180F) * 3.141593F) * f;
+        motionZ = MathHelper.cos((rotationYaw / 180F) * 3.141593F) * MathHelper.cos((rotationPitch / 180F) * 3.141593F) * f;
+        motionY = -MathHelper.sin((rotationPitch / 180F) * 3.141593F) * f;
+        func_467_a(motionX, motionY, motionZ, 1.5F, 1.0F);
+    }
+
+    public EntitySnowball(World world, double d, double d1, double d2) {
+        super(world);
+        field_816_b = -1;
+        field_815_c = -1;
+        field_814_d = -1;
+        field_813_e = 0;
+        field_812_f = false;
+        field_817_a = 0;
+        field_809_i = 0;
+        field_810_h = 0;
+        setSize(0.25F, 0.25F);
+        setPosition(d, d1, d2);
+        yOffset = 0.0F;
+    }
+
+    public boolean isInRangeToRenderDist(double d) {
+        double d1 = boundingBox.getAverageEdgeLength() * 4D;
+        d1 *= 64D;
+        return d < d1 * d1;
+    }
+
+    public void func_467_a(double d, double d1, double d2, float f,
+                           float f1) {
+        float f2 = MathHelper.sqrt_double(d * d + d1 * d1 + d2 * d2);
+        d /= f2;
+        d1 /= f2;
+        d2 /= f2;
+        d += rand.nextGaussian() * 0.0074999998323619366D * (double) f1;
+        d1 += rand.nextGaussian() * 0.0074999998323619366D * (double) f1;
+        d2 += rand.nextGaussian() * 0.0074999998323619366D * (double) f1;
+        d *= f;
+        d1 *= f;
+        d2 *= f;
+        motionX = d;
+        motionY = d1;
+        motionZ = d2;
+        float f3 = MathHelper.sqrt_double(d * d + d2 * d2);
+        prevRotationYaw = rotationYaw = (float) ((Math.atan2(d, d2) * 180D) / 3.1415927410125732D);
+        prevRotationPitch = rotationPitch = (float) ((Math.atan2(d1, f3) * 180D) / 3.1415927410125732D);
+        field_810_h = 0;
+    }
+
+    public void setVelocity(double d, double d1, double d2) {
+        motionX = d;
+        motionY = d1;
+        motionZ = d2;
+        if (prevRotationPitch == 0.0F && prevRotationYaw == 0.0F) {
+            float f = MathHelper.sqrt_double(d * d + d2 * d2);
+            prevRotationYaw = rotationYaw = (float) ((Math.atan2(d, d2) * 180D) / 3.1415927410125732D);
+            prevRotationPitch = rotationPitch = (float) ((Math.atan2(d1, f) * 180D) / 3.1415927410125732D);
         }
-
     }
 
     public void onUpdate() {
-        this.lastTickPosX = this.posX;
-        this.lastTickPosY = this.posY;
-        this.lastTickPosZ = this.posZ;
+        lastTickPosX = posX;
+        lastTickPosY = posY;
+        lastTickPosZ = posZ;
         super.onUpdate();
-        if(this.field_817_a > 0) {
-            --this.field_817_a;
+        if (field_817_a > 0) {
+            field_817_a--;
         }
-
-        if(this.field_812_f) {
-            int var1 = this.worldObj.getBlockId(this.field_816_b, this.field_815_c, this.field_814_d);
-            if(var1 == this.field_813_e) {
-                ++this.field_810_h;
-                if(this.field_810_h == 1200) {
-                    this.setEntityDead();
+        if (field_812_f) {
+            int i = worldObj.getBlockId(field_816_b, field_815_c, field_814_d);
+            if (i != field_813_e) {
+                field_812_f = false;
+                motionX *= rand.nextFloat() * 0.2F;
+                motionY *= rand.nextFloat() * 0.2F;
+                motionZ *= rand.nextFloat() * 0.2F;
+                field_810_h = 0;
+                field_809_i = 0;
+            } else {
+                field_810_h++;
+                if (field_810_h == 1200) {
+                    setEntityDead();
                 }
-
                 return;
             }
-
-            this.field_812_f = false;
-            this.motionX *= (double)(this.rand.nextFloat() * 0.2F);
-            this.motionY *= (double)(this.rand.nextFloat() * 0.2F);
-            this.motionZ *= (double)(this.rand.nextFloat() * 0.2F);
-            this.field_810_h = 0;
-            this.field_809_i = 0;
         } else {
-            ++this.field_809_i;
-        }
-
-        Vec3D var15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
-        Vec3D var2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
-        MovingObjectPosition var3 = this.worldObj.rayTraceBlocks(var15, var2);
-        var15 = Vec3D.createVector(this.posX, this.posY, this.posZ);
-        var2 = Vec3D.createVector(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
-        if(var3 != null) {
-            var2 = Vec3D.createVector(var3.hitVec.xCoord, var3.hitVec.yCoord, var3.hitVec.zCoord);
-        }
-
-        if(!this.worldObj.multiplayerWorld) {
-            Entity var4 = null;
-            List var5 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
-            double var6 = 0.0D;
-
-            for(int var8 = 0; var8 < var5.size(); ++var8) {
-                Entity var9 = (Entity)var5.get(var8);
-                if(var9.canBeCollidedWith() && (var9 != this.field_811_g || this.field_809_i >= 5)) {
-                    float var10 = 0.3F;
-                    AxisAlignedBB var11 = var9.boundingBox.expand((double)var10, (double)var10, (double)var10);
-                    MovingObjectPosition var12 = var11.func_1169_a(var15, var2);
-                    if(var12 != null) {
-                        double var13 = var15.distanceTo(var12.hitVec);
-                        if(var13 < var6 || var6 == 0.0D) {
-                            var4 = var9;
-                            var6 = var13;
-                        }
-                    }
-                }
-            }
-
-            if(var4 != null) {
-                var3 = new MovingObjectPosition(var4);
-            }
-        }
-
-        if(var3 != null) {
-            if(var3.entityHit != null && var3.entityHit.attackEntityFrom(this.field_811_g, 0)) {
-            }
-
-            for(int var16 = 0; var16 < 8; ++var16) {
-                this.worldObj.spawnParticle("snowballpoof", this.posX, this.posY, this.posZ, 0.0D, 0.0D, 0.0D);
-            }
-
-            this.setEntityDead();
-        }
-
-        this.posX += this.motionX;
-        this.posY += this.motionY;
-        this.posZ += this.motionZ;
-        float var17 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
-        this.rotationYaw = (float)(Math.atan2(this.motionX, this.motionZ) * 180.0D / (double)((float)Math.PI));
-
-        for(this.rotationPitch = (float)(Math.atan2(this.motionY, (double)var17) * 180.0D / (double)((float)Math.PI)); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
-        }
-
-        while(this.rotationPitch - this.prevRotationPitch >= 180.0F) {
-            this.prevRotationPitch += 360.0F;
-        }
-
-        while(this.rotationYaw - this.prevRotationYaw < -180.0F) {
-            this.prevRotationYaw -= 360.0F;
-        }
-
-        while(this.rotationYaw - this.prevRotationYaw >= 180.0F) {
-            this.prevRotationYaw += 360.0F;
-        }
-
-        this.rotationPitch = this.prevRotationPitch + (this.rotationPitch - this.prevRotationPitch) * 0.2F;
-        this.rotationYaw = this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * 0.2F;
-        float var18 = 0.99F;
-        float var19 = 0.03F;
-        if(this.handleWaterMovement()) {
-            for(int var7 = 0; var7 < 4; ++var7) {
-                float var20 = 0.25F;
-                this.worldObj.spawnParticle("bubble", this.posX - this.motionX * (double)var20, this.posY - this.motionY * (double)var20, this.posZ - this.motionZ * (double)var20, this.motionX, this.motionY, this.motionZ);
-            }
-
-            var18 = 0.8F;
-        }
-
-        this.motionX *= (double)var18;
-        this.motionY *= (double)var18;
-        this.motionZ *= (double)var18;
-        this.motionY -= (double)var19;
-        this.setPosition(this.posX, this.posY, this.posZ);
-    }
-
-    public void writeEntityToNBT(NBTTagCompound var1) {
-        var1.setShort("xTile", (short)this.field_816_b);
-        var1.setShort("yTile", (short)this.field_815_c);
-        var1.setShort("zTile", (short)this.field_814_d);
-        var1.setByte("inTile", (byte)this.field_813_e);
-        var1.setByte("shake", (byte)this.field_817_a);
-        var1.setByte("inGround", (byte)(this.field_812_f ? 1 : 0));
-    }
-
-    public void readEntityFromNBT(NBTTagCompound var1) {
-        this.field_816_b = var1.getShort("xTile");
-        this.field_815_c = var1.getShort("yTile");
-        this.field_814_d = var1.getShort("zTile");
-        this.field_813_e = var1.getByte("inTile") & 255;
-        this.field_817_a = var1.getByte("shake") & 255;
-        this.field_812_f = var1.getByte("inGround") == 1;
-    }
-
-    public void onCollideWithPlayer(EntityPlayer var1) {
-        if(this.field_812_f && this.field_811_g == var1 && this.field_817_a <= 0 && var1.inventory.addItemStackToInventory(new ItemStack(Item.arrow.shiftedIndex, 1))) {
-            this.worldObj.playSoundAtEntity(this, "random.pop", 0.2F, ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
-            var1.onItemPickup(this, 1);
-            this.setEntityDead();
-        }
-
+            field_809_i++;
+        }
+        Vec3D vec3d = Vec3D.createVector(posX, posY, posZ);
+        Vec3D vec3d1 = Vec3D.createVector(posX + motionX, posY + motionY, posZ + motionZ);
+        MovingObjectPosition movingobjectposition = worldObj.rayTraceBlocks(vec3d, vec3d1);
+        vec3d = Vec3D.createVector(posX, posY, posZ);
+        vec3d1 = Vec3D.createVector(posX + motionX, posY + motionY, posZ + motionZ);
+        if (movingobjectposition != null) {
+            vec3d1 = Vec3D.createVector(movingobjectposition.hitVec.xCoord, movingobjectposition.hitVec.yCoord, movingobjectposition.hitVec.zCoord);
+        }
+        if (!worldObj.multiplayerWorld) {
+            Entity entity = null;
+            List list = worldObj.getEntitiesWithinAABBExcludingEntity(this, boundingBox.addCoord(motionX, motionY, motionZ).expand(1.0D, 1.0D, 1.0D));
+            double d = 0.0D;
+            for (int l = 0; l < list.size(); l++) {
+                Entity entity1 = (Entity) list.get(l);
+                if (!entity1.canBeCollidedWith() || entity1 == field_811_g && field_809_i < 5) {
+                    continue;
+                }
+                float f4 = 0.3F;
+                AxisAlignedBB axisalignedbb = entity1.boundingBox.expand(f4, f4, f4);
+                MovingObjectPosition movingobjectposition1 = axisalignedbb.func_1169_a(vec3d, vec3d1);
+                if (movingobjectposition1 == null) {
+                    continue;
+                }
+                double d1 = vec3d.distanceTo(movingobjectposition1.hitVec);
+                if (d1 < d || d == 0.0D) {
+                    entity = entity1;
+                    d = d1;
+                }
+            }
+
+            if (entity != null) {
+                movingobjectposition = new MovingObjectPosition(entity);
+            }
+        }
+        if (movingobjectposition != null) {
+            if (movingobjectposition.entityHit != null) {
+                if (!movingobjectposition.entityHit.attackEntityFrom(field_811_g, 0)) ;
+            }
+            for (int j = 0; j < 8; j++) {
+                worldObj.spawnParticle("snowballpoof", posX, posY, posZ, 0.0D, 0.0D, 0.0D);
+            }
+
+            setEntityDead();
+        }
+        posX += motionX;
+        posY += motionY;
+        posZ += motionZ;
+        float f = MathHelper.sqrt_double(motionX * motionX + motionZ * motionZ);
+        rotationYaw = (float) ((Math.atan2(motionX, motionZ) * 180D) / 3.1415927410125732D);
+        for (rotationPitch = (float) ((Math.atan2(motionY, f) * 180D) / 3.1415927410125732D); rotationPitch - prevRotationPitch < -180F; prevRotationPitch -= 360F) {
+        }
+        for (; rotationPitch - prevRotationPitch >= 180F; prevRotationPitch += 360F) {
+        }
+        for (; rotationYaw - prevRotationYaw < -180F; prevRotationYaw -= 360F) {
+        }
+        for (; rotationYaw - prevRotationYaw >= 180F; prevRotationYaw += 360F) {
+        }
+        rotationPitch = prevRotationPitch + (rotationPitch - prevRotationPitch) * 0.2F;
+        rotationYaw = prevRotationYaw + (rotationYaw - prevRotationYaw) * 0.2F;
+        float f1 = 0.99F;
+        float f2 = 0.03F;
+        if (handleWaterMovement()) {
+            for (int k = 0; k < 4; k++) {
+                float f3 = 0.25F;
+                worldObj.spawnParticle("bubble", posX - motionX * (double) f3, posY - motionY * (double) f3, posZ - motionZ * (double) f3, motionX, motionY, motionZ);
+            }
+
+            f1 = 0.8F;
+        }
+        motionX *= f1;
+        motionY *= f1;
+        motionZ *= f1;
+        motionY -= f2;
+        setPosition(posX, posY, posZ);
+    }
+
+    public void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+        nbttagcompound.setShort("xTile", (short) field_816_b);
+        nbttagcompound.setShort("yTile", (short) field_815_c);
+        nbttagcompound.setShort("zTile", (short) field_814_d);
+        nbttagcompound.setByte("inTile", (byte) field_813_e);
+        nbttagcompound.setByte("shake", (byte) field_817_a);
+        nbttagcompound.setByte("inGround", (byte) (field_812_f ? 1 : 0));
+    }
+
+    public void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+        field_816_b = nbttagcompound.getShort("xTile");
+        field_815_c = nbttagcompound.getShort("yTile");
+        field_814_d = nbttagcompound.getShort("zTile");
+        field_813_e = nbttagcompound.getByte("inTile") & 0xff;
+        field_817_a = nbttagcompound.getByte("shake") & 0xff;
+        field_812_f = nbttagcompound.getByte("inGround") == 1;
+    }
+
+    public void onCollideWithPlayer(EntityPlayer entityplayer) {
+        if (field_812_f && field_811_g == entityplayer && field_817_a <= 0 && entityplayer.inventory.addItemStackToInventory(new ItemStack(Item.arrow.shiftedIndex, 1))) {
+            worldObj.playSoundAtEntity(this, "random.pop", 0.2F, ((rand.nextFloat() - rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
+            entityplayer.onItemPickup(this, 1);
+            setEntityDead();
+        }
     }
 
     public float func_392_h_() {
