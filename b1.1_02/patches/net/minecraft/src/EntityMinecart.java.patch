--- net/minecraft/src/EntityMinecart.java
+++ net/minecraft/src/EntityMinecart.java
@@ -2,17 +2,81 @@
 
 import java.util.List;
 
-public class EntityMinecart extends Entity implements IInventory {
-    private ItemStack[] cargoItems;
-    public int a;
-    public int b;
-    public int c;
-    private boolean field_856_i;
-    public int d;
+public class EntityMinecart extends Entity
+        implements IInventory {
+
+    private static final int field_855_j[][][] = {
+            {
+                    {
+                            0, 0, -1
+                    }, {
+                    0, 0, 1
+            }
+            }, {
+            {
+                    -1, 0, 0
+            }, {
+            1, 0, 0
+    }
+    }, {
+            {
+                    -1, -1, 0
+            }, {
+            1, 0, 0
+    }
+    }, {
+            {
+                    -1, 0, 0
+            }, {
+            1, -1, 0
+    }
+    }, {
+            {
+                    0, 0, -1
+            }, {
+            0, -1, 1
+    }
+    }, {
+            {
+                    0, -1, -1
+            }, {
+            0, 0, 1
+    }
+    }, {
+            {
+                    0, 0, 1
+            }, {
+            1, 0, 0
+    }
+    }, {
+            {
+                    0, 0, 1
+            }, {
+            -1, 0, 0
+    }
+    }, {
+            {
+                    0, 0, -1
+            }, {
+            -1, 0, 0
+    }
+    }, {
+            {
+                    0, 0, -1
+            }, {
+            1, 0, 0
+    }
+    }
+    };
+    public int field_864_a;
+    public int nextStepDistance;
+    public int field_862_c;
+    public int minecartType;
     public int fuel;
     public double pushX;
     public double pushZ;
-    private static final int[][][] field_855_j = new int[][][]{{{0, 0, -1}, {0, 0, 1}}, {{-1, 0, 0}, {1, 0, 0}}, {{-1, -1, 0}, {1, 0, 0}}, {{-1, 0, 0}, {1, -1, 0}}, {{0, 0, -1}, {0, -1, 1}}, {{0, -1, -1}, {0, 0, 1}}, {{0, 0, 1}, {1, 0, 0}}, {{0, 0, 1}, {-1, 0, 0}}, {{0, 0, -1}, {-1, 0, 0}}, {{0, 0, -1}, {1, 0, 0}}};
+    private ItemStack cargoItems[];
+    private boolean field_856_i;
     private int field_9415_k;
     private double field_9414_l;
     private double field_9413_m;
@@ -23,21 +87,34 @@
     private double field_9408_r;
     private double field_9407_s;
 
-    public EntityMinecart(World var1) {
-        super(var1);
-        this.cargoItems = new ItemStack[36];
-        this.a = 0;
-        this.b = 0;
-        this.c = 1;
-        this.field_856_i = false;
-        this.preventEntitySpawning = true;
-        this.setSize(0.98F, 0.7F);
-        this.yOffset = this.height / 2.0F;
-        this.entityWalks = false;
-    }
-
-    public AxisAlignedBB func_383_b_(Entity var1) {
-        return var1.boundingBox;
+    public EntityMinecart(World world) {
+        super(world);
+        cargoItems = new ItemStack[36];
+        field_864_a = 0;
+        nextStepDistance = 0;
+        field_862_c = 1;
+        field_856_i = false;
+        preventEntitySpawning = true;
+        setSize(0.98F, 0.7F);
+        yOffset = height / 2.0F;
+        entityWalks = false;
+    }
+
+    public EntityMinecart(World world, double d, double d1, double d2,
+                          int i) {
+        this(world);
+        setPosition(d, d1 + (double) yOffset, d2);
+        motionX = 0.0D;
+        motionY = 0.0D;
+        motionZ = 0.0D;
+        prevPosX = d;
+        prevPosY = d1;
+        prevPosZ = d2;
+        minecartType = i;
+    }
+
+    public AxisAlignedBB func_383_b_(Entity entity) {
+        return entity.boundingBox;
     }
 
     public AxisAlignedBB func_372_f_() {
@@ -48,566 +125,499 @@
         return true;
     }
 
-    public EntityMinecart(World var1, double var2, double var4, double var6, int var8) {
-        this(var1);
-        this.setPosition(var2, var4 + (double)this.yOffset, var6);
-        this.motionX = 0.0D;
-        this.motionY = 0.0D;
-        this.motionZ = 0.0D;
-        this.prevPosX = var2;
-        this.prevPosY = var4;
-        this.prevPosZ = var6;
-        this.d = var8;
-    }
-
     public double getMountedYOffset() {
-        return (double)this.height * 0.0D - (double)0.3F;
+        return (double) height * 0.0D - 0.30000001192092896D;
     }
 
-    public boolean attackEntityFrom(Entity var1, int var2) {
-        if(!this.worldObj.multiplayerWorld && !this.isDead) {
-            this.c = -this.c;
-            this.b = 10;
-            this.setBeenAttacked();
-            this.a += var2 * 10;
-            if(this.a > 40) {
-                this.dropItemWithOffset(Item.minecartEmpty.shiftedIndex, 1, 0.0F);
-                if(this.d == 1) {
-                    this.dropItemWithOffset(Block.crate.blockID, 1, 0.0F);
-                } else if(this.d == 2) {
-                    this.dropItemWithOffset(Block.stoneOvenIdle.blockID, 1, 0.0F);
-                }
-
-                this.setEntityDead();
+    public boolean attackEntityFrom(Entity entity, int i) {
+        if (worldObj.multiplayerWorld || isDead) {
+            return true;
+        }
+        field_862_c = -field_862_c;
+        nextStepDistance = 10;
+        setBeenAttacked();
+        field_864_a += i * 10;
+        if (field_864_a > 40) {
+            dropItemWithOffset(Item.minecartEmpty.shiftedIndex, 1, 0.0F);
+            if (minecartType == 1) {
+                dropItemWithOffset(Block.crate.blockID, 1, 0.0F);
+            } else if (minecartType == 2) {
+                dropItemWithOffset(Block.stoneOvenIdle.blockID, 1, 0.0F);
             }
-
-            return true;
-        } else {
-            return true;
+            setEntityDead();
         }
+        return true;
     }
 
     public void performHurtAnimation() {
         System.out.println("Animating hurt");
-        this.c = -this.c;
-        this.b = 10;
-        this.a += this.a * 10;
+        field_862_c = -field_862_c;
+        nextStepDistance = 10;
+        field_864_a += field_864_a * 10;
     }
 
     public boolean canBeCollidedWith() {
-        return !this.isDead;
+        return !isDead;
     }
 
     public void setEntityDead() {
-        for(int var1 = 0; var1 < this.getSizeInventory(); ++var1) {
-            ItemStack var2 = this.getStackInSlot(var1);
-            if(var2 != null) {
-                float var3 = this.rand.nextFloat() * 0.8F + 0.1F;
-                float var4 = this.rand.nextFloat() * 0.8F + 0.1F;
-                float var5 = this.rand.nextFloat() * 0.8F + 0.1F;
-
-                while(var2.stackSize > 0) {
-                    int var6 = this.rand.nextInt(21) + 10;
-                    if(var6 > var2.stackSize) {
-                        var6 = var2.stackSize;
-                    }
-
-                    var2.stackSize -= var6;
-                    EntityItem var7 = new EntityItem(this.worldObj, this.posX + (double)var3, this.posY + (double)var4, this.posZ + (double)var5, new ItemStack(var2.itemID, var6, var2.itemDamage));
-                    float var8 = 0.05F;
-                    var7.motionX = (double)((float)this.rand.nextGaussian() * var8);
-                    var7.motionY = (double)((float)this.rand.nextGaussian() * var8 + 0.2F);
-                    var7.motionZ = (double)((float)this.rand.nextGaussian() * var8);
-                    this.worldObj.entityJoinedWorld(var7);
-                }
+        label0:
+        for (int i = 0; i < getSizeInventory(); i++) {
+            ItemStack itemstack = getStackInSlot(i);
+            if (itemstack == null) {
+                continue;
             }
+            float f = rand.nextFloat() * 0.8F + 0.1F;
+            float f1 = rand.nextFloat() * 0.8F + 0.1F;
+            float f2 = rand.nextFloat() * 0.8F + 0.1F;
+            do {
+                if (itemstack.stackSize <= 0) {
+                    continue label0;
+                }
+                int j = rand.nextInt(21) + 10;
+                if (j > itemstack.stackSize) {
+                    j = itemstack.stackSize;
+                }
+                itemstack.stackSize -= j;
+                EntityItem entityitem = new EntityItem(worldObj, posX + (double) f, posY + (double) f1, posZ + (double) f2, new ItemStack(itemstack.itemID, j, itemstack.itemDamage));
+                float f3 = 0.05F;
+                entityitem.motionX = (float) rand.nextGaussian() * f3;
+                entityitem.motionY = (float) rand.nextGaussian() * f3 + 0.2F;
+                entityitem.motionZ = (float) rand.nextGaussian() * f3;
+                worldObj.entityJoinedWorld(entityitem);
+            } while (true);
         }
 
         super.setEntityDead();
     }
 
     public void onUpdate() {
-        if(this.b > 0) {
-            --this.b;
-        }
-
-        if(this.a > 0) {
-            --this.a;
-        }
-
-        double var7;
-        if(this.worldObj.multiplayerWorld && this.field_9415_k > 0) {
-            if(this.field_9415_k > 0) {
-                double var41 = this.posX + (this.field_9414_l - this.posX) / (double)this.field_9415_k;
-                double var42 = this.posY + (this.field_9413_m - this.posY) / (double)this.field_9415_k;
-                double var5 = this.posZ + (this.field_9412_n - this.posZ) / (double)this.field_9415_k;
-
-                for(var7 = this.field_9411_o - (double)this.rotationYaw; var7 < -180.0D; var7 += 360.0D) {
-                }
-
-                while(var7 >= 180.0D) {
-                    var7 -= 360.0D;
-                }
-
-                this.rotationYaw = (float)((double)this.rotationYaw + var7 / (double)this.field_9415_k);
-                this.rotationPitch = (float)((double)this.rotationPitch + (this.field_9410_p - (double)this.rotationPitch) / (double)this.field_9415_k);
-                --this.field_9415_k;
-                this.setPosition(var41, var42, var5);
-                this.setRotation(this.rotationYaw, this.rotationPitch);
-            } else {
-                this.setPosition(this.posX, this.posY, this.posZ);
-                this.setRotation(this.rotationYaw, this.rotationPitch);
-            }
-
-        } else {
-            this.prevPosX = this.posX;
-            this.prevPosY = this.posY;
-            this.prevPosZ = this.posZ;
-            this.motionY -= (double)0.04F;
-            int var1 = MathHelper.floor_double(this.posX);
-            int var2 = MathHelper.floor_double(this.posY);
-            int var3 = MathHelper.floor_double(this.posZ);
-            if(this.worldObj.getBlockId(var1, var2 - 1, var3) == Block.minecartTrack.blockID) {
-                --var2;
-            }
-
-            double var4 = 0.4D;
-            boolean var6 = false;
-            var7 = 1.0D / 128.0D;
-            if(this.worldObj.getBlockId(var1, var2, var3) == Block.minecartTrack.blockID) {
-                Vec3D var9 = this.func_514_g(this.posX, this.posY, this.posZ);
-                int var10 = this.worldObj.getBlockMetadata(var1, var2, var3);
-                this.posY = (double)var2;
-                if(var10 >= 2 && var10 <= 5) {
-                    this.posY = (double)(var2 + 1);
-                }
-
-                if(var10 == 2) {
-                    this.motionX -= var7;
-                }
-
-                if(var10 == 3) {
-                    this.motionX += var7;
-                }
-
-                if(var10 == 4) {
-                    this.motionZ += var7;
-                }
-
-                if(var10 == 5) {
-                    this.motionZ -= var7;
-                }
-
-                int[][] var11 = field_855_j[var10];
-                double var12 = (double)(var11[1][0] - var11[0][0]);
-                double var14 = (double)(var11[1][2] - var11[0][2]);
-                double var16 = Math.sqrt(var12 * var12 + var14 * var14);
-                double var18 = this.motionX * var12 + this.motionZ * var14;
-                if(var18 < 0.0D) {
-                    var12 = -var12;
-                    var14 = -var14;
-                }
-
-                double var20 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
-                this.motionX = var20 * var12 / var16;
-                this.motionZ = var20 * var14 / var16;
-                double var22 = 0.0D;
-                double var24 = (double)var1 + 0.5D + (double)var11[0][0] * 0.5D;
-                double var26 = (double)var3 + 0.5D + (double)var11[0][2] * 0.5D;
-                double var28 = (double)var1 + 0.5D + (double)var11[1][0] * 0.5D;
-                double var30 = (double)var3 + 0.5D + (double)var11[1][2] * 0.5D;
-                var12 = var28 - var24;
-                var14 = var30 - var26;
-                double var32;
-                double var34;
-                double var36;
-                if(var12 == 0.0D) {
-                    this.posX = (double)var1 + 0.5D;
-                    var22 = this.posZ - (double)var3;
-                } else if(var14 == 0.0D) {
-                    this.posZ = (double)var3 + 0.5D;
-                    var22 = this.posX - (double)var1;
-                } else {
-                    var32 = this.posX - var24;
-                    var34 = this.posZ - var26;
-                    var36 = (var32 * var12 + var34 * var14) * 2.0D;
-                    var22 = var36;
-                }
-
-                this.posX = var24 + var12 * var22;
-                this.posZ = var26 + var14 * var22;
-                this.setPosition(this.posX, this.posY + (double)this.yOffset, this.posZ);
-                var32 = this.motionX;
-                var34 = this.motionZ;
-                if(this.riddenByEntity != null) {
-                    var32 *= 0.75D;
-                    var34 *= 0.75D;
-                }
-
-                if(var32 < -var4) {
-                    var32 = -var4;
-                }
-
-                if(var32 > var4) {
-                    var32 = var4;
-                }
-
-                if(var34 < -var4) {
-                    var34 = -var4;
-                }
-
-                if(var34 > var4) {
-                    var34 = var4;
-                }
-
-                this.moveEntity(var32, 0.0D, var34);
-                if(var11[0][1] != 0 && MathHelper.floor_double(this.posX) - var1 == var11[0][0] && MathHelper.floor_double(this.posZ) - var3 == var11[0][2]) {
-                    this.setPosition(this.posX, this.posY + (double)var11[0][1], this.posZ);
-                } else if(var11[1][1] != 0 && MathHelper.floor_double(this.posX) - var1 == var11[1][0] && MathHelper.floor_double(this.posZ) - var3 == var11[1][2]) {
-                    this.setPosition(this.posX, this.posY + (double)var11[1][1], this.posZ);
-                }
-
-                if(this.riddenByEntity != null) {
-                    this.motionX *= (double)0.997F;
-                    this.motionY *= 0.0D;
-                    this.motionZ *= (double)0.997F;
-                } else {
-                    if(this.d == 2) {
-                        var36 = (double)MathHelper.sqrt_double(this.pushX * this.pushX + this.pushZ * this.pushZ);
-                        if(var36 > 0.01D) {
-                            var6 = true;
-                            this.pushX /= var36;
-                            this.pushZ /= var36;
-                            double var38 = 0.04D;
-                            this.motionX *= (double)0.8F;
-                            this.motionY *= 0.0D;
-                            this.motionZ *= (double)0.8F;
-                            this.motionX += this.pushX * var38;
-                            this.motionZ += this.pushZ * var38;
-                        } else {
-                            this.motionX *= (double)0.9F;
-                            this.motionY *= 0.0D;
-                            this.motionZ *= (double)0.9F;
-                        }
-                    }
-
-                    this.motionX *= (double)0.96F;
-                    this.motionY *= 0.0D;
-                    this.motionZ *= (double)0.96F;
-                }
-
-                Vec3D var46 = this.func_514_g(this.posX, this.posY, this.posZ);
-                if(var46 != null && var9 != null) {
-                    double var37 = (var9.yCoord - var46.yCoord) * 0.05D;
-                    var20 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
-                    if(var20 > 0.0D) {
-                        this.motionX = this.motionX / var20 * (var20 + var37);
-                        this.motionZ = this.motionZ / var20 * (var20 + var37);
-                    }
-
-                    this.setPosition(this.posX, var46.yCoord, this.posZ);
-                }
-
-                int var47 = MathHelper.floor_double(this.posX);
-                int var48 = MathHelper.floor_double(this.posZ);
-                if(var47 != var1 || var48 != var3) {
-                    var20 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
-                    this.motionX = var20 * (double)(var47 - var1);
-                    this.motionZ = var20 * (double)(var48 - var3);
-                }
-
-                if(this.d == 2) {
-                    double var39 = (double)MathHelper.sqrt_double(this.pushX * this.pushX + this.pushZ * this.pushZ);
-                    if(var39 > 0.01D && this.motionX * this.motionX + this.motionZ * this.motionZ > 0.001D) {
-                        this.pushX /= var39;
-                        this.pushZ /= var39;
-                        if(this.pushX * this.motionX + this.pushZ * this.motionZ < 0.0D) {
-                            this.pushX = 0.0D;
-                            this.pushZ = 0.0D;
-                        } else {
-                            this.pushX = this.motionX;
-                            this.pushZ = this.motionZ;
-                        }
-                    }
-                }
-            } else {
-                if(this.motionX < -var4) {
-                    this.motionX = -var4;
-                }
-
-                if(this.motionX > var4) {
-                    this.motionX = var4;
-                }
-
-                if(this.motionZ < -var4) {
-                    this.motionZ = -var4;
-                }
-
-                if(this.motionZ > var4) {
-                    this.motionZ = var4;
-                }
-
-                if(this.onGround) {
-                    this.motionX *= 0.5D;
-                    this.motionY *= 0.5D;
-                    this.motionZ *= 0.5D;
-                }
-
-                this.moveEntity(this.motionX, this.motionY, this.motionZ);
-                if(!this.onGround) {
-                    this.motionX *= (double)0.95F;
-                    this.motionY *= (double)0.95F;
-                    this.motionZ *= (double)0.95F;
-                }
-            }
-
-            this.rotationPitch = 0.0F;
-            double var43 = this.prevPosX - this.posX;
-            double var44 = this.prevPosZ - this.posZ;
-            if(var43 * var43 + var44 * var44 > 0.001D) {
-                this.rotationYaw = (float)(Math.atan2(var44, var43) * 180.0D / Math.PI);
-                if(this.field_856_i) {
-                    this.rotationYaw += 180.0F;
-                }
-            }
-
-            double var13;
-            for(var13 = (double)(this.rotationYaw - this.prevRotationYaw); var13 >= 180.0D; var13 -= 360.0D) {
-            }
-
-            while(var13 < -180.0D) {
-                var13 += 360.0D;
-            }
-
-            if(var13 < -170.0D || var13 >= 170.0D) {
-                this.rotationYaw += 180.0F;
-                this.field_856_i = !this.field_856_i;
-            }
-
-            this.setRotation(this.rotationYaw, this.rotationPitch);
-            List var15 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand((double)0.2F, 0.0D, (double)0.2F));
-            if(var15 != null && var15.size() > 0) {
-                for(int var45 = 0; var45 < var15.size(); ++var45) {
-                    Entity var17 = (Entity)var15.get(var45);
-                    if(var17 != this.riddenByEntity && var17.canBePushed() && var17 instanceof EntityMinecart) {
-                        var17.applyEntityCollision(this);
-                    }
-                }
-            }
-
-            if(this.riddenByEntity != null && this.riddenByEntity.isDead) {
-                this.riddenByEntity = null;
-            }
-
-            if(var6 && this.rand.nextInt(4) == 0) {
-                --this.fuel;
-                if(this.fuel < 0) {
-                    this.pushX = this.pushZ = 0.0D;
-                }
-
-                this.worldObj.spawnParticle("largesmoke", this.posX, this.posY + 0.8D, this.posZ, 0.0D, 0.0D, 0.0D);
-            }
-
-        }
-    }
-
-    public Vec3D func_515_a(double var1, double var3, double var5, double var7) {
-        int var9 = MathHelper.floor_double(var1);
-        int var10 = MathHelper.floor_double(var3);
-        int var11 = MathHelper.floor_double(var5);
-        if(this.worldObj.getBlockId(var9, var10 - 1, var11) == Block.minecartTrack.blockID) {
-            --var10;
-        }
-
-        if(this.worldObj.getBlockId(var9, var10, var11) == Block.minecartTrack.blockID) {
-            int var12 = this.worldObj.getBlockMetadata(var9, var10, var11);
-            var3 = (double)var10;
-            if(var12 >= 2 && var12 <= 5) {
-                var3 = (double)(var10 + 1);
-            }
-
-            int[][] var13 = field_855_j[var12];
-            double var14 = (double)(var13[1][0] - var13[0][0]);
-            double var16 = (double)(var13[1][2] - var13[0][2]);
-            double var18 = Math.sqrt(var14 * var14 + var16 * var16);
-            var14 /= var18;
-            var16 /= var18;
-            var1 += var14 * var7;
-            var5 += var16 * var7;
-            if(var13[0][1] != 0 && MathHelper.floor_double(var1) - var9 == var13[0][0] && MathHelper.floor_double(var5) - var11 == var13[0][2]) {
-                var3 += (double)var13[0][1];
-            } else if(var13[1][1] != 0 && MathHelper.floor_double(var1) - var9 == var13[1][0] && MathHelper.floor_double(var5) - var11 == var13[1][2]) {
-                var3 += (double)var13[1][1];
-            }
-
-            return this.func_514_g(var1, var3, var5);
-        } else {
-            return null;
-        }
-    }
-
-    public Vec3D func_514_g(double var1, double var3, double var5) {
-        int var7 = MathHelper.floor_double(var1);
-        int var8 = MathHelper.floor_double(var3);
-        int var9 = MathHelper.floor_double(var5);
-        if(this.worldObj.getBlockId(var7, var8 - 1, var9) == Block.minecartTrack.blockID) {
-            --var8;
-        }
-
-        if(this.worldObj.getBlockId(var7, var8, var9) == Block.minecartTrack.blockID) {
-            int var10 = this.worldObj.getBlockMetadata(var7, var8, var9);
-            var3 = (double)var8;
-            if(var10 >= 2 && var10 <= 5) {
-                var3 = (double)(var8 + 1);
-            }
-
-            int[][] var11 = field_855_j[var10];
-            double var12 = 0.0D;
-            double var14 = (double)var7 + 0.5D + (double)var11[0][0] * 0.5D;
-            double var16 = (double)var8 + 0.5D + (double)var11[0][1] * 0.5D;
-            double var18 = (double)var9 + 0.5D + (double)var11[0][2] * 0.5D;
-            double var20 = (double)var7 + 0.5D + (double)var11[1][0] * 0.5D;
-            double var22 = (double)var8 + 0.5D + (double)var11[1][1] * 0.5D;
-            double var24 = (double)var9 + 0.5D + (double)var11[1][2] * 0.5D;
-            double var26 = var20 - var14;
-            double var28 = (var22 - var16) * 2.0D;
-            double var30 = var24 - var18;
-            if(var26 == 0.0D) {
-                var1 = (double)var7 + 0.5D;
-                var12 = var5 - (double)var9;
-            } else if(var30 == 0.0D) {
-                var5 = (double)var9 + 0.5D;
-                var12 = var1 - (double)var7;
-            } else {
-                double var32 = var1 - var14;
-                double var34 = var5 - var18;
-                double var36 = (var32 * var26 + var34 * var30) * 2.0D;
-                var12 = var36;
-            }
-
-            var1 = var14 + var26 * var12;
-            var3 = var16 + var28 * var12;
-            var5 = var18 + var30 * var12;
-            if(var28 < 0.0D) {
-                ++var3;
-            }
-
-            if(var28 > 0.0D) {
-                var3 += 0.5D;
-            }
-
-            return Vec3D.createVector(var1, var3, var5);
-        } else {
-            return null;
-        }
-    }
-
-    protected void writeEntityToNBT(NBTTagCompound var1) {
-        var1.setInteger("Type", this.d);
-        if(this.d == 2) {
-            var1.setDouble("PushX", this.pushX);
-            var1.setDouble("PushZ", this.pushZ);
-            var1.setShort("Fuel", (short)this.fuel);
-        } else if(this.d == 1) {
-            NBTTagList var2 = new NBTTagList();
-
-            for(int var3 = 0; var3 < this.cargoItems.length; ++var3) {
-                if(this.cargoItems[var3] != null) {
-                    NBTTagCompound var4 = new NBTTagCompound();
-                    var4.setByte("Slot", (byte)var3);
-                    this.cargoItems[var3].writeToNBT(var4);
-                    var2.setTag(var4);
-                }
-            }
-
-            var1.setTag("Items", var2);
-        }
-
-    }
-
-    protected void readEntityFromNBT(NBTTagCompound var1) {
-        this.d = var1.getInteger("Type");
-        if(this.d == 2) {
-            this.pushX = var1.getDouble("PushX");
-            this.pushZ = var1.getDouble("PushZ");
-            this.fuel = var1.getShort("Fuel");
-        } else if(this.d == 1) {
-            NBTTagList var2 = var1.getTagList("Items");
-            this.cargoItems = new ItemStack[this.getSizeInventory()];
-
-            for(int var3 = 0; var3 < var2.tagCount(); ++var3) {
-                NBTTagCompound var4 = (NBTTagCompound)var2.tagAt(var3);
-                int var5 = var4.getByte("Slot") & 255;
-                if(var5 >= 0 && var5 < this.cargoItems.length) {
-                    this.cargoItems[var5] = new ItemStack(var4);
-                }
-            }
-        }
-
+        if (nextStepDistance > 0) {
+            nextStepDistance--;
+        }
+        if (field_864_a > 0) {
+            field_864_a--;
+        }
+        if (worldObj.multiplayerWorld && field_9415_k > 0) {
+            if (field_9415_k > 0) {
+                double d = posX + (field_9414_l - posX) / (double) field_9415_k;
+                double d1 = posY + (field_9413_m - posY) / (double) field_9415_k;
+                double d3 = posZ + (field_9412_n - posZ) / (double) field_9415_k;
+                double d4;
+                for (d4 = field_9411_o - (double) rotationYaw; d4 < -180D; d4 += 360D) {
+                }
+                for (; d4 >= 180D; d4 -= 360D) {
+                }
+                rotationYaw += d4 / (double) field_9415_k;
+                rotationPitch += (field_9410_p - (double) rotationPitch) / (double) field_9415_k;
+                field_9415_k--;
+                setPosition(d, d1, d3);
+                setRotation(rotationYaw, rotationPitch);
+            } else {
+                setPosition(posX, posY, posZ);
+                setRotation(rotationYaw, rotationPitch);
+            }
+            return;
+        }
+        prevPosX = posX;
+        prevPosY = posY;
+        prevPosZ = posZ;
+        motionY -= 0.039999999105930328D;
+        int i = MathHelper.floor_double(posX);
+        int j = MathHelper.floor_double(posY);
+        int k = MathHelper.floor_double(posZ);
+        if (worldObj.getBlockId(i, j - 1, k) == Block.minecartTrack.blockID) {
+            j--;
+        }
+        double d2 = 0.40000000000000002D;
+        boolean flag = false;
+        double d5 = 0.0078125D;
+        if (worldObj.getBlockId(i, j, k) == Block.minecartTrack.blockID) {
+            Vec3D vec3d = func_514_g(posX, posY, posZ);
+            int l = worldObj.getBlockMetadata(i, j, k);
+            posY = j;
+            if (l >= 2 && l <= 5) {
+                posY = j + 1;
+            }
+            if (l == 2) {
+                motionX -= d5;
+            }
+            if (l == 3) {
+                motionX += d5;
+            }
+            if (l == 4) {
+                motionZ += d5;
+            }
+            if (l == 5) {
+                motionZ -= d5;
+            }
+            int ai[][] = field_855_j[l];
+            double d8 = ai[1][0] - ai[0][0];
+            double d10 = ai[1][2] - ai[0][2];
+            double d11 = Math.sqrt(d8 * d8 + d10 * d10);
+            double d12 = motionX * d8 + motionZ * d10;
+            if (d12 < 0.0D) {
+                d8 = -d8;
+                d10 = -d10;
+            }
+            double d13 = Math.sqrt(motionX * motionX + motionZ * motionZ);
+            motionX = (d13 * d8) / d11;
+            motionZ = (d13 * d10) / d11;
+            double d16 = 0.0D;
+            double d17 = (double) i + 0.5D + (double) ai[0][0] * 0.5D;
+            double d18 = (double) k + 0.5D + (double) ai[0][2] * 0.5D;
+            double d19 = (double) i + 0.5D + (double) ai[1][0] * 0.5D;
+            double d20 = (double) k + 0.5D + (double) ai[1][2] * 0.5D;
+            d8 = d19 - d17;
+            d10 = d20 - d18;
+            if (d8 == 0.0D) {
+                posX = (double) i + 0.5D;
+                d16 = posZ - (double) k;
+            } else if (d10 == 0.0D) {
+                posZ = (double) k + 0.5D;
+                d16 = posX - (double) i;
+            } else {
+                double d21 = posX - d17;
+                double d23 = posZ - d18;
+                double d25 = (d21 * d8 + d23 * d10) * 2D;
+                d16 = d25;
+            }
+            posX = d17 + d8 * d16;
+            posZ = d18 + d10 * d16;
+            setPosition(posX, posY + (double) yOffset, posZ);
+            double d22 = motionX;
+            double d24 = motionZ;
+            if (riddenByEntity != null) {
+                d22 *= 0.75D;
+                d24 *= 0.75D;
+            }
+            if (d22 < -d2) {
+                d22 = -d2;
+            }
+            if (d22 > d2) {
+                d22 = d2;
+            }
+            if (d24 < -d2) {
+                d24 = -d2;
+            }
+            if (d24 > d2) {
+                d24 = d2;
+            }
+            moveEntity(d22, 0.0D, d24);
+            if (ai[0][1] != 0 && MathHelper.floor_double(posX) - i == ai[0][0] && MathHelper.floor_double(posZ) - k == ai[0][2]) {
+                setPosition(posX, posY + (double) ai[0][1], posZ);
+            } else if (ai[1][1] != 0 && MathHelper.floor_double(posX) - i == ai[1][0] && MathHelper.floor_double(posZ) - k == ai[1][2]) {
+                setPosition(posX, posY + (double) ai[1][1], posZ);
+            }
+            if (riddenByEntity != null) {
+                motionX *= 0.99699997901916504D;
+                motionY *= 0.0D;
+                motionZ *= 0.99699997901916504D;
+            } else {
+                if (minecartType == 2) {
+                    double d26 = MathHelper.sqrt_double(pushX * pushX + pushZ * pushZ);
+                    if (d26 > 0.01D) {
+                        flag = true;
+                        pushX /= d26;
+                        pushZ /= d26;
+                        double d28 = 0.040000000000000001D;
+                        motionX *= 0.80000001192092896D;
+                        motionY *= 0.0D;
+                        motionZ *= 0.80000001192092896D;
+                        motionX += pushX * d28;
+                        motionZ += pushZ * d28;
+                    } else {
+                        motionX *= 0.89999997615814209D;
+                        motionY *= 0.0D;
+                        motionZ *= 0.89999997615814209D;
+                    }
+                }
+                motionX *= 0.95999997854232788D;
+                motionY *= 0.0D;
+                motionZ *= 0.95999997854232788D;
+            }
+            Vec3D vec3d1 = func_514_g(posX, posY, posZ);
+            if (vec3d1 != null && vec3d != null) {
+                double d27 = (vec3d.yCoord - vec3d1.yCoord) * 0.050000000000000003D;
+                double d14 = Math.sqrt(motionX * motionX + motionZ * motionZ);
+                if (d14 > 0.0D) {
+                    motionX = (motionX / d14) * (d14 + d27);
+                    motionZ = (motionZ / d14) * (d14 + d27);
+                }
+                setPosition(posX, vec3d1.yCoord, posZ);
+            }
+            int j1 = MathHelper.floor_double(posX);
+            int k1 = MathHelper.floor_double(posZ);
+            if (j1 != i || k1 != k) {
+                double d15 = Math.sqrt(motionX * motionX + motionZ * motionZ);
+                motionX = d15 * (double) (j1 - i);
+                motionZ = d15 * (double) (k1 - k);
+            }
+            if (minecartType == 2) {
+                double d29 = MathHelper.sqrt_double(pushX * pushX + pushZ * pushZ);
+                if (d29 > 0.01D && motionX * motionX + motionZ * motionZ > 0.001D) {
+                    pushX /= d29;
+                    pushZ /= d29;
+                    if (pushX * motionX + pushZ * motionZ < 0.0D) {
+                        pushX = 0.0D;
+                        pushZ = 0.0D;
+                    } else {
+                        pushX = motionX;
+                        pushZ = motionZ;
+                    }
+                }
+            }
+        } else {
+            if (motionX < -d2) {
+                motionX = -d2;
+            }
+            if (motionX > d2) {
+                motionX = d2;
+            }
+            if (motionZ < -d2) {
+                motionZ = -d2;
+            }
+            if (motionZ > d2) {
+                motionZ = d2;
+            }
+            if (onGround) {
+                motionX *= 0.5D;
+                motionY *= 0.5D;
+                motionZ *= 0.5D;
+            }
+            moveEntity(motionX, motionY, motionZ);
+            if (!onGround) {
+                motionX *= 0.94999998807907104D;
+                motionY *= 0.94999998807907104D;
+                motionZ *= 0.94999998807907104D;
+            }
+        }
+        rotationPitch = 0.0F;
+        double d6 = prevPosX - posX;
+        double d7 = prevPosZ - posZ;
+        if (d6 * d6 + d7 * d7 > 0.001D) {
+            rotationYaw = (float) ((Math.atan2(d7, d6) * 180D) / 3.1415926535897931D);
+            if (field_856_i) {
+                rotationYaw += 180F;
+            }
+        }
+        double d9;
+        for (d9 = rotationYaw - prevRotationYaw; d9 >= 180D; d9 -= 360D) {
+        }
+        for (; d9 < -180D; d9 += 360D) {
+        }
+        if (d9 < -170D || d9 >= 170D) {
+            rotationYaw += 180F;
+            field_856_i = !field_856_i;
+        }
+        setRotation(rotationYaw, rotationPitch);
+        List list = worldObj.getEntitiesWithinAABBExcludingEntity(this, boundingBox.expand(0.20000000298023224D, 0.0D, 0.20000000298023224D));
+        if (list != null && list.size() > 0) {
+            for (int i1 = 0; i1 < list.size(); i1++) {
+                Entity entity = (Entity) list.get(i1);
+                if (entity != riddenByEntity && entity.canBePushed() && (entity instanceof EntityMinecart)) {
+                    entity.applyEntityCollision(this);
+                }
+            }
+
+        }
+        if (riddenByEntity != null && riddenByEntity.isDead) {
+            riddenByEntity = null;
+        }
+        if (flag && rand.nextInt(4) == 0) {
+            fuel--;
+            if (fuel < 0) {
+                pushX = pushZ = 0.0D;
+            }
+            worldObj.spawnParticle("largesmoke", posX, posY + 0.80000000000000004D, posZ, 0.0D, 0.0D, 0.0D);
+        }
+    }
+
+    public Vec3D func_515_a(double d, double d1, double d2, double d3) {
+        int i = MathHelper.floor_double(d);
+        int j = MathHelper.floor_double(d1);
+        int k = MathHelper.floor_double(d2);
+        if (worldObj.getBlockId(i, j - 1, k) == Block.minecartTrack.blockID) {
+            j--;
+        }
+        if (worldObj.getBlockId(i, j, k) == Block.minecartTrack.blockID) {
+            int l = worldObj.getBlockMetadata(i, j, k);
+            d1 = j;
+            if (l >= 2 && l <= 5) {
+                d1 = j + 1;
+            }
+            int ai[][] = field_855_j[l];
+            double d4 = ai[1][0] - ai[0][0];
+            double d5 = ai[1][2] - ai[0][2];
+            double d6 = Math.sqrt(d4 * d4 + d5 * d5);
+            d4 /= d6;
+            d5 /= d6;
+            d += d4 * d3;
+            d2 += d5 * d3;
+            if (ai[0][1] != 0 && MathHelper.floor_double(d) - i == ai[0][0] && MathHelper.floor_double(d2) - k == ai[0][2]) {
+                d1 += ai[0][1];
+            } else if (ai[1][1] != 0 && MathHelper.floor_double(d) - i == ai[1][0] && MathHelper.floor_double(d2) - k == ai[1][2]) {
+                d1 += ai[1][1];
+            }
+            return func_514_g(d, d1, d2);
+        } else {
+            return null;
+        }
+    }
+
+    public Vec3D func_514_g(double d, double d1, double d2) {
+        int i = MathHelper.floor_double(d);
+        int j = MathHelper.floor_double(d1);
+        int k = MathHelper.floor_double(d2);
+        if (worldObj.getBlockId(i, j - 1, k) == Block.minecartTrack.blockID) {
+            j--;
+        }
+        if (worldObj.getBlockId(i, j, k) == Block.minecartTrack.blockID) {
+            int l = worldObj.getBlockMetadata(i, j, k);
+            d1 = j;
+            if (l >= 2 && l <= 5) {
+                d1 = j + 1;
+            }
+            int ai[][] = field_855_j[l];
+            double d3 = 0.0D;
+            double d4 = (double) i + 0.5D + (double) ai[0][0] * 0.5D;
+            double d5 = (double) j + 0.5D + (double) ai[0][1] * 0.5D;
+            double d6 = (double) k + 0.5D + (double) ai[0][2] * 0.5D;
+            double d7 = (double) i + 0.5D + (double) ai[1][0] * 0.5D;
+            double d8 = (double) j + 0.5D + (double) ai[1][1] * 0.5D;
+            double d9 = (double) k + 0.5D + (double) ai[1][2] * 0.5D;
+            double d10 = d7 - d4;
+            double d11 = (d8 - d5) * 2D;
+            double d12 = d9 - d6;
+            if (d10 == 0.0D) {
+                d = (double) i + 0.5D;
+                d3 = d2 - (double) k;
+            } else if (d12 == 0.0D) {
+                d2 = (double) k + 0.5D;
+                d3 = d - (double) i;
+            } else {
+                double d13 = d - d4;
+                double d14 = d2 - d6;
+                double d15 = (d13 * d10 + d14 * d12) * 2D;
+                d3 = d15;
+            }
+            d = d4 + d10 * d3;
+            d1 = d5 + d11 * d3;
+            d2 = d6 + d12 * d3;
+            if (d11 < 0.0D) {
+                d1++;
+            }
+            if (d11 > 0.0D) {
+                d1 += 0.5D;
+            }
+            return Vec3D.createVector(d, d1, d2);
+        } else {
+            return null;
+        }
+    }
+
+    protected void writeEntityToNBT(NBTTagCompound nbttagcompound) {
+        nbttagcompound.setInteger("Type", minecartType);
+        if (minecartType == 2) {
+            nbttagcompound.setDouble("PushX", pushX);
+            nbttagcompound.setDouble("PushZ", pushZ);
+            nbttagcompound.setShort("Fuel", (short) fuel);
+        } else if (minecartType == 1) {
+            NBTTagList nbttaglist = new NBTTagList();
+            for (int i = 0; i < cargoItems.length; i++) {
+                if (cargoItems[i] != null) {
+                    NBTTagCompound nbttagcompound1 = new NBTTagCompound();
+                    nbttagcompound1.setByte("Slot", (byte) i);
+                    cargoItems[i].writeToNBT(nbttagcompound1);
+                    nbttaglist.setTag(nbttagcompound1);
+                }
+            }
+
+            nbttagcompound.setTag("Items", nbttaglist);
+        }
+    }
+
+    protected void readEntityFromNBT(NBTTagCompound nbttagcompound) {
+        minecartType = nbttagcompound.getInteger("Type");
+        if (minecartType == 2) {
+            pushX = nbttagcompound.getDouble("PushX");
+            pushZ = nbttagcompound.getDouble("PushZ");
+            fuel = nbttagcompound.getShort("Fuel");
+        } else if (minecartType == 1) {
+            NBTTagList nbttaglist = nbttagcompound.getTagList("Items");
+            cargoItems = new ItemStack[getSizeInventory()];
+            for (int i = 0; i < nbttaglist.tagCount(); i++) {
+                NBTTagCompound nbttagcompound1 = (NBTTagCompound) nbttaglist.tagAt(i);
+                int j = nbttagcompound1.getByte("Slot") & 0xff;
+                if (j >= 0 && j < cargoItems.length) {
+                    cargoItems[j] = new ItemStack(nbttagcompound1);
+                }
+            }
+
+        }
     }
 
     public float func_392_h_() {
         return 0.0F;
     }
 
-    public void applyEntityCollision(Entity var1) {
-        if(!this.worldObj.multiplayerWorld) {
-            if(var1 != this.riddenByEntity) {
-                if(var1 instanceof EntityLiving && !(var1 instanceof EntityPlayer) && this.d == 0 && this.motionX * this.motionX + this.motionZ * this.motionZ > 0.01D && this.riddenByEntity == null && var1.ridingEntity == null) {
-                    var1.mountEntity(this);
-                }
-
-                double var2 = var1.posX - this.posX;
-                double var4 = var1.posZ - this.posZ;
-                double var6 = var2 * var2 + var4 * var4;
-                if(var6 >= (double)1.0E-4F) {
-                    var6 = (double)MathHelper.sqrt_double(var6);
-                    var2 /= var6;
-                    var4 /= var6;
-                    double var8 = 1.0D / var6;
-                    if(var8 > 1.0D) {
-                        var8 = 1.0D;
-                    }
-
-                    var2 *= var8;
-                    var4 *= var8;
-                    var2 *= (double)0.1F;
-                    var4 *= (double)0.1F;
-                    var2 *= (double)(1.0F - this.entityCollisionReduction);
-                    var4 *= (double)(1.0F - this.entityCollisionReduction);
-                    var2 *= 0.5D;
-                    var4 *= 0.5D;
-                    if(var1 instanceof EntityMinecart) {
-                        double var10 = var1.motionX + this.motionX;
-                        double var12 = var1.motionZ + this.motionZ;
-                        if(((EntityMinecart)var1).d == 2 && this.d != 2) {
-                            this.motionX *= (double)0.2F;
-                            this.motionZ *= (double)0.2F;
-                            this.addVelocity(var1.motionX - var2, 0.0D, var1.motionZ - var4);
-                            var1.motionX *= (double)0.7F;
-                            var1.motionZ *= (double)0.7F;
-                        } else if(((EntityMinecart)var1).d != 2 && this.d == 2) {
-                            var1.motionX *= (double)0.2F;
-                            var1.motionZ *= (double)0.2F;
-                            var1.addVelocity(this.motionX + var2, 0.0D, this.motionZ + var4);
-                            this.motionX *= (double)0.7F;
-                            this.motionZ *= (double)0.7F;
-                        } else {
-                            var10 /= 2.0D;
-                            var12 /= 2.0D;
-                            this.motionX *= (double)0.2F;
-                            this.motionZ *= (double)0.2F;
-                            this.addVelocity(var10 - var2, 0.0D, var12 - var4);
-                            var1.motionX *= (double)0.2F;
-                            var1.motionZ *= (double)0.2F;
-                            var1.addVelocity(var10 + var2, 0.0D, var12 + var4);
-                        }
-                    } else {
-                        this.addVelocity(-var2, 0.0D, -var4);
-                        var1.addVelocity(var2 / 4.0D, 0.0D, var4 / 4.0D);
-                    }
-                }
-
+    public void applyEntityCollision(Entity entity) {
+        if (worldObj.multiplayerWorld) {
+            return;
+        }
+        if (entity == riddenByEntity) {
+            return;
+        }
+        if ((entity instanceof EntityLiving) && !(entity instanceof EntityPlayer) && minecartType == 0 && motionX * motionX + motionZ * motionZ > 0.01D && riddenByEntity == null && entity.ridingEntity == null) {
+            entity.mountEntity(this);
+        }
+        double d = entity.posX - posX;
+        double d1 = entity.posZ - posZ;
+        double d2 = d * d + d1 * d1;
+        if (d2 >= 9.9999997473787516E-005D) {
+            d2 = MathHelper.sqrt_double(d2);
+            d /= d2;
+            d1 /= d2;
+            double d3 = 1.0D / d2;
+            if (d3 > 1.0D) {
+                d3 = 1.0D;
+            }
+            d *= d3;
+            d1 *= d3;
+            d *= 0.10000000149011612D;
+            d1 *= 0.10000000149011612D;
+            d *= 1.0F - entityCollisionReduction;
+            d1 *= 1.0F - entityCollisionReduction;
+            d *= 0.5D;
+            d1 *= 0.5D;
+            if (entity instanceof EntityMinecart) {
+                double d4 = entity.motionX + motionX;
+                double d5 = entity.motionZ + motionZ;
+                if (((EntityMinecart) entity).minecartType == 2 && minecartType != 2) {
+                    motionX *= 0.20000000298023224D;
+                    motionZ *= 0.20000000298023224D;
+                    addVelocity(entity.motionX - d, 0.0D, entity.motionZ - d1);
+                    entity.motionX *= 0.69999998807907104D;
+                    entity.motionZ *= 0.69999998807907104D;
+                } else if (((EntityMinecart) entity).minecartType != 2 && minecartType == 2) {
+                    entity.motionX *= 0.20000000298023224D;
+                    entity.motionZ *= 0.20000000298023224D;
+                    entity.addVelocity(motionX + d, 0.0D, motionZ + d1);
+                    motionX *= 0.69999998807907104D;
+                    motionZ *= 0.69999998807907104D;
+                } else {
+                    d4 /= 2D;
+                    d5 /= 2D;
+                    motionX *= 0.20000000298023224D;
+                    motionZ *= 0.20000000298023224D;
+                    addVelocity(d4 - d, 0.0D, d5 - d1);
+                    entity.motionX *= 0.20000000298023224D;
+                    entity.motionZ *= 0.20000000298023224D;
+                    entity.addVelocity(d4 + d, 0.0D, d5 + d1);
+                }
+            } else {
+                addVelocity(-d, 0.0D, -d1);
+                entity.addVelocity(d / 4D, 0.0D, d1 / 4D);
             }
         }
     }
@@ -616,36 +626,32 @@
         return 27;
     }
 
-    public ItemStack getStackInSlot(int var1) {
-        return this.cargoItems[var1];
+    public ItemStack getStackInSlot(int i) {
+        return cargoItems[i];
     }
 
-    public ItemStack decrStackSize(int var1, int var2) {
-        if(this.cargoItems[var1] != null) {
-            ItemStack var3;
-            if(this.cargoItems[var1].stackSize <= var2) {
-                var3 = this.cargoItems[var1];
-                this.cargoItems[var1] = null;
-                return var3;
-            } else {
-                var3 = this.cargoItems[var1].splitStack(var2);
-                if(this.cargoItems[var1].stackSize == 0) {
-                    this.cargoItems[var1] = null;
-                }
-
-                return var3;
-            }
+    public ItemStack decrStackSize(int i, int j) {
+        if (cargoItems[i] != null) {
+            if (cargoItems[i].stackSize <= j) {
+                ItemStack itemstack = cargoItems[i];
+                cargoItems[i] = null;
+                return itemstack;
+            }
+            ItemStack itemstack1 = cargoItems[i].splitStack(j);
+            if (cargoItems[i].stackSize == 0) {
+                cargoItems[i] = null;
+            }
+            return itemstack1;
         } else {
             return null;
         }
     }
 
-    public void setInventorySlotContents(int var1, ItemStack var2) {
-        this.cargoItems[var1] = var2;
-        if(var2 != null && var2.stackSize > this.getInventoryStackLimit()) {
-            var2.stackSize = this.getInventoryStackLimit();
+    public void setInventorySlotContents(int i, ItemStack itemstack) {
+        cargoItems[i] = itemstack;
+        if (itemstack != null && itemstack.stackSize > getInventoryStackLimit()) {
+            itemstack.stackSize = getInventoryStackLimit();
         }
-
     }
 
     public String getInvName() {
@@ -659,55 +665,56 @@
     public void onInventoryChanged() {
     }
 
-    public boolean interact(EntityPlayer var1) {
-        if(this.d == 0) {
-            if(this.riddenByEntity != null && this.riddenByEntity instanceof EntityPlayer && this.riddenByEntity != var1) {
+    public boolean interact(EntityPlayer entityplayer) {
+        if (minecartType == 0) {
+            if (riddenByEntity != null && (riddenByEntity instanceof EntityPlayer) && riddenByEntity != entityplayer) {
                 return true;
             }
-
-            if(!this.worldObj.multiplayerWorld) {
-                var1.mountEntity(this);
-            }
-        } else if(this.d == 1) {
-            if(!this.worldObj.multiplayerWorld) {
-                var1.displayGUIChest(this);
-            }
-        } else if(this.d == 2) {
-            ItemStack var2 = var1.inventory.getCurrentItem();
-            if(var2 != null && var2.itemID == Item.coal.shiftedIndex) {
-                if(--var2.stackSize == 0) {
-                    var1.inventory.setInventorySlotContents(var1.inventory.currentItem, (ItemStack)null);
+            if (!worldObj.multiplayerWorld) {
+                entityplayer.mountEntity(this);
+            }
+        } else if (minecartType == 1) {
+            if (!worldObj.multiplayerWorld) {
+                entityplayer.displayGUIChest(this);
+            }
+        } else if (minecartType == 2) {
+            ItemStack itemstack = entityplayer.inventory.getCurrentItem();
+            if (itemstack != null && itemstack.itemID == Item.coal.shiftedIndex) {
+                if (--itemstack.stackSize == 0) {
+                    entityplayer.inventory.setInventorySlotContents(entityplayer.inventory.currentItem, null);
                 }
-
-                this.fuel += 1200;
+                fuel += 1200;
             }
-
-            this.pushX = this.posX - var1.posX;
-            this.pushZ = this.posZ - var1.posZ;
+            pushX = posX - entityplayer.posX;
+            pushZ = posZ - entityplayer.posZ;
         }
-
         return true;
     }
 
-    public void setPositionAndRotation2(double var1, double var3, double var5, float var7, float var8, int var9) {
-        this.field_9414_l = var1;
-        this.field_9413_m = var3;
-        this.field_9412_n = var5;
-        this.field_9411_o = (double)var7;
-        this.field_9410_p = (double)var8;
-        this.field_9415_k = var9 + 2;
-        this.motionX = this.field_9409_q;
-        this.motionY = this.field_9408_r;
-        this.motionZ = this.field_9407_s;
-    }
-
-    public void setVelocity(double var1, double var3, double var5) {
-        this.field_9409_q = this.motionX = var1;
-        this.field_9408_r = this.motionY = var3;
-        this.field_9407_s = this.motionZ = var5;
-    }
-
-    public boolean func_20070_a_(EntityPlayer var1) {
-        return this.isDead ? false : var1.getDistanceSqToEntity(this) <= 64.0D;
-    }
+    public void setPositionAndRotation2(double d, double d1, double d2, float f,
+                                        float f1, int i) {
+        field_9414_l = d;
+        field_9413_m = d1;
+        field_9412_n = d2;
+        field_9411_o = f;
+        field_9410_p = f1;
+        field_9415_k = i + 2;
+        motionX = field_9409_q;
+        motionY = field_9408_r;
+        motionZ = field_9407_s;
+    }
+
+    public void setVelocity(double d, double d1, double d2) {
+        field_9409_q = motionX = d;
+        field_9408_r = motionY = d1;
+        field_9407_s = motionZ = d2;
+    }
+
+    public boolean func_20070_a_(EntityPlayer entityplayer) {
+        if (isDead) {
+            return false;
+        }
+        return entityplayer.getDistanceSqToEntity(this) <= 64D;
+    }
+
 }
