--- net/minecraft/src/SoundPool.java
+++ net/minecraft/src/SoundPool.java
@@ -2,51 +2,60 @@
 
 import java.io.File;
 import java.net.MalformedURLException;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Random;
+import java.util.*;
 
 public class SoundPool {
-    private Random rand = new Random();
-    private Map nameToSoundPoolEntriesMapping = new HashMap();
-    private List allSoundPoolEntries = new ArrayList();
-    public int numberOfSoundPoolEntries = 0;
-    public boolean field_1657_b = true;
-
-    public SoundPoolEntry addSound(String var1, File var2) {
+
+    public int numberOfSoundPoolEntries;
+    public boolean field_1657_b;
+    private Random rand;
+    private Map nameToSoundPoolEntriesMapping;
+    private List allSoundPoolEntries;
+    public SoundPool() {
+        rand = new Random();
+        nameToSoundPoolEntriesMapping = new HashMap();
+        allSoundPoolEntries = new ArrayList();
+        numberOfSoundPoolEntries = 0;
+        field_1657_b = true;
+    }
+
+    public SoundPoolEntry addSound(String s, File file) {
         try {
-            String var3 = var1;
-            var1 = var1.substring(0, var1.indexOf("."));
-            if(this.field_1657_b) {
-                while(Character.isDigit(var1.charAt(var1.length() - 1))) {
-                    var1 = var1.substring(0, var1.length() - 1);
+            String s1 = s;
+            s = s.substring(0, s.indexOf("."));
+            if (field_1657_b) {
+                for (; Character.isDigit(s.charAt(s.length() - 1)); s = s.substring(0, s.length() - 1)) {
                 }
             }
-
-            var1 = var1.replaceAll("/", ".");
-            if(!this.nameToSoundPoolEntriesMapping.containsKey(var1)) {
-                this.nameToSoundPoolEntriesMapping.put(var1, new ArrayList());
+            s = s.replaceAll("/", ".");
+            if (!nameToSoundPoolEntriesMapping.containsKey(s)) {
+                nameToSoundPoolEntriesMapping.put(s, new ArrayList());
             }
-
-            SoundPoolEntry var4 = new SoundPoolEntry(var3, var2.toURI().toURL());
-            ((List)this.nameToSoundPoolEntriesMapping.get(var1)).add(var4);
-            this.allSoundPoolEntries.add(var4);
-            ++this.numberOfSoundPoolEntries;
-            return var4;
-        } catch (MalformedURLException var5) {
-            var5.printStackTrace();
-            throw new RuntimeException(var5);
+            SoundPoolEntry soundpoolentry = new SoundPoolEntry(s1, file.toURI().toURL());
+            ((List) nameToSoundPoolEntriesMapping.get(s)).add(soundpoolentry);
+            allSoundPoolEntries.add(soundpoolentry);
+            numberOfSoundPoolEntries++;
+            return soundpoolentry;
+        } catch (MalformedURLException malformedurlexception) {
+            malformedurlexception.printStackTrace();
+            throw new RuntimeException(malformedurlexception);
         }
     }
 
-    public SoundPoolEntry getRandomSoundFromSoundPool(String var1) {
-        List var2 = (List)this.nameToSoundPoolEntriesMapping.get(var1);
-        return var2 == null ? null : (SoundPoolEntry)var2.get(this.rand.nextInt(var2.size()));
+    public SoundPoolEntry getRandomSoundFromSoundPool(String s) {
+        List list = (List) nameToSoundPoolEntriesMapping.get(s);
+        if (list == null) {
+            return null;
+        } else {
+            return (SoundPoolEntry) list.get(rand.nextInt(list.size()));
+        }
     }
 
     public SoundPoolEntry getRandomSound() {
-        return this.allSoundPoolEntries.size() == 0 ? null : (SoundPoolEntry)this.allSoundPoolEntries.get(this.rand.nextInt(this.allSoundPoolEntries.size()));
+        if (allSoundPoolEntries.size() == 0) {
+            return null;
+        } else {
+            return (SoundPoolEntry) allSoundPoolEntries.get(rand.nextInt(allSoundPoolEntries.size()));
+        }
     }
 }
