--- net/minecraft/src/BlockChest.java
+++ net/minecraft/src/BlockChest.java
@@ -3,194 +3,211 @@
 import java.util.Random;
 
 public class BlockChest extends BlockContainer {
-    private Random random = new Random();
-
-    protected BlockChest(int var1) {
-        super(var1, Material.wood);
-        this.blockIndexInTexture = 26;
-    }
-
-    public int getBlockTexture(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-        if(var5 == 1) {
-            return this.blockIndexInTexture - 1;
-        } else if(var5 == 0) {
-            return this.blockIndexInTexture - 1;
-        } else {
-            int var6 = var1.getBlockId(var2, var3, var4 - 1);
-            int var7 = var1.getBlockId(var2, var3, var4 + 1);
-            int var8 = var1.getBlockId(var2 - 1, var3, var4);
-            int var9 = var1.getBlockId(var2 + 1, var3, var4);
-            int var10;
-            int var11;
-            int var12;
-            byte var13;
-            if(var6 != this.blockID && var7 != this.blockID) {
-                if(var8 != this.blockID && var9 != this.blockID) {
-                    byte var14 = 3;
-                    if(Block.opaqueCubeLookup[var6] && !Block.opaqueCubeLookup[var7]) {
-                        var14 = 3;
-                    }
-
-                    if(Block.opaqueCubeLookup[var7] && !Block.opaqueCubeLookup[var6]) {
-                        var14 = 2;
-                    }
-
-                    if(Block.opaqueCubeLookup[var8] && !Block.opaqueCubeLookup[var9]) {
-                        var14 = 5;
-                    }
-
-                    if(Block.opaqueCubeLookup[var9] && !Block.opaqueCubeLookup[var8]) {
-                        var14 = 4;
-                    }
-
-                    return var5 == var14 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture;
-                } else if(var5 != 4 && var5 != 5) {
-                    var10 = 0;
-                    if(var8 == this.blockID) {
-                        var10 = -1;
-                    }
-
-                    var11 = var1.getBlockId(var8 == this.blockID ? var2 - 1 : var2 + 1, var3, var4 - 1);
-                    var12 = var1.getBlockId(var8 == this.blockID ? var2 - 1 : var2 + 1, var3, var4 + 1);
-                    if(var5 == 3) {
-                        var10 = -1 - var10;
-                    }
-
-                    var13 = 3;
-                    if((Block.opaqueCubeLookup[var6] || Block.opaqueCubeLookup[var11]) && !Block.opaqueCubeLookup[var7] && !Block.opaqueCubeLookup[var12]) {
-                        var13 = 3;
-                    }
-
-                    if((Block.opaqueCubeLookup[var7] || Block.opaqueCubeLookup[var12]) && !Block.opaqueCubeLookup[var6] && !Block.opaqueCubeLookup[var11]) {
-                        var13 = 2;
-                    }
-
-                    return (var5 == var13 ? this.blockIndexInTexture + 16 : this.blockIndexInTexture + 32) + var10;
-                } else {
-                    return this.blockIndexInTexture;
-                }
-            } else if(var5 != 2 && var5 != 3) {
-                var10 = 0;
-                if(var6 == this.blockID) {
-                    var10 = -1;
-                }
-
-                var11 = var1.getBlockId(var2 - 1, var3, var6 == this.blockID ? var4 - 1 : var4 + 1);
-                var12 = var1.getBlockId(var2 + 1, var3, var6 == this.blockID ? var4 - 1 : var4 + 1);
-                if(var5 == 4) {
-                    var10 = -1 - var10;
-                }
-
-                var13 = 5;
-                if((Block.opaqueCubeLookup[var8] || Block.opaqueCubeLookup[var11]) && !Block.opaqueCubeLookup[var9] && !Block.opaqueCubeLookup[var12]) {
-                    var13 = 5;
-                }
-
-                if((Block.opaqueCubeLookup[var9] || Block.opaqueCubeLookup[var12]) && !Block.opaqueCubeLookup[var8] && !Block.opaqueCubeLookup[var11]) {
-                    var13 = 4;
-                }
-
-                return (var5 == var13 ? this.blockIndexInTexture + 16 : this.blockIndexInTexture + 32) + var10;
-            } else {
-                return this.blockIndexInTexture;
-            }
-        }
-    }
-
-    public int getBlockTextureFromSide(int var1) {
-        return var1 == 1 ? this.blockIndexInTexture - 1 : (var1 == 0 ? this.blockIndexInTexture - 1 : (var1 == 3 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture));
-    }
-
-    public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-        int var5 = 0;
-        if(var1.getBlockId(var2 - 1, var3, var4) == this.blockID) {
-            ++var5;
-        }
-
-        if(var1.getBlockId(var2 + 1, var3, var4) == this.blockID) {
-            ++var5;
-        }
-
-        if(var1.getBlockId(var2, var3, var4 - 1) == this.blockID) {
-            ++var5;
-        }
-
-        if(var1.getBlockId(var2, var3, var4 + 1) == this.blockID) {
-            ++var5;
-        }
-
-        return var5 > 1 ? false : (this.isThereANeighborChest(var1, var2 - 1, var3, var4) ? false : (this.isThereANeighborChest(var1, var2 + 1, var3, var4) ? false : (this.isThereANeighborChest(var1, var2, var3, var4 - 1) ? false : !this.isThereANeighborChest(var1, var2, var3, var4 + 1))));
-    }
-
-    private boolean isThereANeighborChest(World var1, int var2, int var3, int var4) {
-        return var1.getBlockId(var2, var3, var4) != this.blockID ? false : (var1.getBlockId(var2 - 1, var3, var4) == this.blockID ? true : (var1.getBlockId(var2 + 1, var3, var4) == this.blockID ? true : (var1.getBlockId(var2, var3, var4 - 1) == this.blockID ? true : var1.getBlockId(var2, var3, var4 + 1) == this.blockID)));
-    }
-
-    public void onBlockRemoval(World var1, int var2, int var3, int var4) {
-        TileEntityChest var5 = (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4);
-
-        for(int var6 = 0; var6 < var5.getSizeInventory(); ++var6) {
-            ItemStack var7 = var5.getStackInSlot(var6);
-            if(var7 != null) {
-                float var8 = this.random.nextFloat() * 0.8F + 0.1F;
-                float var9 = this.random.nextFloat() * 0.8F + 0.1F;
-                float var10 = this.random.nextFloat() * 0.8F + 0.1F;
-
-                while(var7.stackSize > 0) {
-                    int var11 = this.random.nextInt(21) + 10;
-                    if(var11 > var7.stackSize) {
-                        var11 = var7.stackSize;
-                    }
-
-                    var7.stackSize -= var11;
-                    EntityItem var12 = new EntityItem(var1, (double)((float)var2 + var8), (double)((float)var3 + var9), (double)((float)var4 + var10), new ItemStack(var7.itemID, var11, var7.itemDamage));
-                    float var13 = 0.05F;
-                    var12.motionX = (double)((float)this.random.nextGaussian() * var13);
-                    var12.motionY = (double)((float)this.random.nextGaussian() * var13 + 0.2F);
-                    var12.motionZ = (double)((float)this.random.nextGaussian() * var13);
-                    var1.entityJoinedWorld(var12);
-                }
-            }
-        }
-
-        super.onBlockRemoval(var1, var2, var3, var4);
-    }
-
-    public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-        Object var6 = (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4);
-        if(var1.isBlockOpaqueCube(var2, var3 + 1, var4)) {
-            return true;
-        } else if(var1.getBlockId(var2 - 1, var3, var4) == this.blockID && var1.isBlockOpaqueCube(var2 - 1, var3 + 1, var4)) {
-            return true;
-        } else if(var1.getBlockId(var2 + 1, var3, var4) == this.blockID && var1.isBlockOpaqueCube(var2 + 1, var3 + 1, var4)) {
-            return true;
-        } else if(var1.getBlockId(var2, var3, var4 - 1) == this.blockID && var1.isBlockOpaqueCube(var2, var3 + 1, var4 - 1)) {
-            return true;
-        } else if(var1.getBlockId(var2, var3, var4 + 1) == this.blockID && var1.isBlockOpaqueCube(var2, var3 + 1, var4 + 1)) {
-            return true;
-        } else {
-            if(var1.getBlockId(var2 - 1, var3, var4) == this.blockID) {
-                var6 = new InventoryLargeChest("Large chest", (TileEntityChest)var1.getBlockTileEntity(var2 - 1, var3, var4), (IInventory)var6);
-            }
-
-            if(var1.getBlockId(var2 + 1, var3, var4) == this.blockID) {
-                var6 = new InventoryLargeChest("Large chest", (IInventory)var6, (TileEntityChest)var1.getBlockTileEntity(var2 + 1, var3, var4));
-            }
-
-            if(var1.getBlockId(var2, var3, var4 - 1) == this.blockID) {
-                var6 = new InventoryLargeChest("Large chest", (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4 - 1), (IInventory)var6);
-            }
-
-            if(var1.getBlockId(var2, var3, var4 + 1) == this.blockID) {
-                var6 = new InventoryLargeChest("Large chest", (IInventory)var6, (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4 + 1));
-            }
-
-            if(var1.multiplayerWorld) {
-                return true;
-            } else {
-                var5.displayGUIChest((IInventory)var6);
-                return true;
-            }
+
+    private Random random;
+
+    protected BlockChest(int i) {
+        super(i, Material.wood);
+        random = new Random();
+        blockIndexInTexture = 26;
+    }
+
+    public int getBlockTexture(IBlockAccess iblockaccess, int i, int j, int k, int l) {
+        if (l == 1) {
+            return blockIndexInTexture - 1;
+        }
+        if (l == 0) {
+            return blockIndexInTexture - 1;
+        }
+        int i1 = iblockaccess.getBlockId(i, j, k - 1);
+        int j1 = iblockaccess.getBlockId(i, j, k + 1);
+        int k1 = iblockaccess.getBlockId(i - 1, j, k);
+        int l1 = iblockaccess.getBlockId(i + 1, j, k);
+        if (i1 == blockID || j1 == blockID) {
+            if (l == 2 || l == 3) {
+                return blockIndexInTexture;
+            }
+            int i2 = 0;
+            if (i1 == blockID) {
+                i2 = -1;
+            }
+            int k2 = iblockaccess.getBlockId(i - 1, j, i1 != blockID ? k + 1 : k - 1);
+            int i3 = iblockaccess.getBlockId(i + 1, j, i1 != blockID ? k + 1 : k - 1);
+            if (l == 4) {
+                i2 = -1 - i2;
+            }
+            byte byte1 = 5;
+            if ((Block.opaqueCubeLookup[k1] || Block.opaqueCubeLookup[k2]) && !Block.opaqueCubeLookup[l1] && !Block.opaqueCubeLookup[i3]) {
+                byte1 = 5;
+            }
+            if ((Block.opaqueCubeLookup[l1] || Block.opaqueCubeLookup[i3]) && !Block.opaqueCubeLookup[k1] && !Block.opaqueCubeLookup[k2]) {
+                byte1 = 4;
+            }
+            return (l != byte1 ? blockIndexInTexture + 32 : blockIndexInTexture + 16) + i2;
+        }
+        if (k1 == blockID || l1 == blockID) {
+            if (l == 4 || l == 5) {
+                return blockIndexInTexture;
+            }
+            int j2 = 0;
+            if (k1 == blockID) {
+                j2 = -1;
+            }
+            int l2 = iblockaccess.getBlockId(k1 != blockID ? i + 1 : i - 1, j, k - 1);
+            int j3 = iblockaccess.getBlockId(k1 != blockID ? i + 1 : i - 1, j, k + 1);
+            if (l == 3) {
+                j2 = -1 - j2;
+            }
+            byte byte2 = 3;
+            if ((Block.opaqueCubeLookup[i1] || Block.opaqueCubeLookup[l2]) && !Block.opaqueCubeLookup[j1] && !Block.opaqueCubeLookup[j3]) {
+                byte2 = 3;
+            }
+            if ((Block.opaqueCubeLookup[j1] || Block.opaqueCubeLookup[j3]) && !Block.opaqueCubeLookup[i1] && !Block.opaqueCubeLookup[l2]) {
+                byte2 = 2;
+            }
+            return (l != byte2 ? blockIndexInTexture + 32 : blockIndexInTexture + 16) + j2;
+        }
+        byte byte0 = 3;
+        if (Block.opaqueCubeLookup[i1] && !Block.opaqueCubeLookup[j1]) {
+            byte0 = 3;
+        }
+        if (Block.opaqueCubeLookup[j1] && !Block.opaqueCubeLookup[i1]) {
+            byte0 = 2;
+        }
+        if (Block.opaqueCubeLookup[k1] && !Block.opaqueCubeLookup[l1]) {
+            byte0 = 5;
+        }
+        if (Block.opaqueCubeLookup[l1] && !Block.opaqueCubeLookup[k1]) {
+            byte0 = 4;
+        }
+        return l != byte0 ? blockIndexInTexture : blockIndexInTexture + 1;
+    }
+
+    public int getBlockTextureFromSide(int i) {
+        if (i == 1) {
+            return blockIndexInTexture - 1;
+        }
+        if (i == 0) {
+            return blockIndexInTexture - 1;
+        }
+        if (i == 3) {
+            return blockIndexInTexture + 1;
+        } else {
+            return blockIndexInTexture;
+        }
+    }
+
+    public boolean canPlaceBlockAt(World world, int i, int j, int k) {
+        int l = 0;
+        if (world.getBlockId(i - 1, j, k) == blockID) {
+            l++;
+        }
+        if (world.getBlockId(i + 1, j, k) == blockID) {
+            l++;
+        }
+        if (world.getBlockId(i, j, k - 1) == blockID) {
+            l++;
+        }
+        if (world.getBlockId(i, j, k + 1) == blockID) {
+            l++;
+        }
+        if (l > 1) {
+            return false;
+        }
+        if (isThereANeighborChest(world, i - 1, j, k)) {
+            return false;
+        }
+        if (isThereANeighborChest(world, i + 1, j, k)) {
+            return false;
+        }
+        if (isThereANeighborChest(world, i, j, k - 1)) {
+            return false;
+        }
+        return !isThereANeighborChest(world, i, j, k + 1);
+    }
+
+    private boolean isThereANeighborChest(World world, int i, int j, int k) {
+        if (world.getBlockId(i, j, k) != blockID) {
+            return false;
+        }
+        if (world.getBlockId(i - 1, j, k) == blockID) {
+            return true;
+        }
+        if (world.getBlockId(i + 1, j, k) == blockID) {
+            return true;
+        }
+        if (world.getBlockId(i, j, k - 1) == blockID) {
+            return true;
+        }
+        return world.getBlockId(i, j, k + 1) == blockID;
+    }
+
+    public void onBlockRemoval(World world, int i, int j, int k) {
+        TileEntityChest tileentitychest = (TileEntityChest) world.getBlockTileEntity(i, j, k);
+        label0:
+        for (int l = 0; l < tileentitychest.getSizeInventory(); l++) {
+            ItemStack itemstack = tileentitychest.getStackInSlot(l);
+            if (itemstack == null) {
+                continue;
+            }
+            float f = random.nextFloat() * 0.8F + 0.1F;
+            float f1 = random.nextFloat() * 0.8F + 0.1F;
+            float f2 = random.nextFloat() * 0.8F + 0.1F;
+            do {
+                if (itemstack.stackSize <= 0) {
+                    continue label0;
+                }
+                int i1 = random.nextInt(21) + 10;
+                if (i1 > itemstack.stackSize) {
+                    i1 = itemstack.stackSize;
+                }
+                itemstack.stackSize -= i1;
+                EntityItem entityitem = new EntityItem(world, (float) i + f, (float) j + f1, (float) k + f2, new ItemStack(itemstack.itemID, i1, itemstack.itemDamage));
+                float f3 = 0.05F;
+                entityitem.motionX = (float) random.nextGaussian() * f3;
+                entityitem.motionY = (float) random.nextGaussian() * f3 + 0.2F;
+                entityitem.motionZ = (float) random.nextGaussian() * f3;
+                world.entityJoinedWorld(entityitem);
+            } while (true);
+        }
+
+        super.onBlockRemoval(world, i, j, k);
+    }
+
+    public boolean blockActivated(World world, int i, int j, int k, EntityPlayer entityplayer) {
+        Object obj = (TileEntityChest) world.getBlockTileEntity(i, j, k);
+        if (world.isBlockOpaqueCube(i, j + 1, k)) {
+            return true;
+        }
+        if (world.getBlockId(i - 1, j, k) == blockID && world.isBlockOpaqueCube(i - 1, j + 1, k)) {
+            return true;
+        }
+        if (world.getBlockId(i + 1, j, k) == blockID && world.isBlockOpaqueCube(i + 1, j + 1, k)) {
+            return true;
+        }
+        if (world.getBlockId(i, j, k - 1) == blockID && world.isBlockOpaqueCube(i, j + 1, k - 1)) {
+            return true;
+        }
+        if (world.getBlockId(i, j, k + 1) == blockID && world.isBlockOpaqueCube(i, j + 1, k + 1)) {
+            return true;
+        }
+        if (world.getBlockId(i - 1, j, k) == blockID) {
+            obj = new InventoryLargeChest("Large chest", (TileEntityChest) world.getBlockTileEntity(i - 1, j, k), ((IInventory) (obj)));
+        }
+        if (world.getBlockId(i + 1, j, k) == blockID) {
+            obj = new InventoryLargeChest("Large chest", ((IInventory) (obj)), (TileEntityChest) world.getBlockTileEntity(i + 1, j, k));
+        }
+        if (world.getBlockId(i, j, k - 1) == blockID) {
+            obj = new InventoryLargeChest("Large chest", (TileEntityChest) world.getBlockTileEntity(i, j, k - 1), ((IInventory) (obj)));
+        }
+        if (world.getBlockId(i, j, k + 1) == blockID) {
+            obj = new InventoryLargeChest("Large chest", ((IInventory) (obj)), (TileEntityChest) world.getBlockTileEntity(i, j, k + 1));
+        }
+        if (world.multiplayerWorld) {
+            return true;
+        } else {
+            entityplayer.displayGUIChest(((IInventory) (obj)));
+            return true;
         }
     }
 
