--- net/minecraft/src/TexureWaterFlowFX.java
+++ net/minecraft/src/TexureWaterFlowFX.java
@@ -1,85 +1,80 @@
 package net.minecraft.src;
 
 public class TexureWaterFlowFX extends TextureFX {
-    protected float[] field_1138_g = new float[256];
-    protected float[] field_1137_h = new float[256];
-    protected float[] field_1136_i = new float[256];
-    protected float[] field_1135_j = new float[256];
-    private int field_1134_k = 0;
 
+    protected float[] field_1138_g;
+    protected float[] field_1137_h;
+    protected float[] field_1136_i;
+    protected float[] field_1135_j;
+    private int field_1134_k;
     public TexureWaterFlowFX() {
         super(Block.waterStill.blockIndexInTexture + 1);
-        this.field_1129_e = 2;
+        field_1138_g = new float[256];
+        field_1137_h = new float[256];
+        field_1136_i = new float[256];
+        field_1135_j = new float[256];
+        field_1134_k = 0;
+        field_1129_e = 2;
     }
 
     public void func_783_a() {
-        ++this.field_1134_k;
-
-        int var1;
-        int var2;
-        float var3;
-        int var5;
-        int var6;
-        for(var1 = 0; var1 < 16; ++var1) {
-            for(var2 = 0; var2 < 16; ++var2) {
-                var3 = 0.0F;
-
-                for(int var4 = var2 - 2; var4 <= var2; ++var4) {
-                    var5 = var1 & 15;
-                    var6 = var4 & 15;
-                    var3 += this.field_1138_g[var5 + var6 * 16];
-                }
-
-                this.field_1137_h[var1 + var2 * 16] = var3 / 3.2F + this.field_1136_i[var1 + var2 * 16] * 0.8F;
-            }
-        }
-
-        for(var1 = 0; var1 < 16; ++var1) {
-            for(var2 = 0; var2 < 16; ++var2) {
-                this.field_1136_i[var1 + var2 * 16] += this.field_1135_j[var1 + var2 * 16] * 0.05F;
-                if(this.field_1136_i[var1 + var2 * 16] < 0.0F) {
-                    this.field_1136_i[var1 + var2 * 16] = 0.0F;
-                }
-
-                this.field_1135_j[var1 + var2 * 16] -= 0.3F;
-                if(Math.random() < 0.2D) {
-                    this.field_1135_j[var1 + var2 * 16] = 0.5F;
-                }
-            }
-        }
-
-        float[] var12 = this.field_1137_h;
-        this.field_1137_h = this.field_1138_g;
-        this.field_1138_g = var12;
-
-        for(var2 = 0; var2 < 256; ++var2) {
-            var3 = this.field_1138_g[var2 - this.field_1134_k * 16 & 255];
-            if(var3 > 1.0F) {
-                var3 = 1.0F;
-            }
-
-            if(var3 < 0.0F) {
-                var3 = 0.0F;
-            }
-
-            float var13 = var3 * var3;
-            var5 = (int)(32.0F + var13 * 32.0F);
-            var6 = (int)(50.0F + var13 * 64.0F);
-            int var7 = 255;
-            int var8 = (int)(146.0F + var13 * 50.0F);
-            if(this.field_1131_c) {
-                int var9 = (var5 * 30 + var6 * 59 + var7 * 11) / 100;
-                int var10 = (var5 * 30 + var6 * 70) / 100;
-                int var11 = (var5 * 30 + var7 * 70) / 100;
-                var5 = var9;
-                var6 = var10;
-                var7 = var11;
-            }
-
-            this.field_1127_a[var2 * 4 + 0] = (byte)var5;
-            this.field_1127_a[var2 * 4 + 1] = (byte)var6;
-            this.field_1127_a[var2 * 4 + 2] = (byte)var7;
-            this.field_1127_a[var2 * 4 + 3] = (byte)var8;
+        field_1134_k++;
+        for (int i = 0; i < 16; i++) {
+            for (int k = 0; k < 16; k++) {
+                float f = 0.0F;
+                for (int j1 = k - 2; j1 <= k; j1++) {
+                    int k1 = i & 0xf;
+                    int i2 = j1 & 0xf;
+                    f += field_1138_g[k1 + i2 * 16];
+                }
+
+                field_1137_h[i + k * 16] = f / 3.2F + field_1136_i[i + k * 16] * 0.8F;
+            }
+
+        }
+
+        for (int j = 0; j < 16; j++) {
+            for (int l = 0; l < 16; l++) {
+                field_1136_i[j + l * 16] += field_1135_j[j + l * 16] * 0.05F;
+                if (field_1136_i[j + l * 16] < 0.0F) {
+                    field_1136_i[j + l * 16] = 0.0F;
+                }
+                field_1135_j[j + l * 16] -= 0.3F;
+                if (Math.random() < 0.20000000000000001D) {
+                    field_1135_j[j + l * 16] = 0.5F;
+                }
+            }
+
+        }
+
+        float[] af = field_1137_h;
+        field_1137_h = field_1138_g;
+        field_1138_g = af;
+        for (int i1 = 0; i1 < 256; i1++) {
+            float f1 = field_1138_g[i1 - field_1134_k * 16 & 0xff];
+            if (f1 > 1.0F) {
+                f1 = 1.0F;
+            }
+            if (f1 < 0.0F) {
+                f1 = 0.0F;
+            }
+            float f2 = f1 * f1;
+            int l1 = (int) (32F + f2 * 32F);
+            int j2 = (int) (50F + f2 * 64F);
+            int k2 = 255;
+            int l2 = (int) (146F + f2 * 50F);
+            if (field_1131_c) {
+                int i3 = (l1 * 30 + j2 * 59 + k2 * 11) / 100;
+                int j3 = (l1 * 30 + j2 * 70) / 100;
+                int k3 = (l1 * 30 + k2 * 70) / 100;
+                l1 = i3;
+                j2 = j3;
+                k2 = k3;
+            }
+            field_1127_a[i1 * 4] = (byte) l1;
+            field_1127_a[i1 * 4 + 1] = (byte) j2;
+            field_1127_a[i1 * 4 + 2] = (byte) k2;
+            field_1127_a[i1 * 4 + 3] = (byte) l2;
         }
 
     }
