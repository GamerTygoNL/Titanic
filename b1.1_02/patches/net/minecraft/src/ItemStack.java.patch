--- net/minecraft/src/ItemStack.java
+++ net/minecraft/src/ItemStack.java
@@ -1,148 +1,160 @@
 package net.minecraft.src;
 
 public final class ItemStack {
+
     public int stackSize;
     public int animationsToGo;
     public int itemID;
     public int itemDamage;
 
-    public ItemStack(Block var1) {
-        this((Block)var1, 1);
-    }
-
-    public ItemStack(Block var1, int var2) {
-        this(var1.blockID, var2);
-    }
-
-    public ItemStack(Item var1) {
-        this((Item)var1, 1);
-    }
-
-    public ItemStack(Item var1, int var2) {
-        this(var1.shiftedIndex, var2);
-    }
-
-    public ItemStack(int var1) {
-        this(var1, 1);
-    }
-
-    public ItemStack(int var1, int var2) {
-        this.stackSize = 0;
-        this.itemID = var1;
-        this.stackSize = var2;
-    }
-
-    public ItemStack(int var1, int var2, int var3) {
-        this.stackSize = 0;
-        this.itemID = var1;
-        this.stackSize = var2;
-        this.itemDamage = var3;
-    }
-
-    public ItemStack(NBTTagCompound var1) {
-        this.stackSize = 0;
-        this.readFromNBT(var1);
-    }
-
-    public ItemStack splitStack(int var1) {
-        this.stackSize -= var1;
-        return new ItemStack(this.itemID, var1, this.itemDamage);
+    public ItemStack(Block block) {
+        this(block, 1);
+    }
+
+    public ItemStack(Block block, int i) {
+        this(block.blockID, i);
+    }
+
+    public ItemStack(Item item) {
+        this(item, 1);
+    }
+
+    public ItemStack(Item item, int i) {
+        this(item.shiftedIndex, i);
+    }
+
+    public ItemStack(int i) {
+        this(i, 1);
+    }
+
+    public ItemStack(int i, int j) {
+        stackSize = 0;
+        itemID = i;
+        stackSize = j;
+    }
+
+    public ItemStack(int i, int j, int k) {
+        stackSize = 0;
+        itemID = i;
+        stackSize = j;
+        itemDamage = k;
+    }
+
+    public ItemStack(NBTTagCompound nbttagcompound) {
+        stackSize = 0;
+        readFromNBT(nbttagcompound);
+    }
+
+    public static boolean func_20107_a(ItemStack itemstack, ItemStack itemstack1) {
+        if (itemstack == null && itemstack1 == null) {
+            return true;
+        }
+        if (itemstack == null || itemstack1 == null) {
+            return false;
+        } else {
+            return itemstack.func_20108_a(itemstack1);
+        }
+    }
+
+    public ItemStack splitStack(int i) {
+        stackSize -= i;
+        return new ItemStack(itemID, i, itemDamage);
     }
 
     public Item getItem() {
-        return Item.itemsList[this.itemID];
+        return Item.itemsList[itemID];
     }
 
     public int getIconIndex() {
-        return this.getItem().getIconIndex(this);
-    }
-
-    public boolean useItem(EntityPlayer var1, World var2, int var3, int var4, int var5, int var6) {
-        return this.getItem().onItemUse(this, var1, var2, var3, var4, var5, var6);
-    }
-
-    public float getStrVsBlock(Block var1) {
-        return this.getItem().getStrVsBlock(this, var1);
-    }
-
-    public ItemStack useItemRightClick(World var1, EntityPlayer var2) {
-        return this.getItem().onItemRightClick(this, var1, var2);
-    }
-
-    public NBTTagCompound writeToNBT(NBTTagCompound var1) {
-        var1.setShort("id", (short)this.itemID);
-        var1.setByte("Count", (byte)this.stackSize);
-        var1.setShort("Damage", (short)this.itemDamage);
-        return var1;
-    }
-
-    public void readFromNBT(NBTTagCompound var1) {
-        this.itemID = var1.getShort("id");
-        this.stackSize = var1.getByte("Count");
-        this.itemDamage = var1.getShort("Damage");
+        return getItem().getIconIndex(this);
+    }
+
+    public boolean useItem(EntityPlayer entityplayer, World world, int i, int j, int k, int l) {
+        return getItem().onItemUse(this, entityplayer, world, i, j, k, l);
+    }
+
+    public float getStrVsBlock(Block block) {
+        return getItem().getStrVsBlock(this, block);
+    }
+
+    public ItemStack useItemRightClick(World world, EntityPlayer entityplayer) {
+        return getItem().onItemRightClick(this, world, entityplayer);
+    }
+
+    public NBTTagCompound writeToNBT(NBTTagCompound nbttagcompound) {
+        nbttagcompound.setShort("id", (short) itemID);
+        nbttagcompound.setByte("Count", (byte) stackSize);
+        nbttagcompound.setShort("Damage", (short) itemDamage);
+        return nbttagcompound;
+    }
+
+    public void readFromNBT(NBTTagCompound nbttagcompound) {
+        itemID = nbttagcompound.getShort("id");
+        stackSize = nbttagcompound.getByte("Count");
+        itemDamage = nbttagcompound.getShort("Damage");
     }
 
     public int getMaxStackSize() {
-        return this.getItem().getItemStackLimit();
+        return getItem().getItemStackLimit();
     }
 
     public int getMaxDamage() {
-        return Item.itemsList[this.itemID].getMaxDamage();
+        return Item.itemsList[itemID].getMaxDamage();
     }
 
-    public void damageItem(int var1) {
-        this.itemDamage += var1;
-        if(this.itemDamage > this.getMaxDamage()) {
-            --this.stackSize;
-            if(this.stackSize < 0) {
-                this.stackSize = 0;
+    public void damageItem(int i) {
+        itemDamage += i;
+        if (itemDamage > getMaxDamage()) {
+            stackSize--;
+            if (stackSize < 0) {
+                stackSize = 0;
             }
-
-            this.itemDamage = 0;
+            itemDamage = 0;
         }
-
-    }
-
-    public void hitEntity(EntityLiving var1) {
-        Item.itemsList[this.itemID].hitEntity(this, var1);
-    }
-
-    public void hitBlock(int var1, int var2, int var3, int var4) {
-        Item.itemsList[this.itemID].hitBlock(this, var1, var2, var3, var4);
-    }
-
-    public int getDamageVsEntity(Entity var1) {
-        return Item.itemsList[this.itemID].getDamageVsEntity(var1);
-    }
-
-    public boolean canHarvestBlock(Block var1) {
-        return Item.itemsList[this.itemID].canHarvestBlock(var1);
-    }
-
-    public void func_1097_a(EntityPlayer var1) {
-    }
-
-    public void useItemOnEntity(EntityLiving var1) {
-        Item.itemsList[this.itemID].func_4019_b(this, var1);
+    }
+
+    public void hitEntity(EntityLiving entityliving) {
+        Item.itemsList[itemID].hitEntity(this, entityliving);
+    }
+
+    public void hitBlock(int i, int j, int k, int l) {
+        Item.itemsList[itemID].hitBlock(this, i, j, k, l);
+    }
+
+    public int getDamageVsEntity(Entity entity) {
+        return Item.itemsList[itemID].getDamageVsEntity(entity);
+    }
+
+    public boolean canHarvestBlock(Block block) {
+        return Item.itemsList[itemID].canHarvestBlock(block);
+    }
+
+    public void func_1097_a(EntityPlayer entityplayer) {
+    }
+
+    public void useItemOnEntity(EntityLiving entityliving) {
+        Item.itemsList[itemID].func_4019_b(this, entityliving);
     }
 
     public ItemStack copy() {
-        return new ItemStack(this.itemID, this.stackSize, this.itemDamage);
-    }
-
-    public static boolean func_20107_a(ItemStack var0, ItemStack var1) {
-        return var0 == null && var1 == null ? true : (var0 != null && var1 != null ? var0.func_20108_a(var1) : false);
-    }
-
-    private boolean func_20108_a(ItemStack var1) {
-        return this.stackSize != var1.stackSize ? false : (this.itemID != var1.itemID ? false : this.itemDamage == var1.itemDamage);
+        return new ItemStack(itemID, stackSize, itemDamage);
+    }
+
+    public boolean func_20108_a(ItemStack itemstack) {
+        if (stackSize != itemstack.stackSize) {
+            return false;
+        }
+        if (itemID != itemstack.itemID) {
+            return false;
+        }
+        return itemDamage == itemstack.itemDamage;
     }
 
     public String func_20109_f() {
-        return Item.itemsList[this.itemID].func_20009_a();
+        return Item.itemsList[itemID].func_20009_a();
     }
 
     public String toString() {
-        return this.stackSize + "x" + Item.itemsList[this.itemID].func_20009_a() + "@" + this.itemDamage;
+        return stackSize + "x" + Item.itemsList[itemID].func_20009_a() + "@" + itemDamage;
     }
 }
