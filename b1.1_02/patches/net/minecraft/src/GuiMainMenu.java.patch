--- net/minecraft/src/GuiMainMenu.java
+++ net/minecraft/src/GuiMainMenu.java
@@ -1,230 +1,231 @@
 package net.minecraft.src;
 
+import cc.noxiuam.titanic.Ref;
+import cc.noxiuam.titanic.event.impl.gui.MainMenuLogoDrawEvent;
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.util.glu.GLU;
+
 import java.io.BufferedReader;
 import java.io.InputStreamReader;
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.Random;
-import org.lwjgl.opengl.GL11;
-import org.lwjgl.util.glu.GLU;
 
 public class GuiMainMenu extends GuiScreen {
+
     private static final Random rand = new Random();
-    String[] minecraftLogo = new String[]{" *   * * *   * *** *** *** *** *** ***", " ** ** * **  * *   *   * * * * *    * ", " * * * * * * * **  *   **  *** **   * ", " *   * * *  ** *   *   * * * * *    * ", " *   * * *   * *** *** * * * * *    * "};
-    private LogoEffectRandomizer[][] logoEffects;
-    private float updateCounter = 0.0F;
-    private String splashText = "missingno";
+    String minecraftLogo[] = {
+            " *   * * *   * *** *** *** *** *** ***", " ** ** * **  * *   *   * * * * *    * ", " * * * * * * * **  *   **  *** **   * ", " *   * * *  ** *   *   * * * * *    * ", " *   * * *   * *** *** * * * * *    * "
+    };
+    private LogoEffectRandomizer logoEffects[][];
+    private float updateCounter;
+    private String splashText;
 
     public GuiMainMenu() {
+        updateCounter = 0.0F;
+        splashText = "missingno";
         try {
-            ArrayList var1 = new ArrayList();
-            BufferedReader var2 = new BufferedReader(new InputStreamReader(GuiMainMenu.class.getResourceAsStream("/title/splashes.txt")));
-            String var3 = "";
-
-            while(true) {
-                var3 = var2.readLine();
-                if(var3 == null) {
-                    this.splashText = (String)var1.get(rand.nextInt(var1.size()));
+            ArrayList arraylist = new ArrayList();
+            BufferedReader bufferedreader = new BufferedReader(new InputStreamReader((GuiMainMenu.class).getResourceAsStream("/title/splashes.txt")));
+            String s = "";
+            do {
+                String s1;
+                if ((s1 = bufferedreader.readLine()) == null) {
                     break;
                 }
-
-                var3 = var3.trim();
-                if(var3.length() > 0) {
-                    var1.add(var3);
+                s1 = s1.trim();
+                if (s1.length() > 0) {
+                    arraylist.add(s1);
                 }
-            }
-        } catch (Exception var4) {
+            } while (true);
+            splashText = (String) arraylist.get(rand.nextInt(arraylist.size()));
+        } catch (Exception exception) {
         }
+        //splashText = "Finally beta!";
+    }
 
-        this.splashText = "Finally beta!";
+    static Random getRand() {
+        return rand;
     }
 
     public void updateScreen() {
-        ++this.updateCounter;
-        if(this.logoEffects != null) {
-            for(int var1 = 0; var1 < this.logoEffects.length; ++var1) {
-                for(int var2 = 0; var2 < this.logoEffects[var1].length; ++var2) {
-                    this.logoEffects[var1][var2].func_875_a();
+        updateCounter++;
+        if (logoEffects != null) {
+            for (int i = 0; i < logoEffects.length; i++) {
+                for (int j = 0; j < logoEffects[i].length; j++) {
+                    logoEffects[i][j].func_875_a();
                 }
+
             }
+
         }
-
     }
 
-    protected void keyTyped(char var1, int var2) {
+    protected void keyTyped(char c, int i) {
     }
 
     public void initGui() {
-        Calendar var1 = Calendar.getInstance();
-        var1.setTime(new Date());
-        if(var1.get(2) + 1 == 11 && var1.get(5) == 9) {
-            this.splashText = "Happy birthday, ez!";
-        } else if(var1.get(2) + 1 == 6 && var1.get(5) == 1) {
-            this.splashText = "Happy birthday, Notch!";
-        } else if(var1.get(2) + 1 == 12 && var1.get(5) == 24) {
-            this.splashText = "Merry X-mas!";
-        } else if(var1.get(2) + 1 == 1 && var1.get(5) == 1) {
-            this.splashText = "Happy new year!";
+        Calendar calendar = Calendar.getInstance();
+        calendar.setTime(new Date());
+        if (calendar.get(2) + 1 == 11 && calendar.get(5) == 9) {
+            splashText = "Happy birthday, ez!";
+        } else if (calendar.get(2) + 1 == 6 && calendar.get(5) == 1) {
+            splashText = "Happy birthday, Notch!";
+        } else if (calendar.get(2) + 1 == 12 && calendar.get(5) == 24) {
+            splashText = "Merry X-mas!";
+        } else if (calendar.get(2) + 1 == 1 && calendar.get(5) == 1) {
+            splashText = "Happy new year!";
         }
-
-        StringTranslate var2 = StringTranslate.func_20162_a();
-        int var4 = this.height / 4 + 48;
-        this.controlList.add(new GuiButton(1, this.width / 2 - 100, var4, var2.func_20163_a("menu.singleplayer")));
-        this.controlList.add(new GuiButton(2, this.width / 2 - 100, var4 + 24, var2.func_20163_a("menu.multiplayer")));
-        this.controlList.add(new GuiButton(3, this.width / 2 - 100, var4 + 48, var2.func_20163_a("menu.mods")));
-        if(this.mc.field_6317_l) {
-            this.controlList.add(new GuiButton(0, this.width / 2 - 100, var4 + 72, var2.func_20163_a("menu.options")));
+        StringTranslate stringtranslate = StringTranslate.func_20162_a();
+        int i = height / 4 + 48;
+        controlList.add(new GuiButton(1, width / 2 - 100, i, stringtranslate.func_20163_a("menu.singleplayer")));
+        controlList.add(new GuiButton(2, width / 2 - 100, i + 24, stringtranslate.func_20163_a("menu.multiplayer")));
+        controlList.add(new GuiButton(3, width / 2 - 100, i + 48, stringtranslate.func_20163_a("menu.mods")));
+        if (mc.field_6317_l) {
+            controlList.add(new GuiButton(0, width / 2 - 100, i + 72, stringtranslate.func_20163_a("menu.options")));
         } else {
-            this.controlList.add(new GuiButton(0, this.width / 2 - 100, var4 + 72 + 12, 98, 20, var2.func_20163_a("menu.options")));
-            this.controlList.add(new GuiButton(4, this.width / 2 + 2, var4 + 72 + 12, 98, 20, var2.func_20163_a("menu.quit")));
-        }
-
-        if(this.mc.session == null) {
-            ((GuiButton)this.controlList.get(1)).enabled = false;
-        }
-
-    }
-
-    protected void actionPerformed(GuiButton var1) {
-        if(var1.id == 0) {
-            this.mc.displayGuiScreen(new GuiOptions(this, this.mc.gameSettings));
-        }
-
-        if(var1.id == 1) {
-            this.mc.displayGuiScreen(new GuiSelectWorld(this));
-        }
-
-        if(var1.id == 2) {
-            this.mc.displayGuiScreen(new GuiMultiplayer(this));
-        }
-
-        if(var1.id == 3) {
-            this.mc.displayGuiScreen(new GuiTexturePacks(this));
-        }
-
-        if(var1.id == 4) {
-            this.mc.shutdown();
-        }
-
-    }
-
-    public void drawScreen(int var1, int var2, float var3) {
-        this.drawDefaultBackground();
-        Tessellator var4 = Tessellator.instance;
-        this.drawLogo(var3);
-        GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/logo.png"));
-        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-        var4.setColorOpaque_I(16777215);
+            controlList.add(new GuiButton(0, width / 2 - 100, i + 72 + 12, 98, 20, stringtranslate.func_20163_a("menu.options")));
+            controlList.add(new GuiButton(4, width / 2 + 2, i + 72 + 12, 98, 20, stringtranslate.func_20163_a("menu.quit")));
+        }
+        if (mc.session == null) {
+            ((GuiButton) controlList.get(1)).enabled = false;
+        }
+    }
+
+    protected void actionPerformed(GuiButton guibutton) {
+        if (guibutton.id == 0) {
+            mc.displayGuiScreen(new GuiOptions(this, mc.gameSettings));
+        }
+        if (guibutton.id == 1) {
+            mc.displayGuiScreen(new GuiSelectWorld(this));
+        }
+        if (guibutton.id == 2) {
+            mc.displayGuiScreen(new GuiMultiplayer(this));
+        }
+        if (guibutton.id == 3) {
+            mc.displayGuiScreen(new GuiTexturePacks(this));
+        }
+        if (guibutton.id == 4) {
+            mc.shutdown();
+        }
+    }
+
+    public void drawScreen(int i, int j, float f) {
+        drawDefaultBackground();
+
+        MainMenuLogoDrawEvent event = new MainMenuLogoDrawEvent(this);
+        Ref.getEventManager().handleEvent(event);
+
+        if (!event.isCancelled()) {
+            Tessellator tessellator = Tessellator.instance;
+            drawLogo(f);
+            GL11.glBindTexture(3553 /*GL_TEXTURE_2D*/, mc.renderEngine.getTexture("/gui/logo.png"));
+            GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+            tessellator.setColorOpaque_I(0xffffff);
+        }
+
         GL11.glPushMatrix();
-        GL11.glTranslatef((float)(this.width / 2 + 90), 70.0F, 0.0F);
-        GL11.glRotatef(-20.0F, 0.0F, 0.0F, 1.0F);
-        float var5 = 1.8F - MathHelper.abs(MathHelper.sin((float)(System.currentTimeMillis() % 1000L) / 1000.0F * (float)Math.PI * 2.0F) * 0.1F);
-        var5 = var5 * 100.0F / (float)(this.fontRenderer.getStringWidth(this.splashText) + 32);
-        GL11.glScalef(var5, var5, var5);
-        this.drawCenteredString(this.fontRenderer, this.splashText, 0, -8, 16776960);
+        GL11.glTranslatef(width / 2 + 90, 70F, 0.0F);
+        GL11.glRotatef(-20F, 0.0F, 0.0F, 1.0F);
+        float f1 = 1.8F - MathHelper.abs(MathHelper.sin(((float) (System.currentTimeMillis() % 1000L) / 1000F) * 3.141593F * 2.0F) * 0.1F);
+        f1 = (f1 * 100F) / (float) (fontRenderer.getStringWidth(splashText) + 32);
+        GL11.glScalef(f1, f1, f1);
+        drawCenteredString(fontRenderer, splashText, 0, -8, 0xffff00);
         GL11.glPopMatrix();
-        this.drawString(this.fontRenderer, "Minecraft Beta 1.1_02", 2, 2, 5263440);
-        String var6 = "Copyright Mojang AB. Do not distribute.";
-        this.drawString(this.fontRenderer, var6, this.width - this.fontRenderer.getStringWidth(var6) - 2, this.height - 10, 16777215);
-        super.drawScreen(var1, var2, var3);
+        drawString(fontRenderer, "Minecraft Beta 1.1_02", 2, 2, 0x505050);
+        String s = "Copyright Mojang AB. Do not distribute.";
+        drawString(fontRenderer, s, width - fontRenderer.getStringWidth(s) - 2, height - 10, 0xffffff);
+        super.drawScreen(i, j, f);
     }
 
-    private void drawLogo(float var1) {
-        int var3;
-        if(this.logoEffects == null) {
-            this.logoEffects = new LogoEffectRandomizer[this.minecraftLogo[0].length()][this.minecraftLogo.length];
-
-            for(int var2 = 0; var2 < this.logoEffects.length; ++var2) {
-                for(var3 = 0; var3 < this.logoEffects[var2].length; ++var3) {
-                    this.logoEffects[var2][var3] = new LogoEffectRandomizer(this, var2, var3);
+    private void drawLogo(float f) {
+        if (logoEffects == null) {
+            logoEffects = new LogoEffectRandomizer[minecraftLogo[0].length()][minecraftLogo.length];
+            for (int i = 0; i < logoEffects.length; i++) {
+                for (int j = 0; j < logoEffects[i].length; j++) {
+                    logoEffects[i][j] = new LogoEffectRandomizer(this, i, j);
                 }
+
             }
-        }
 
-        GL11.glMatrixMode(GL11.GL_PROJECTION);
-        GL11.glPushMatrix();
-        GL11.glLoadIdentity();
-        ScaledResolution var14 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
-        var3 = 120 * var14.scaleFactor;
-        GLU.gluPerspective(70.0F, (float)this.mc.displayWidth / (float)var3, 0.05F, 100.0F);
-        GL11.glViewport(0, this.mc.displayHeight - var3, this.mc.displayWidth, var3);
-        GL11.glMatrixMode(GL11.GL_MODELVIEW);
-        GL11.glPushMatrix();
-        GL11.glLoadIdentity();
-        GL11.glDisable(GL11.GL_CULL_FACE);
-        GL11.glCullFace(GL11.GL_BACK);
+        }
+        GL11.glMatrixMode(5889 /*GL_PROJECTION*/);
+        GL11.glPushMatrix();
+        GL11.glLoadIdentity();
+        ScaledResolution scaledresolution = new ScaledResolution(mc.displayWidth, mc.displayHeight);
+        int k = 120 * scaledresolution.scaleFactor;
+        GLU.gluPerspective(70F, (float) mc.displayWidth / (float) k, 0.05F, 100F);
+        GL11.glViewport(0, mc.displayHeight - k, mc.displayWidth, k);
+        GL11.glMatrixMode(5888 /*GL_MODELVIEW0_ARB*/);
+        GL11.glPushMatrix();
+        GL11.glLoadIdentity();
+        GL11.glDisable(2884 /*GL_CULL_FACE*/);
+        GL11.glCullFace(1029 /*GL_BACK*/);
         GL11.glDepthMask(true);
-        RenderBlocks var4 = new RenderBlocks();
-
-        for(int var5 = 0; var5 < 3; ++var5) {
+        RenderBlocks renderblocks = new RenderBlocks();
+        for (int l = 0; l < 3; l++) {
             GL11.glPushMatrix();
-            GL11.glTranslatef(0.4F, 0.6F, -13.0F);
-            if(var5 == 0) {
-                GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
+            GL11.glTranslatef(0.4F, 0.6F, -13F);
+            if (l == 0) {
+                GL11.glClear(256);
                 GL11.glTranslatef(0.0F, -0.4F, 0.0F);
                 GL11.glScalef(0.98F, 1.0F, 1.0F);
-                GL11.glEnable(GL11.GL_BLEND);
-                GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-            }
-
-            if(var5 == 1) {
-                GL11.glDisable(GL11.GL_BLEND);
-                GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
-            }
-
-            if(var5 == 2) {
-                GL11.glEnable(GL11.GL_BLEND);
-                GL11.glBlendFunc(GL11.GL_SRC_COLOR, GL11.GL_ONE);
-            }
-
-            GL11.glScalef(1.0F, -1.0F, 1.0F);
-            GL11.glRotatef(15.0F, 1.0F, 0.0F, 0.0F);
+                GL11.glEnable(3042 /*GL_BLEND*/);
+                GL11.glBlendFunc(770, 771);
+            }
+            if (l == 1) {
+                GL11.glDisable(3042 /*GL_BLEND*/);
+                GL11.glClear(256);
+            }
+            if (l == 2) {
+                GL11.glEnable(3042 /*GL_BLEND*/);
+                GL11.glBlendFunc(768, 1);
+            }
+            GL11.glScalef(1.0F, -1F, 1.0F);
+            GL11.glRotatef(15F, 1.0F, 0.0F, 0.0F);
             GL11.glScalef(0.89F, 1.0F, 0.4F);
-            GL11.glTranslatef((float)(-this.minecraftLogo[0].length()) * 0.5F, (float)(-this.minecraftLogo.length) * 0.5F, 0.0F);
-            GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/terrain.png"));
-            if(var5 == 0) {
-                GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/title/black.png"));
+            GL11.glTranslatef((float) (-minecraftLogo[0].length()) * 0.5F, (float) (-minecraftLogo.length) * 0.5F, 0.0F);
+            GL11.glBindTexture(3553 /*GL_TEXTURE_2D*/, mc.renderEngine.getTexture("/terrain.png"));
+            if (l == 0) {
+                GL11.glBindTexture(3553 /*GL_TEXTURE_2D*/, mc.renderEngine.getTexture("/title/black.png"));
             }
-
-            for(int var6 = 0; var6 < this.minecraftLogo.length; ++var6) {
-                for(int var7 = 0; var7 < this.minecraftLogo[var6].length(); ++var7) {
-                    char var8 = this.minecraftLogo[var6].charAt(var7);
-                    if(var8 != 32) {
-                        GL11.glPushMatrix();
-                        LogoEffectRandomizer var9 = this.logoEffects[var7][var6];
-                        float var10 = (float)(var9.field_1311_b + (var9.field_1312_a - var9.field_1311_b) * (double)var1);
-                        float var11 = 1.0F;
-                        float var12 = 1.0F;
-                        float var13 = 0.0F;
-                        if(var5 == 0) {
-                            var11 = var10 * 0.04F + 1.0F;
-                            var12 = 1.0F / var11;
-                            var10 = 0.0F;
-                        }
-
-                        GL11.glTranslatef((float)var7, (float)var6, var10);
-                        GL11.glScalef(var11, var11, var11);
-                        GL11.glRotatef(var13, 0.0F, 1.0F, 0.0F);
-                        var4.func_1238_a(Block.stone, var12);
-                        GL11.glPopMatrix();
-                    }
+            for (int i1 = 0; i1 < minecraftLogo.length; i1++) {
+                for (int j1 = 0; j1 < minecraftLogo[i1].length(); j1++) {
+                    char c = minecraftLogo[i1].charAt(j1);
+                    if (c == ' ') {
+                        continue;
+                    }
+                    GL11.glPushMatrix();
+                    LogoEffectRandomizer logoeffectrandomizer = logoEffects[j1][i1];
+                    float f1 = (float) (logoeffectrandomizer.field_1311_b + (logoeffectrandomizer.field_1312_a - logoeffectrandomizer.field_1311_b) * (double) f);
+                    float f2 = 1.0F;
+                    float f3 = 1.0F;
+                    float f4 = 0.0F;
+                    if (l == 0) {
+                        f2 = f1 * 0.04F + 1.0F;
+                        f3 = 1.0F / f2;
+                        f1 = 0.0F;
+                    }
+                    GL11.glTranslatef(j1, i1, f1);
+                    GL11.glScalef(f2, f2, f2);
+                    GL11.glRotatef(f4, 0.0F, 1.0F, 0.0F);
+                    renderblocks.func_1238_a(Block.stone, f3);
+                    GL11.glPopMatrix();
                 }
+
             }
 
             GL11.glPopMatrix();
         }
 
-        GL11.glDisable(GL11.GL_BLEND);
-        GL11.glMatrixMode(GL11.GL_PROJECTION);
-        GL11.glPopMatrix();
-        GL11.glMatrixMode(GL11.GL_MODELVIEW);
-        GL11.glPopMatrix();
-        GL11.glViewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
-        GL11.glEnable(GL11.GL_CULL_FACE);
+        GL11.glDisable(3042 /*GL_BLEND*/);
+        GL11.glMatrixMode(5889 /*GL_PROJECTION*/);
+        GL11.glPopMatrix();
+        GL11.glMatrixMode(5888 /*GL_MODELVIEW0_ARB*/);
+        GL11.glPopMatrix();
+        GL11.glViewport(0, 0, mc.displayWidth, mc.displayHeight);
+        GL11.glEnable(2884 /*GL_CULL_FACE*/);
     }
 
-    static Random getRand() {
-        return rand;
-    }
 }
