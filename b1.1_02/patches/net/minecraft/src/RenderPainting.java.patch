--- net/minecraft/src/RenderPainting.java
+++ net/minecraft/src/RenderPainting.java
@@ -1,119 +1,122 @@
 package net.minecraft.src;
 
-import java.util.Random;
 import org.lwjgl.opengl.GL11;
-import org.lwjgl.opengl.GL12;
+
+import java.util.Random;
 
 public class RenderPainting extends Render {
-    private Random rand = new Random();
-
-    public void a(EntityPainting var1, double var2, double var4, double var6, float var8, float var9) {
-        this.rand.setSeed(187L);
+
+    private final Random rand;
+
+    public RenderPainting() {
+        rand = new Random();
+    }
+
+    public void func_158_a(EntityPainting entitypainting, double d, double d1, double d2,
+                           float f, float f1) {
+        rand.setSeed(187L);
         GL11.glPushMatrix();
-        GL11.glTranslatef((float)var2, (float)var4, (float)var6);
-        GL11.glRotatef(var8, 0.0F, 1.0F, 0.0F);
-        GL11.glEnable(GL12.GL_RESCALE_NORMAL);
-        this.loadTexture("/art/kz.png");
-        EnumArt var10 = var1.field_690_b;
-        float var11 = 1.0F / 16.0F;
-        GL11.glScalef(var11, var11, var11);
-        this.func_159_a(var1, var10.field_1623_z, var10.field_1636_A, var10.field_1634_B, var10.field_1632_C);
-        GL11.glDisable(GL12.GL_RESCALE_NORMAL);
+        GL11.glTranslatef((float) d, (float) d1, (float) d2);
+        GL11.glRotatef(f, 0.0F, 1.0F, 0.0F);
+        GL11.glEnable(32826 /*GL_RESCALE_NORMAL_EXT*/);
+        loadTexture("/art/kz.png");
+        EnumArt enumart = entitypainting.field_690_b;
+        float f2 = 0.0625F;
+        GL11.glScalef(f2, f2, f2);
+        func_159_a(entitypainting, enumart.field_1623_z, enumart.field_1636_A, enumart.field_1634_B, enumart.field_1632_C);
+        GL11.glDisable(32826 /*GL_RESCALE_NORMAL_EXT*/);
         GL11.glPopMatrix();
     }
 
-    private void func_159_a(EntityPainting var1, int var2, int var3, int var4, int var5) {
-        float var6 = (float)(-var2) / 2.0F;
-        float var7 = (float)(-var3) / 2.0F;
-        float var8 = -0.5F;
-        float var9 = 0.5F;
-
-        for(int var10 = 0; var10 < var2 / 16; ++var10) {
-            for(int var11 = 0; var11 < var3 / 16; ++var11) {
-                float var12 = var6 + (float)((var10 + 1) * 16);
-                float var13 = var6 + (float)(var10 * 16);
-                float var14 = var7 + (float)((var11 + 1) * 16);
-                float var15 = var7 + (float)(var11 * 16);
-                this.func_160_a(var1, (var12 + var13) / 2.0F, (var14 + var15) / 2.0F);
-                float var16 = (float)(var4 + var2 - var10 * 16) / 256.0F;
-                float var17 = (float)(var4 + var2 - (var10 + 1) * 16) / 256.0F;
-                float var18 = (float)(var5 + var3 - var11 * 16) / 256.0F;
-                float var19 = (float)(var5 + var3 - (var11 + 1) * 16) / 256.0F;
-                float var20 = 12.0F / 16.0F;
-                float var21 = 13.0F / 16.0F;
-                float var22 = 0.0F;
-                float var23 = 1.0F / 16.0F;
-                float var24 = 12.0F / 16.0F;
-                float var25 = 13.0F / 16.0F;
-                float var26 = 0.001953125F;
-                float var27 = 0.001953125F;
-                float var28 = 385.0F / 512.0F;
-                float var29 = 385.0F / 512.0F;
-                float var30 = 0.0F;
-                float var31 = 1.0F / 16.0F;
-                Tessellator var32 = Tessellator.instance;
-                var32.startDrawingQuads();
-                var32.setNormal(0.0F, 0.0F, -1.0F);
-                var32.addVertexWithUV((double)var12, (double)var15, (double)var8, (double)var17, (double)var18);
-                var32.addVertexWithUV((double)var13, (double)var15, (double)var8, (double)var16, (double)var18);
-                var32.addVertexWithUV((double)var13, (double)var14, (double)var8, (double)var16, (double)var19);
-                var32.addVertexWithUV((double)var12, (double)var14, (double)var8, (double)var17, (double)var19);
-                var32.setNormal(0.0F, 0.0F, 1.0F);
-                var32.addVertexWithUV((double)var12, (double)var14, (double)var9, (double)var20, (double)var22);
-                var32.addVertexWithUV((double)var13, (double)var14, (double)var9, (double)var21, (double)var22);
-                var32.addVertexWithUV((double)var13, (double)var15, (double)var9, (double)var21, (double)var23);
-                var32.addVertexWithUV((double)var12, (double)var15, (double)var9, (double)var20, (double)var23);
-                var32.setNormal(0.0F, -1.0F, 0.0F);
-                var32.addVertexWithUV((double)var12, (double)var14, (double)var8, (double)var24, (double)var26);
-                var32.addVertexWithUV((double)var13, (double)var14, (double)var8, (double)var25, (double)var26);
-                var32.addVertexWithUV((double)var13, (double)var14, (double)var9, (double)var25, (double)var27);
-                var32.addVertexWithUV((double)var12, (double)var14, (double)var9, (double)var24, (double)var27);
-                var32.setNormal(0.0F, 1.0F, 0.0F);
-                var32.addVertexWithUV((double)var12, (double)var15, (double)var9, (double)var24, (double)var26);
-                var32.addVertexWithUV((double)var13, (double)var15, (double)var9, (double)var25, (double)var26);
-                var32.addVertexWithUV((double)var13, (double)var15, (double)var8, (double)var25, (double)var27);
-                var32.addVertexWithUV((double)var12, (double)var15, (double)var8, (double)var24, (double)var27);
-                var32.setNormal(-1.0F, 0.0F, 0.0F);
-                var32.addVertexWithUV((double)var12, (double)var14, (double)var9, (double)var29, (double)var30);
-                var32.addVertexWithUV((double)var12, (double)var15, (double)var9, (double)var29, (double)var31);
-                var32.addVertexWithUV((double)var12, (double)var15, (double)var8, (double)var28, (double)var31);
-                var32.addVertexWithUV((double)var12, (double)var14, (double)var8, (double)var28, (double)var30);
-                var32.setNormal(1.0F, 0.0F, 0.0F);
-                var32.addVertexWithUV((double)var13, (double)var14, (double)var8, (double)var29, (double)var30);
-                var32.addVertexWithUV((double)var13, (double)var15, (double)var8, (double)var29, (double)var31);
-                var32.addVertexWithUV((double)var13, (double)var15, (double)var9, (double)var28, (double)var31);
-                var32.addVertexWithUV((double)var13, (double)var14, (double)var9, (double)var28, (double)var30);
-                var32.draw();
+    private void func_159_a(EntityPainting entitypainting, int i, int j, int k, int l) {
+        float f = (float) (-i) / 2.0F;
+        float f1 = (float) (-j) / 2.0F;
+        float f2 = -0.5F;
+        float f3 = 0.5F;
+        for (int i1 = 0; i1 < i / 16; i1++) {
+            for (int j1 = 0; j1 < j / 16; j1++) {
+                float f4 = f + (float) ((i1 + 1) * 16);
+                float f5 = f + (float) (i1 * 16);
+                float f6 = f1 + (float) ((j1 + 1) * 16);
+                float f7 = f1 + (float) (j1 * 16);
+                func_160_a(entitypainting, (f4 + f5) / 2.0F, (f6 + f7) / 2.0F);
+                float f8 = (float) ((k + i) - i1 * 16) / 256F;
+                float f9 = (float) ((k + i) - (i1 + 1) * 16) / 256F;
+                float f10 = (float) ((l + j) - j1 * 16) / 256F;
+                float f11 = (float) ((l + j) - (j1 + 1) * 16) / 256F;
+                float f12 = 0.75F;
+                float f13 = 0.8125F;
+                float f14 = 0.0F;
+                float f15 = 0.0625F;
+                float f16 = 0.75F;
+                float f17 = 0.8125F;
+                float f18 = 0.001953125F;
+                float f19 = 0.001953125F;
+                float f20 = 0.7519531F;
+                float f21 = 0.7519531F;
+                float f22 = 0.0F;
+                float f23 = 0.0625F;
+                Tessellator tessellator = Tessellator.instance;
+                tessellator.startDrawingQuads();
+                tessellator.setNormal(0.0F, 0.0F, -1F);
+                tessellator.addVertexWithUV(f4, f7, f2, f9, f10);
+                tessellator.addVertexWithUV(f5, f7, f2, f8, f10);
+                tessellator.addVertexWithUV(f5, f6, f2, f8, f11);
+                tessellator.addVertexWithUV(f4, f6, f2, f9, f11);
+                tessellator.setNormal(0.0F, 0.0F, 1.0F);
+                tessellator.addVertexWithUV(f4, f6, f3, f12, f14);
+                tessellator.addVertexWithUV(f5, f6, f3, f13, f14);
+                tessellator.addVertexWithUV(f5, f7, f3, f13, f15);
+                tessellator.addVertexWithUV(f4, f7, f3, f12, f15);
+                tessellator.setNormal(0.0F, -1F, 0.0F);
+                tessellator.addVertexWithUV(f4, f6, f2, f16, f18);
+                tessellator.addVertexWithUV(f5, f6, f2, f17, f18);
+                tessellator.addVertexWithUV(f5, f6, f3, f17, f19);
+                tessellator.addVertexWithUV(f4, f6, f3, f16, f19);
+                tessellator.setNormal(0.0F, 1.0F, 0.0F);
+                tessellator.addVertexWithUV(f4, f7, f3, f16, f18);
+                tessellator.addVertexWithUV(f5, f7, f3, f17, f18);
+                tessellator.addVertexWithUV(f5, f7, f2, f17, f19);
+                tessellator.addVertexWithUV(f4, f7, f2, f16, f19);
+                tessellator.setNormal(-1F, 0.0F, 0.0F);
+                tessellator.addVertexWithUV(f4, f6, f3, f21, f22);
+                tessellator.addVertexWithUV(f4, f7, f3, f21, f23);
+                tessellator.addVertexWithUV(f4, f7, f2, f20, f23);
+                tessellator.addVertexWithUV(f4, f6, f2, f20, f22);
+                tessellator.setNormal(1.0F, 0.0F, 0.0F);
+                tessellator.addVertexWithUV(f5, f6, f2, f21, f22);
+                tessellator.addVertexWithUV(f5, f7, f2, f21, f23);
+                tessellator.addVertexWithUV(f5, f7, f3, f20, f23);
+                tessellator.addVertexWithUV(f5, f6, f3, f20, f22);
+                tessellator.draw();
             }
-        }
-
-    }
-
-    private void func_160_a(EntityPainting var1, float var2, float var3) {
-        int var4 = MathHelper.floor_double(var1.posX);
-        int var5 = MathHelper.floor_double(var1.posY + (double)(var3 / 16.0F));
-        int var6 = MathHelper.floor_double(var1.posZ);
-        if(var1.field_691_a == 0) {
-            var4 = MathHelper.floor_double(var1.posX + (double)(var2 / 16.0F));
-        }
-
-        if(var1.field_691_a == 1) {
-            var6 = MathHelper.floor_double(var1.posZ - (double)(var2 / 16.0F));
-        }
-
-        if(var1.field_691_a == 2) {
-            var4 = MathHelper.floor_double(var1.posX - (double)(var2 / 16.0F));
-        }
-
-        if(var1.field_691_a == 3) {
-            var6 = MathHelper.floor_double(var1.posZ + (double)(var2 / 16.0F));
-        }
-
-        float var7 = this.renderManager.worldObj.getLightBrightness(var4, var5, var6);
-        GL11.glColor3f(var7, var7, var7);
-    }
-
-    public void doRender(Entity var1, double var2, double var4, double var6, float var8, float var9) {
-        this.a((EntityPainting)var1, var2, var4, var6, var8, var9);
+
+        }
+
+    }
+
+    private void func_160_a(EntityPainting entitypainting, float f, float f1) {
+        int i = MathHelper.floor_double(entitypainting.posX);
+        int j = MathHelper.floor_double(entitypainting.posY + (double) (f1 / 16F));
+        int k = MathHelper.floor_double(entitypainting.posZ);
+        if (entitypainting.field_691_a == 0) {
+            i = MathHelper.floor_double(entitypainting.posX + (double) (f / 16F));
+        }
+        if (entitypainting.field_691_a == 1) {
+            k = MathHelper.floor_double(entitypainting.posZ - (double) (f / 16F));
+        }
+        if (entitypainting.field_691_a == 2) {
+            i = MathHelper.floor_double(entitypainting.posX - (double) (f / 16F));
+        }
+        if (entitypainting.field_691_a == 3) {
+            k = MathHelper.floor_double(entitypainting.posZ + (double) (f / 16F));
+        }
+        float f2 = renderManager.worldObj.getLightBrightness(i, j, k);
+        GL11.glColor3f(f2, f2, f2);
+    }
+
+    public void doRender(Entity entity, double d, double d1, double d2,
+                         float f, float f1) {
+        func_158_a((EntityPainting) entity, d, d1, d2, f, f1);
     }
 }
