--- net/minecraft/src/ItemRenderer.java
+++ net/minecraft/src/ItemRenderer.java
@@ -1,362 +1,350 @@
 package net.minecraft.src;
 
+import cc.noxiuam.titanic.Ref;
+import cc.noxiuam.titanic.event.impl.gui.FirstPersonFireDrawEvent;
 import net.minecraft.client.Minecraft;
 import org.lwjgl.opengl.GL11;
-import org.lwjgl.opengl.GL12;
 
 public class ItemRenderer {
+
     private Minecraft mc;
-    private ItemStack field_9451_b = null;
-    private float field_9453_c = 0.0F;
-    private float field_9452_d = 0.0F;
-    private RenderBlocks field_1357_e = new RenderBlocks();
-    private int field_20099_f = -1;
+    private ItemStack field_9451_b;
+    private float field_9453_c;
+    private float field_9452_d;
+    private RenderBlocks field_1357_e;
+    private int field_20099_f;
 
-    public ItemRenderer(Minecraft var1) {
-        this.mc = var1;
+    public ItemRenderer(Minecraft minecraft) {
+        field_9451_b = null;
+        field_9453_c = 0.0F;
+        field_9452_d = 0.0F;
+        field_1357_e = new RenderBlocks();
+        field_20099_f = -1;
+        mc = minecraft;
     }
 
-    public void renderItem(ItemStack var1) {
+    public void renderItem(ItemStack itemstack) {
         GL11.glPushMatrix();
-        if(var1.itemID < 256 && RenderBlocks.func_1219_a(Block.blocksList[var1.itemID].getRenderType())) {
-            GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/terrain.png"));
-            this.field_1357_e.func_1227_a(Block.blocksList[var1.itemID]);
+        if (itemstack.itemID < 256 && RenderBlocks.func_1219_a(Block.blocksList[itemstack.itemID].getRenderType())) {
+            GL11.glBindTexture(3553 /*GL_TEXTURE_2D*/, mc.renderEngine.getTexture("/terrain.png"));
+            field_1357_e.func_1227_a(Block.blocksList[itemstack.itemID]);
         } else {
-            if(var1.itemID < 256) {
-                GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/terrain.png"));
+            if (itemstack.itemID < 256) {
+                GL11.glBindTexture(3553 /*GL_TEXTURE_2D*/, mc.renderEngine.getTexture("/terrain.png"));
             } else {
-                GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/items.png"));
-            }
-
-            Tessellator var2 = Tessellator.instance;
-            float var3 = ((float)(var1.getIconIndex() % 16 * 16) + 0.0F) / 256.0F;
-            float var4 = ((float)(var1.getIconIndex() % 16 * 16) + 15.99F) / 256.0F;
-            float var5 = ((float)(var1.getIconIndex() / 16 * 16) + 0.0F) / 256.0F;
-            float var6 = ((float)(var1.getIconIndex() / 16 * 16) + 15.99F) / 256.0F;
-            float var7 = 1.0F;
-            float var8 = 0.0F;
-            float var9 = 0.3F;
-            GL11.glEnable(GL12.GL_RESCALE_NORMAL);
-            GL11.glTranslatef(-var8, -var9, 0.0F);
-            float var10 = 1.5F;
-            GL11.glScalef(var10, var10, var10);
-            GL11.glRotatef(50.0F, 0.0F, 1.0F, 0.0F);
-            GL11.glRotatef(335.0F, 0.0F, 0.0F, 1.0F);
-            GL11.glTranslatef(-(15.0F / 16.0F), -(1.0F / 16.0F), 0.0F);
-            float var11 = 1.0F / 16.0F;
-            var2.startDrawingQuads();
-            var2.setNormal(0.0F, 0.0F, 1.0F);
-            var2.addVertexWithUV(0.0D, 0.0D, 0.0D, (double)var4, (double)var6);
-            var2.addVertexWithUV((double)var7, 0.0D, 0.0D, (double)var3, (double)var6);
-            var2.addVertexWithUV((double)var7, 1.0D, 0.0D, (double)var3, (double)var5);
-            var2.addVertexWithUV(0.0D, 1.0D, 0.0D, (double)var4, (double)var5);
-            var2.draw();
-            var2.startDrawingQuads();
-            var2.setNormal(0.0F, 0.0F, -1.0F);
-            var2.addVertexWithUV(0.0D, 1.0D, (double)(0.0F - var11), (double)var4, (double)var5);
-            var2.addVertexWithUV((double)var7, 1.0D, (double)(0.0F - var11), (double)var3, (double)var5);
-            var2.addVertexWithUV((double)var7, 0.0D, (double)(0.0F - var11), (double)var3, (double)var6);
-            var2.addVertexWithUV(0.0D, 0.0D, (double)(0.0F - var11), (double)var4, (double)var6);
-            var2.draw();
-            var2.startDrawingQuads();
-            var2.setNormal(-1.0F, 0.0F, 0.0F);
-
-            int var12;
-            float var13;
-            float var14;
-            float var15;
-            for(var12 = 0; var12 < 16; ++var12) {
-                var13 = (float)var12 / 16.0F;
-                var14 = var4 + (var3 - var4) * var13 - 0.001953125F;
-                var15 = var7 * var13;
-                var2.addVertexWithUV((double)var15, 0.0D, (double)(0.0F - var11), (double)var14, (double)var6);
-                var2.addVertexWithUV((double)var15, 0.0D, 0.0D, (double)var14, (double)var6);
-                var2.addVertexWithUV((double)var15, 1.0D, 0.0D, (double)var14, (double)var5);
-                var2.addVertexWithUV((double)var15, 1.0D, (double)(0.0F - var11), (double)var14, (double)var5);
-            }
-
-            var2.draw();
-            var2.startDrawingQuads();
-            var2.setNormal(1.0F, 0.0F, 0.0F);
-
-            for(var12 = 0; var12 < 16; ++var12) {
-                var13 = (float)var12 / 16.0F;
-                var14 = var4 + (var3 - var4) * var13 - 0.001953125F;
-                var15 = var7 * var13 + 1.0F / 16.0F;
-                var2.addVertexWithUV((double)var15, 1.0D, (double)(0.0F - var11), (double)var14, (double)var5);
-                var2.addVertexWithUV((double)var15, 1.0D, 0.0D, (double)var14, (double)var5);
-                var2.addVertexWithUV((double)var15, 0.0D, 0.0D, (double)var14, (double)var6);
-                var2.addVertexWithUV((double)var15, 0.0D, (double)(0.0F - var11), (double)var14, (double)var6);
-            }
-
-            var2.draw();
-            var2.startDrawingQuads();
-            var2.setNormal(0.0F, 1.0F, 0.0F);
-
-            for(var12 = 0; var12 < 16; ++var12) {
-                var13 = (float)var12 / 16.0F;
-                var14 = var6 + (var5 - var6) * var13 - 0.001953125F;
-                var15 = var7 * var13 + 1.0F / 16.0F;
-                var2.addVertexWithUV(0.0D, (double)var15, 0.0D, (double)var4, (double)var14);
-                var2.addVertexWithUV((double)var7, (double)var15, 0.0D, (double)var3, (double)var14);
-                var2.addVertexWithUV((double)var7, (double)var15, (double)(0.0F - var11), (double)var3, (double)var14);
-                var2.addVertexWithUV(0.0D, (double)var15, (double)(0.0F - var11), (double)var4, (double)var14);
-            }
-
-            var2.draw();
-            var2.startDrawingQuads();
-            var2.setNormal(0.0F, -1.0F, 0.0F);
-
-            for(var12 = 0; var12 < 16; ++var12) {
-                var13 = (float)var12 / 16.0F;
-                var14 = var6 + (var5 - var6) * var13 - 0.001953125F;
-                var15 = var7 * var13;
-                var2.addVertexWithUV((double)var7, (double)var15, 0.0D, (double)var3, (double)var14);
-                var2.addVertexWithUV(0.0D, (double)var15, 0.0D, (double)var4, (double)var14);
-                var2.addVertexWithUV(0.0D, (double)var15, (double)(0.0F - var11), (double)var4, (double)var14);
-                var2.addVertexWithUV((double)var7, (double)var15, (double)(0.0F - var11), (double)var3, (double)var14);
-            }
-
-            var2.draw();
-            GL11.glDisable(GL12.GL_RESCALE_NORMAL);
+                GL11.glBindTexture(3553 /*GL_TEXTURE_2D*/, mc.renderEngine.getTexture("/gui/items.png"));
+            }
+            Tessellator tessellator = Tessellator.instance;
+            float f = ((float) ((itemstack.getIconIndex() % 16) * 16) + 0.0F) / 256F;
+            float f1 = ((float) ((itemstack.getIconIndex() % 16) * 16) + 15.99F) / 256F;
+            float f2 = ((float) ((itemstack.getIconIndex() / 16) * 16) + 0.0F) / 256F;
+            float f3 = ((float) ((itemstack.getIconIndex() / 16) * 16) + 15.99F) / 256F;
+            float f4 = 1.0F;
+            float f5 = 0.0F;
+            float f6 = 0.3F;
+            GL11.glEnable(32826 /*GL_RESCALE_NORMAL_EXT*/);
+            GL11.glTranslatef(-f5, -f6, 0.0F);
+            float f7 = 1.5F;
+            GL11.glScalef(f7, f7, f7);
+            GL11.glRotatef(50F, 0.0F, 1.0F, 0.0F);
+            GL11.glRotatef(335F, 0.0F, 0.0F, 1.0F);
+            GL11.glTranslatef(-0.9375F, -0.0625F, 0.0F);
+            float f8 = 0.0625F;
+            tessellator.startDrawingQuads();
+            tessellator.setNormal(0.0F, 0.0F, 1.0F);
+            tessellator.addVertexWithUV(0.0D, 0.0D, 0.0D, f1, f3);
+            tessellator.addVertexWithUV(f4, 0.0D, 0.0D, f, f3);
+            tessellator.addVertexWithUV(f4, 1.0D, 0.0D, f, f2);
+            tessellator.addVertexWithUV(0.0D, 1.0D, 0.0D, f1, f2);
+            tessellator.draw();
+            tessellator.startDrawingQuads();
+            tessellator.setNormal(0.0F, 0.0F, -1F);
+            tessellator.addVertexWithUV(0.0D, 1.0D, 0.0F - f8, f1, f2);
+            tessellator.addVertexWithUV(f4, 1.0D, 0.0F - f8, f, f2);
+            tessellator.addVertexWithUV(f4, 0.0D, 0.0F - f8, f, f3);
+            tessellator.addVertexWithUV(0.0D, 0.0D, 0.0F - f8, f1, f3);
+            tessellator.draw();
+            tessellator.startDrawingQuads();
+            tessellator.setNormal(-1F, 0.0F, 0.0F);
+            for (int i = 0; i < 16; i++) {
+                float f9 = (float) i / 16F;
+                float f13 = (f1 + (f - f1) * f9) - 0.001953125F;
+                float f17 = f4 * f9;
+                tessellator.addVertexWithUV(f17, 0.0D, 0.0F - f8, f13, f3);
+                tessellator.addVertexWithUV(f17, 0.0D, 0.0D, f13, f3);
+                tessellator.addVertexWithUV(f17, 1.0D, 0.0D, f13, f2);
+                tessellator.addVertexWithUV(f17, 1.0D, 0.0F - f8, f13, f2);
+            }
+
+            tessellator.draw();
+            tessellator.startDrawingQuads();
+            tessellator.setNormal(1.0F, 0.0F, 0.0F);
+            for (int j = 0; j < 16; j++) {
+                float f10 = (float) j / 16F;
+                float f14 = (f1 + (f - f1) * f10) - 0.001953125F;
+                float f18 = f4 * f10 + 0.0625F;
+                tessellator.addVertexWithUV(f18, 1.0D, 0.0F - f8, f14, f2);
+                tessellator.addVertexWithUV(f18, 1.0D, 0.0D, f14, f2);
+                tessellator.addVertexWithUV(f18, 0.0D, 0.0D, f14, f3);
+                tessellator.addVertexWithUV(f18, 0.0D, 0.0F - f8, f14, f3);
+            }
+
+            tessellator.draw();
+            tessellator.startDrawingQuads();
+            tessellator.setNormal(0.0F, 1.0F, 0.0F);
+            for (int k = 0; k < 16; k++) {
+                float f11 = (float) k / 16F;
+                float f15 = (f3 + (f2 - f3) * f11) - 0.001953125F;
+                float f19 = f4 * f11 + 0.0625F;
+                tessellator.addVertexWithUV(0.0D, f19, 0.0D, f1, f15);
+                tessellator.addVertexWithUV(f4, f19, 0.0D, f, f15);
+                tessellator.addVertexWithUV(f4, f19, 0.0F - f8, f, f15);
+                tessellator.addVertexWithUV(0.0D, f19, 0.0F - f8, f1, f15);
+            }
+
+            tessellator.draw();
+            tessellator.startDrawingQuads();
+            tessellator.setNormal(0.0F, -1F, 0.0F);
+            for (int l = 0; l < 16; l++) {
+                float f12 = (float) l / 16F;
+                float f16 = (f3 + (f2 - f3) * f12) - 0.001953125F;
+                float f20 = f4 * f12;
+                tessellator.addVertexWithUV(f4, f20, 0.0D, f, f16);
+                tessellator.addVertexWithUV(0.0D, f20, 0.0D, f1, f16);
+                tessellator.addVertexWithUV(0.0D, f20, 0.0F - f8, f1, f16);
+                tessellator.addVertexWithUV(f4, f20, 0.0F - f8, f, f16);
+            }
+
+            tessellator.draw();
+            GL11.glDisable(32826 /*GL_RESCALE_NORMAL_EXT*/);
         }
-
         GL11.glPopMatrix();
     }
 
-    public void renderItemInFirstPerson(float var1) {
-        float var2 = this.field_9452_d + (this.field_9453_c - this.field_9452_d) * var1;
-        EntityPlayerSP var3 = this.mc.thePlayer;
+    public void renderItemInFirstPerson(float f) {
+        float f1 = field_9452_d + (field_9453_c - field_9452_d) * f;
+        EntityPlayerSP entityplayersp = mc.thePlayer;
         GL11.glPushMatrix();
-        GL11.glRotatef(var3.prevRotationPitch + (var3.rotationPitch - var3.prevRotationPitch) * var1, 1.0F, 0.0F, 0.0F);
-        GL11.glRotatef(var3.prevRotationYaw + (var3.rotationYaw - var3.prevRotationYaw) * var1, 0.0F, 1.0F, 0.0F);
+        GL11.glRotatef(((EntityPlayer) (entityplayersp)).prevRotationPitch + (((EntityPlayer) (entityplayersp)).rotationPitch - ((EntityPlayer) (entityplayersp)).prevRotationPitch) * f, 1.0F, 0.0F, 0.0F);
+        GL11.glRotatef(((EntityPlayer) (entityplayersp)).prevRotationYaw + (((EntityPlayer) (entityplayersp)).rotationYaw - ((EntityPlayer) (entityplayersp)).prevRotationYaw) * f, 0.0F, 1.0F, 0.0F);
         RenderHelper.enableStandardItemLighting();
         GL11.glPopMatrix();
-        float var4 = this.mc.theWorld.getLightBrightness(MathHelper.floor_double(var3.posX), MathHelper.floor_double(var3.posY), MathHelper.floor_double(var3.posZ));
-        GL11.glColor4f(var4, var4, var4, 1.0F);
-        ItemStack var5 = this.field_9451_b;
-        if(var3.fishEntity != null) {
-            var5 = new ItemStack(Item.stick.shiftedIndex);
+        float f2 = mc.theWorld.getLightBrightness(MathHelper.floor_double(((EntityPlayer) (entityplayersp)).posX), MathHelper.floor_double(((EntityPlayer) (entityplayersp)).posY), MathHelper.floor_double(((EntityPlayer) (entityplayersp)).posZ));
+        GL11.glColor4f(f2, f2, f2, 1.0F);
+        ItemStack itemstack = field_9451_b;
+        if (((EntityPlayer) (entityplayersp)).fishEntity != null) {
+            itemstack = new ItemStack(Item.stick.shiftedIndex);
         }
-
-        float var6;
-        float var7;
-        float var8;
-        float var9;
-        if(var5 != null) {
+        if (itemstack != null) {
             GL11.glPushMatrix();
-            var6 = 0.8F;
-            var7 = var3.getSwingProgress(var1);
-            var8 = MathHelper.sin(var7 * (float)Math.PI);
-            var9 = MathHelper.sin(MathHelper.sqrt_float(var7) * (float)Math.PI);
-            GL11.glTranslatef(-var9 * 0.4F, MathHelper.sin(MathHelper.sqrt_float(var7) * (float)Math.PI * 2.0F) * 0.2F, -var8 * 0.2F);
-            GL11.glTranslatef(0.7F * var6, -0.65F * var6 - (1.0F - var2) * 0.6F, -0.9F * var6);
-            GL11.glRotatef(45.0F, 0.0F, 1.0F, 0.0F);
-            GL11.glEnable(GL12.GL_RESCALE_NORMAL);
-            var7 = var3.getSwingProgress(var1);
-            var8 = MathHelper.sin(var7 * var7 * (float)Math.PI);
-            var9 = MathHelper.sin(MathHelper.sqrt_float(var7) * (float)Math.PI);
-            GL11.glRotatef(-var8 * 20.0F, 0.0F, 1.0F, 0.0F);
-            GL11.glRotatef(-var9 * 20.0F, 0.0F, 0.0F, 1.0F);
-            GL11.glRotatef(-var9 * 80.0F, 1.0F, 0.0F, 0.0F);
-            var7 = 0.4F;
-            GL11.glScalef(var7, var7, var7);
-            if(var5.getItem().shouldRotateAroundWhenRendering()) {
-                GL11.glRotatef(180.0F, 0.0F, 1.0F, 0.0F);
+            float f3 = 0.8F;
+            float f5 = entityplayersp.getSwingProgress(f);
+            float f7 = MathHelper.sin(f5 * 3.141593F);
+            float f9 = MathHelper.sin(MathHelper.sqrt_float(f5) * 3.141593F);
+            GL11.glTranslatef(-f9 * 0.4F, MathHelper.sin(MathHelper.sqrt_float(f5) * 3.141593F * 2.0F) * 0.2F, -f7 * 0.2F);
+            GL11.glTranslatef(0.7F * f3, -0.65F * f3 - (1.0F - f1) * 0.6F, -0.9F * f3);
+            GL11.glRotatef(45F, 0.0F, 1.0F, 0.0F);
+            GL11.glEnable(32826 /*GL_RESCALE_NORMAL_EXT*/);
+            f5 = entityplayersp.getSwingProgress(f);
+            f7 = MathHelper.sin(f5 * f5 * 3.141593F);
+            f9 = MathHelper.sin(MathHelper.sqrt_float(f5) * 3.141593F);
+            GL11.glRotatef(-f7 * 20F, 0.0F, 1.0F, 0.0F);
+            GL11.glRotatef(-f9 * 20F, 0.0F, 0.0F, 1.0F);
+            GL11.glRotatef(-f9 * 80F, 1.0F, 0.0F, 0.0F);
+            f5 = 0.4F;
+            GL11.glScalef(f5, f5, f5);
+            if (itemstack.getItem().shouldRotateAroundWhenRendering()) {
+                GL11.glRotatef(180F, 0.0F, 1.0F, 0.0F);
             }
-
-            this.renderItem(var5);
+            renderItem(itemstack);
             GL11.glPopMatrix();
         } else {
             GL11.glPushMatrix();
-            var6 = 0.8F;
-            var7 = var3.getSwingProgress(var1);
-            var8 = MathHelper.sin(var7 * (float)Math.PI);
-            var9 = MathHelper.sin(MathHelper.sqrt_float(var7) * (float)Math.PI);
-            GL11.glTranslatef(-var9 * 0.3F, MathHelper.sin(MathHelper.sqrt_float(var7) * (float)Math.PI * 2.0F) * 0.4F, -var8 * 0.4F);
-            GL11.glTranslatef(0.8F * var6, -(12.0F / 16.0F) * var6 - (1.0F - var2) * 0.6F, -0.9F * var6);
-            GL11.glRotatef(45.0F, 0.0F, 1.0F, 0.0F);
-            GL11.glEnable(GL12.GL_RESCALE_NORMAL);
-            var7 = var3.getSwingProgress(var1);
-            var8 = MathHelper.sin(var7 * var7 * (float)Math.PI);
-            var9 = MathHelper.sin(MathHelper.sqrt_float(var7) * (float)Math.PI);
-            GL11.glRotatef(var9 * 70.0F, 0.0F, 1.0F, 0.0F);
-            GL11.glRotatef(-var8 * 20.0F, 0.0F, 0.0F, 1.0F);
-            GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTextureForDownloadableImage(this.mc.thePlayer.field_20047_bv, this.mc.thePlayer.getEntityTexture()));
-            GL11.glTranslatef(-1.0F, 3.6F, 3.5F);
-            GL11.glRotatef(120.0F, 0.0F, 0.0F, 1.0F);
-            GL11.glRotatef(200.0F, 1.0F, 0.0F, 0.0F);
-            GL11.glRotatef(-135.0F, 0.0F, 1.0F, 0.0F);
+            float f4 = 0.8F;
+            float f6 = entityplayersp.getSwingProgress(f);
+            float f8 = MathHelper.sin(f6 * 3.141593F);
+            float f10 = MathHelper.sin(MathHelper.sqrt_float(f6) * 3.141593F);
+            GL11.glTranslatef(-f10 * 0.3F, MathHelper.sin(MathHelper.sqrt_float(f6) * 3.141593F * 2.0F) * 0.4F, -f8 * 0.4F);
+            GL11.glTranslatef(0.8F * f4, -0.75F * f4 - (1.0F - f1) * 0.6F, -0.9F * f4);
+            GL11.glRotatef(45F, 0.0F, 1.0F, 0.0F);
+            GL11.glEnable(32826 /*GL_RESCALE_NORMAL_EXT*/);
+            f6 = entityplayersp.getSwingProgress(f);
+            f8 = MathHelper.sin(f6 * f6 * 3.141593F);
+            f10 = MathHelper.sin(MathHelper.sqrt_float(f6) * 3.141593F);
+            GL11.glRotatef(f10 * 70F, 0.0F, 1.0F, 0.0F);
+            GL11.glRotatef(-f8 * 20F, 0.0F, 0.0F, 1.0F);
+            GL11.glBindTexture(3553 /*GL_TEXTURE_2D*/, mc.renderEngine.getTextureForDownloadableImage(mc.thePlayer.field_20047_bv, mc.thePlayer.getEntityTexture()));
+            GL11.glTranslatef(-1F, 3.6F, 3.5F);
+            GL11.glRotatef(120F, 0.0F, 0.0F, 1.0F);
+            GL11.glRotatef(200F, 1.0F, 0.0F, 0.0F);
+            GL11.glRotatef(-135F, 0.0F, 1.0F, 0.0F);
             GL11.glScalef(1.0F, 1.0F, 1.0F);
             GL11.glTranslatef(5.6F, 0.0F, 0.0F);
-            Render var10 = RenderManager.instance.getEntityRenderObject(this.mc.thePlayer);
-            RenderPlayer var11 = (RenderPlayer)var10;
-            var9 = 1.0F;
-            GL11.glScalef(var9, var9, var9);
-            var11.drawFirstPersonHand();
+            Render render = RenderManager.instance.getEntityRenderObject(mc.thePlayer);
+            RenderPlayer renderplayer = (RenderPlayer) render;
+            f10 = 1.0F;
+            GL11.glScalef(f10, f10, f10);
+            renderplayer.drawFirstPersonHand();
             GL11.glPopMatrix();
         }
-
-        GL11.glDisable(GL12.GL_RESCALE_NORMAL);
+        GL11.glDisable(32826 /*GL_RESCALE_NORMAL_EXT*/);
         RenderHelper.disableStandardItemLighting();
     }
 
-    public void renderOverlays(float var1) {
-        GL11.glDisable(GL11.GL_ALPHA_TEST);
-        int var2;
-        if(this.mc.thePlayer.fire > 0 || this.mc.thePlayer.field_9299_bv) {
-            var2 = this.mc.renderEngine.getTexture("/terrain.png");
-            GL11.glBindTexture(GL11.GL_TEXTURE_2D, var2);
-            this.renderFireInFirstPerson(var1);
+    public void renderOverlays(float f) {
+        GL11.glDisable(3008 /*GL_ALPHA_TEST*/);
+        if (mc.thePlayer.fire > 0 || mc.thePlayer.field_9299_bv) {
+            int i = mc.renderEngine.getTexture("/terrain.png");
+            GL11.glBindTexture(3553 /*GL_TEXTURE_2D*/, i);
+            renderFireInFirstPerson(f);
         }
-
-        if(this.mc.thePlayer.func_345_I()) {
-            var2 = MathHelper.floor_double(this.mc.thePlayer.posX);
-            int var3 = MathHelper.floor_double(this.mc.thePlayer.posY);
-            int var4 = MathHelper.floor_double(this.mc.thePlayer.posZ);
-            int var5 = this.mc.renderEngine.getTexture("/terrain.png");
-            GL11.glBindTexture(GL11.GL_TEXTURE_2D, var5);
-            int var6 = this.mc.theWorld.getBlockId(var2, var3, var4);
-            if(Block.blocksList[var6] != null) {
-                this.renderInsideOfBlock(var1, Block.blocksList[var6].getBlockTextureFromSide(2));
+        if (mc.thePlayer.func_345_I()) {
+            int j = MathHelper.floor_double(mc.thePlayer.posX);
+            int l = MathHelper.floor_double(mc.thePlayer.posY);
+            int i1 = MathHelper.floor_double(mc.thePlayer.posZ);
+            int j1 = mc.renderEngine.getTexture("/terrain.png");
+            GL11.glBindTexture(3553 /*GL_TEXTURE_2D*/, j1);
+            int k1 = mc.theWorld.getBlockId(j, l, i1);
+            if (Block.blocksList[k1] != null) {
+                renderInsideOfBlock(f, Block.blocksList[k1].getBlockTextureFromSide(2));
             }
         }
-
-        if(this.mc.thePlayer.isInsideOfMaterial(Material.water)) {
-            var2 = this.mc.renderEngine.getTexture("/misc/water.png");
-            GL11.glBindTexture(GL11.GL_TEXTURE_2D, var2);
-            this.renderWarpedTextureOverlay(var1);
-        }
-
-        GL11.glEnable(GL11.GL_ALPHA_TEST);
-    }
-
-    private void renderInsideOfBlock(float var1, int var2) {
-        Tessellator var3 = Tessellator.instance;
-        this.mc.thePlayer.getEntityBrightness(var1);
-        float var4 = 0.1F;
-        GL11.glColor4f(var4, var4, var4, 0.5F);
-        GL11.glPushMatrix();
-        float var5 = -1.0F;
-        float var6 = 1.0F;
-        float var7 = -1.0F;
-        float var8 = 1.0F;
-        float var9 = -0.5F;
-        float var10 = 0.0078125F;
-        float var11 = (float)(var2 % 16) / 256.0F - var10;
-        float var12 = ((float)(var2 % 16) + 15.99F) / 256.0F + var10;
-        float var13 = (float)(var2 / 16) / 256.0F - var10;
-        float var14 = ((float)(var2 / 16) + 15.99F) / 256.0F + var10;
-        var3.startDrawingQuads();
-        var3.addVertexWithUV((double)var5, (double)var7, (double)var9, (double)var12, (double)var14);
-        var3.addVertexWithUV((double)var6, (double)var7, (double)var9, (double)var11, (double)var14);
-        var3.addVertexWithUV((double)var6, (double)var8, (double)var9, (double)var11, (double)var13);
-        var3.addVertexWithUV((double)var5, (double)var8, (double)var9, (double)var12, (double)var13);
-        var3.draw();
-        GL11.glPopMatrix();
-        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-    }
-
-    private void renderWarpedTextureOverlay(float var1) {
-        Tessellator var2 = Tessellator.instance;
-        float var3 = this.mc.thePlayer.getEntityBrightness(var1);
-        GL11.glColor4f(var3, var3, var3, 0.5F);
-        GL11.glEnable(GL11.GL_BLEND);
-        GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-        GL11.glPushMatrix();
-        float var4 = 4.0F;
-        float var5 = -1.0F;
-        float var6 = 1.0F;
-        float var7 = -1.0F;
-        float var8 = 1.0F;
-        float var9 = -0.5F;
-        float var10 = -this.mc.thePlayer.rotationYaw / 64.0F;
-        float var11 = this.mc.thePlayer.rotationPitch / 64.0F;
-        var2.startDrawingQuads();
-        var2.addVertexWithUV((double)var5, (double)var7, (double)var9, (double)(var4 + var10), (double)(var4 + var11));
-        var2.addVertexWithUV((double)var6, (double)var7, (double)var9, (double)(0.0F + var10), (double)(var4 + var11));
-        var2.addVertexWithUV((double)var6, (double)var8, (double)var9, (double)(0.0F + var10), (double)(0.0F + var11));
-        var2.addVertexWithUV((double)var5, (double)var8, (double)var9, (double)(var4 + var10), (double)(0.0F + var11));
-        var2.draw();
-        GL11.glPopMatrix();
-        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-        GL11.glDisable(GL11.GL_BLEND);
-    }
-
-    private void renderFireInFirstPerson(float var1) {
-        Tessellator var2 = Tessellator.instance;
+        if (mc.thePlayer.isInsideOfMaterial(Material.water)) {
+            int k = mc.renderEngine.getTexture("/misc/water.png");
+            GL11.glBindTexture(3553 /*GL_TEXTURE_2D*/, k);
+            renderWarpedTextureOverlay(f);
+        }
+        GL11.glEnable(3008 /*GL_ALPHA_TEST*/);
+    }
+
+    private void renderInsideOfBlock(float f, int i) {
+        Tessellator tessellator = Tessellator.instance;
+        float f1 = mc.thePlayer.getEntityBrightness(f);
+        f1 = 0.1F;
+        GL11.glColor4f(f1, f1, f1, 0.5F);
+        GL11.glPushMatrix();
+        float f2 = -1F;
+        float f3 = 1.0F;
+        float f4 = -1F;
+        float f5 = 1.0F;
+        float f6 = -0.5F;
+        float f7 = 0.0078125F;
+        float f8 = (float) (i % 16) / 256F - f7;
+        float f9 = ((float) (i % 16) + 15.99F) / 256F + f7;
+        float f10 = (float) (i / 16) / 256F - f7;
+        float f11 = ((float) (i / 16) + 15.99F) / 256F + f7;
+        tessellator.startDrawingQuads();
+        tessellator.addVertexWithUV(f2, f4, f6, f9, f11);
+        tessellator.addVertexWithUV(f3, f4, f6, f8, f11);
+        tessellator.addVertexWithUV(f3, f5, f6, f8, f10);
+        tessellator.addVertexWithUV(f2, f5, f6, f9, f10);
+        tessellator.draw();
+        GL11.glPopMatrix();
+        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+    }
+
+    private void renderWarpedTextureOverlay(float f) {
+        Tessellator tessellator = Tessellator.instance;
+        float f1 = mc.thePlayer.getEntityBrightness(f);
+        GL11.glColor4f(f1, f1, f1, 0.5F);
+        GL11.glEnable(3042 /*GL_BLEND*/);
+        GL11.glBlendFunc(770, 771);
+        GL11.glPushMatrix();
+        float f2 = 4F;
+        float f3 = -1F;
+        float f4 = 1.0F;
+        float f5 = -1F;
+        float f6 = 1.0F;
+        float f7 = -0.5F;
+        float f8 = -mc.thePlayer.rotationYaw / 64F;
+        float f9 = mc.thePlayer.rotationPitch / 64F;
+        tessellator.startDrawingQuads();
+        tessellator.addVertexWithUV(f3, f5, f7, f2 + f8, f2 + f9);
+        tessellator.addVertexWithUV(f4, f5, f7, 0.0F + f8, f2 + f9);
+        tessellator.addVertexWithUV(f4, f6, f7, 0.0F + f8, 0.0F + f9);
+        tessellator.addVertexWithUV(f3, f6, f7, f2 + f8, 0.0F + f9);
+        tessellator.draw();
+        GL11.glPopMatrix();
+        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+        GL11.glDisable(3042 /*GL_BLEND*/);
+    }
+
+    private void renderFireInFirstPerson(float f) {
+        FirstPersonFireDrawEvent event = new FirstPersonFireDrawEvent();
+        Ref.getEventManager().handleEvent(event);
+
+        if (event.isCancelled()) {
+            return;
+        }
+
+        Tessellator tessellator = Tessellator.instance;
         GL11.glColor4f(1.0F, 1.0F, 1.0F, 0.9F);
-        GL11.glEnable(GL11.GL_BLEND);
-        GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-        float var3 = 1.0F;
-
-        for(int var4 = 0; var4 < 2; ++var4) {
+        GL11.glEnable(3042 /*GL_BLEND*/);
+        GL11.glBlendFunc(770, 771);
+        float f1 = 1.0F;
+        for (int i = 0; i < 2; i++) {
             GL11.glPushMatrix();
-            int var5 = Block.fire.blockIndexInTexture + var4 * 16;
-            int var6 = (var5 & 15) << 4;
-            int var7 = var5 & 240;
-            float var8 = (float)var6 / 256.0F;
-            float var9 = ((float)var6 + 15.99F) / 256.0F;
-            float var10 = (float)var7 / 256.0F;
-            float var11 = ((float)var7 + 15.99F) / 256.0F;
-            float var12 = (0.0F - var3) / 2.0F;
-            float var13 = var12 + var3;
-            float var14 = 0.0F - var3 / 2.0F;
-            float var15 = var14 + var3;
-            float var16 = -0.5F;
-            GL11.glTranslatef((float)(-(var4 * 2 - 1)) * 0.24F, -0.3F, 0.0F);
-            GL11.glRotatef((float)(var4 * 2 - 1) * 10.0F, 0.0F, 1.0F, 0.0F);
-            var2.startDrawingQuads();
-            var2.addVertexWithUV((double)var12, (double)var14, (double)var16, (double)var9, (double)var11);
-            var2.addVertexWithUV((double)var13, (double)var14, (double)var16, (double)var8, (double)var11);
-            var2.addVertexWithUV((double)var13, (double)var15, (double)var16, (double)var8, (double)var10);
-            var2.addVertexWithUV((double)var12, (double)var15, (double)var16, (double)var9, (double)var10);
-            var2.draw();
+            int j = Block.fire.blockIndexInTexture + i * 16;
+            int k = (j & 0xf) << 4;
+            int l = j & 0xf0;
+            float f2 = (float) k / 256F;
+            float f3 = ((float) k + 15.99F) / 256F;
+            float f4 = (float) l / 256F;
+            float f5 = ((float) l + 15.99F) / 256F;
+            float f6 = (0.0F - f1) / 2.0F;
+            float f7 = f6 + f1;
+            float f8 = 0.0F - f1 / 2.0F;
+            float f9 = f8 + f1;
+            float f10 = -0.5F;
+            GL11.glTranslatef((float) (-(i * 2 - 1)) * 0.24F, -0.3F, 0.0F);
+            GL11.glRotatef((float) (i * 2 - 1) * 10F, 0.0F, 1.0F, 0.0F);
+            tessellator.startDrawingQuads();
+            tessellator.addVertexWithUV(f6, f8, f10, f3, f5);
+            tessellator.addVertexWithUV(f7, f8, f10, f2, f5);
+            tessellator.addVertexWithUV(f7, f9, f10, f2, f4);
+            tessellator.addVertexWithUV(f6, f9, f10, f3, f4);
+            tessellator.draw();
             GL11.glPopMatrix();
         }
 
         GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-        GL11.glDisable(GL11.GL_BLEND);
+        GL11.glDisable(3042 /*GL_BLEND*/);
     }
 
     public void func_895_a() {
-        this.field_9452_d = this.field_9453_c;
-        EntityPlayerSP var1 = this.mc.thePlayer;
-        ItemStack var2 = var1.inventory.getCurrentItem();
-        boolean var4 = this.field_20099_f == var1.inventory.currentItem && var2 == this.field_9451_b;
-        if(this.field_9451_b == null && var2 == null) {
-            var4 = true;
-        }
-
-        if(var2 != null && this.field_9451_b != null && var2 != this.field_9451_b && var2.itemID == this.field_9451_b.itemID) {
-            this.field_9451_b = var2;
-            var4 = true;
-        }
-
-        float var5 = 0.4F;
-        float var6 = var4 ? 1.0F : 0.0F;
-        float var7 = var6 - this.field_9453_c;
-        if(var7 < -var5) {
-            var7 = -var5;
-        }
-
-        if(var7 > var5) {
-            var7 = var5;
-        }
-
-        this.field_9453_c += var7;
-        if(this.field_9453_c < 0.1F) {
-            this.field_9451_b = var2;
-            this.field_20099_f = var1.inventory.currentItem;
-        }
-
+        field_9452_d = field_9453_c;
+        EntityPlayerSP entityplayersp = mc.thePlayer;
+        ItemStack itemstack = ((EntityPlayer) (entityplayersp)).inventory.getCurrentItem();
+        ItemStack itemstack1 = itemstack;
+        boolean flag = field_20099_f == ((EntityPlayer) (entityplayersp)).inventory.currentItem && itemstack1 == field_9451_b;
+        if (field_9451_b == null && itemstack1 == null) {
+            flag = true;
+        }
+        if (itemstack1 != null && field_9451_b != null && itemstack1 != field_9451_b && itemstack1.itemID == field_9451_b.itemID) {
+            field_9451_b = itemstack1;
+            flag = true;
+        }
+        float f = 0.4F;
+        float f1 = flag ? 1.0F : 0.0F;
+        float f2 = f1 - field_9453_c;
+        if (f2 < -f) {
+            f2 = -f;
+        }
+        if (f2 > f) {
+            f2 = f;
+        }
+        field_9453_c += f2;
+        if (field_9453_c < 0.1F) {
+            field_9451_b = itemstack1;
+            field_20099_f = ((EntityPlayer) (entityplayersp)).inventory.currentItem;
+        }
     }
 
     public void func_9449_b() {
-        this.field_9453_c = 0.0F;
+        field_9453_c = 0.0F;
     }
 
     public void func_9450_c() {
-        this.field_9453_c = 0.0F;
+        field_9453_c = 0.0F;
     }
 }
