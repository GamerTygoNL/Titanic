--- net/minecraft/src/EntityList.java
+++ net/minecraft/src/EntityList.java
@@ -4,80 +4,11 @@
 import java.util.Map;
 
 public class EntityList {
-    private static Map stringToClassMapping = new HashMap();
-    private static Map classToStringMapping = new HashMap();
-    private static Map IDtoClassMapping = new HashMap();
-    private static Map classToIDMapping = new HashMap();
-
-    private static void addMapping(Class var0, String var1, int var2) {
-        stringToClassMapping.put(var1, var0);
-        classToStringMapping.put(var0, var1);
-        IDtoClassMapping.put(Integer.valueOf(var2), var0);
-        classToIDMapping.put(var0, Integer.valueOf(var2));
-    }
-
-    public static Entity createEntityInWorld(String var0, World var1) {
-        Entity var2 = null;
-
-        try {
-            Class var3 = (Class)stringToClassMapping.get(var0);
-            if(var3 != null) {
-                var2 = (Entity)var3.getConstructor(new Class[]{World.class}).newInstance(new Object[]{var1});
-            }
-        } catch (Exception var4) {
-            var4.printStackTrace();
-        }
-
-        return var2;
-    }
-
-    public static Entity createEntityFromNBT(NBTTagCompound var0, World var1) {
-        Entity var2 = null;
-
-        try {
-            Class var3 = (Class)stringToClassMapping.get(var0.getString("id"));
-            if(var3 != null) {
-                var2 = (Entity)var3.getConstructor(new Class[]{World.class}).newInstance(new Object[]{var1});
-            }
-        } catch (Exception var4) {
-            var4.printStackTrace();
-        }
-
-        if(var2 != null) {
-            var2.readFromNBT(var0);
-        } else {
-            System.out.println("Skipping Entity with id " + var0.getString("id"));
-        }
-
-        return var2;
-    }
-
-    public static Entity createEntity(int var0, World var1) {
-        Entity var2 = null;
-
-        try {
-            Class var3 = (Class)IDtoClassMapping.get(Integer.valueOf(var0));
-            if(var3 != null) {
-                var2 = (Entity)var3.getConstructor(new Class[]{World.class}).newInstance(new Object[]{var1});
-            }
-        } catch (Exception var4) {
-            var4.printStackTrace();
-        }
-
-        if(var2 == null) {
-            System.out.println("Skipping Entity with id " + var0);
-        }
-
-        return var2;
-    }
-
-    public static int getEntityID(Entity var0) {
-        return ((Integer)classToIDMapping.get(var0.getClass())).intValue();
-    }
-
-    public static String getEntityString(Entity var0) {
-        return (String)classToStringMapping.get(var0.getClass());
-    }
+
+    private static final Map stringToClassMapping = new HashMap();
+    private static final Map classToStringMapping = new HashMap();
+    private static final Map IDtoClassMapping = new HashMap();
+    private static final Map classToIDMapping = new HashMap();
 
     static {
         addMapping(EntityArrow.class, "Arrow", 10);
@@ -102,5 +33,82 @@
         addMapping(EntityFallingSand.class, "FallingSand", 21);
         addMapping(EntityMinecart.class, "Minecart", 40);
         addMapping(EntityBoat.class, "Boat", 41);
+    }
+
+    public EntityList() {
+    }
+
+    private static void addMapping(Class class1, String s, int i) {
+        stringToClassMapping.put(s, class1);
+        classToStringMapping.put(class1, s);
+        IDtoClassMapping.put(Integer.valueOf(i), class1);
+        classToIDMapping.put(class1, Integer.valueOf(i));
+    }
+
+    public static Entity createEntityInWorld(String s, World world) {
+        Entity entity = null;
+        try {
+            Class class1 = (Class) stringToClassMapping.get(s);
+            if (class1 != null) {
+                entity = (Entity) class1.getConstructor(new Class[]{
+                        World.class
+                }).newInstance(new Object[]{
+                        world
+                });
+            }
+        } catch (Exception exception) {
+            exception.printStackTrace();
+        }
+        return entity;
+    }
+
+    public static Entity createEntityFromNBT(NBTTagCompound nbttagcompound, World world) {
+        Entity entity = null;
+        try {
+            Class class1 = (Class) stringToClassMapping.get(nbttagcompound.getString("id"));
+            if (class1 != null) {
+                entity = (Entity) class1.getConstructor(new Class[]{
+                        World.class
+                }).newInstance(new Object[]{
+                        world
+                });
+            }
+        } catch (Exception exception) {
+            exception.printStackTrace();
+        }
+        if (entity != null) {
+            entity.readFromNBT(nbttagcompound);
+        } else {
+            System.out.println("Skipping Entity with id " + nbttagcompound.getString("id"));
+        }
+        return entity;
+    }
+
+    public static Entity createEntity(int i, World world) {
+        Entity entity = null;
+        try {
+            Class class1 = (Class) IDtoClassMapping.get(Integer.valueOf(i));
+            if (class1 != null) {
+                entity = (Entity) class1.getConstructor(new Class[]{
+                        World.class
+                }).newInstance(new Object[]{
+                        world
+                });
+            }
+        } catch (Exception exception) {
+            exception.printStackTrace();
+        }
+        if (entity == null) {
+            System.out.println("Skipping Entity with id " + i);
+        }
+        return entity;
+    }
+
+    public static int getEntityID(Entity entity) {
+        return ((Integer) classToIDMapping.get(entity.getClass())).intValue();
+    }
+
+    public static String getEntityString(Entity entity) {
+        return (String) classToStringMapping.get(entity.getClass());
     }
 }
