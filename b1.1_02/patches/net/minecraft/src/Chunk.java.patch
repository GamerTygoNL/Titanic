--- net/minecraft/src/Chunk.java
+++ net/minecraft/src/Chunk.java
@@ -1,13 +1,12 @@
 package net.minecraft.src;
 
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Random;
+import java.util.*;
 
 public class Chunk {
+
     public static boolean field_1540_a;
+    public final int xPosition;
+    public final int zPosition;
     public byte[] blocks;
     public boolean isChunkLoaded;
     public World worldObj;
@@ -16,8 +15,6 @@
     public NibbleArray blocklightMap;
     public byte[] heightMap;
     public int field_1532_i;
-    public final int xPosition;
-    public final int zPosition;
     public Map chunkTileEntityMap;
     public List[] entities;
     public boolean isTerrainPopulated;
@@ -27,584 +24,539 @@
     public boolean hasEntities;
     public long lastSaveTime;
 
-    public Chunk(World var1, int var2, int var3) {
-        this.chunkTileEntityMap = new HashMap();
-        this.entities = new List[8];
-        this.isTerrainPopulated = false;
-        this.isModified = false;
-        this.field_1524_q = false;
-        this.hasEntities = false;
-        this.lastSaveTime = 0L;
-        this.worldObj = var1;
-        this.xPosition = var2;
-        this.zPosition = var3;
-        this.heightMap = new byte[256];
-
-        for(int var4 = 0; var4 < this.entities.length; ++var4) {
-            this.entities[var4] = new ArrayList();
+    public Chunk(World world, int i, int j) {
+        chunkTileEntityMap = new HashMap();
+        entities = new List[8];
+        isTerrainPopulated = false;
+        isModified = false;
+        field_1524_q = false;
+        hasEntities = false;
+        lastSaveTime = 0L;
+        worldObj = world;
+        xPosition = i;
+        zPosition = j;
+        heightMap = new byte[256];
+        for (int k = 0; k < entities.length; k++) {
+            entities[k] = new ArrayList();
         }
 
     }
 
-    public Chunk(World var1, byte[] var2, int var3, int var4) {
-        this(var1, var3, var4);
-        this.blocks = var2;
-        this.data = new NibbleArray(var2.length);
-        this.skylightMap = new NibbleArray(var2.length);
-        this.blocklightMap = new NibbleArray(var2.length);
-    }
-
-    public boolean isAtLocation(int var1, int var2) {
-        return var1 == this.xPosition && var2 == this.zPosition;
-    }
-
-    public int getHeightValue(int var1, int var2) {
-        return this.heightMap[var2 << 4 | var1] & 255;
+    public Chunk(World world, byte[] abyte0, int i, int j) {
+        this(world, i, j);
+        blocks = abyte0;
+        data = new NibbleArray(abyte0.length);
+        skylightMap = new NibbleArray(abyte0.length);
+        blocklightMap = new NibbleArray(abyte0.length);
+    }
+
+    public boolean isAtLocation(int i, int j) {
+        return i == xPosition && j == zPosition;
+    }
+
+    public int getHeightValue(int i, int j) {
+        return heightMap[j << 4 | i] & 0xff;
     }
 
     public void func_1014_a() {
     }
 
     public void generateHeightMap() {
-        int var1 = 127;
-
-        for(int var2 = 0; var2 < 16; ++var2) {
-            for(int var3 = 0; var3 < 16; ++var3) {
-                int var4 = 127;
-
-                for(int var5 = var2 << 11 | var3 << 7; var4 > 0 && Block.lightOpacity[this.blocks[var5 + var4 - 1]] == 0; --var4) {
+        int i = 127;
+        for (int j = 0; j < 16; j++) {
+            for (int k = 0; k < 16; k++) {
+                int l = 127;
+                for (int i1 = j << 11 | k << 7; l > 0 && Block.lightOpacity[blocks[(i1 + l) - 1]] == 0; l--) {
                 }
-
-                this.heightMap[var3 << 4 | var2] = (byte)var4;
-                if(var4 < var1) {
-                    var1 = var4;
+                heightMap[k << 4 | j] = (byte) l;
+                if (l < i) {
+                    i = l;
                 }
             }
+
         }
 
-        this.field_1532_i = var1;
-        this.isModified = true;
+        field_1532_i = i;
+        isModified = true;
     }
 
     public void func_1024_c() {
-        int var1 = 127;
-
-        int var2;
-        int var3;
-        for(var2 = 0; var2 < 16; ++var2) {
-            for(var3 = 0; var3 < 16; ++var3) {
-                this.heightMap[var3 << 4 | var2] = -128;
-                this.func_1003_g(var2, 127, var3);
-                if((this.heightMap[var3 << 4 | var2] & 255) < var1) {
-                    var1 = this.heightMap[var3 << 4 | var2] & 255;
+        int i = 127;
+        for (int j = 0; j < 16; j++) {
+            for (int l = 0; l < 16; l++) {
+                heightMap[l << 4 | j] = -128;
+                func_1003_g(j, 127, l);
+                if ((heightMap[l << 4 | j] & 0xff) < i) {
+                    i = heightMap[l << 4 | j] & 0xff;
                 }
             }
+
         }
 
-        this.field_1532_i = var1;
-
-        for(var2 = 0; var2 < 16; ++var2) {
-            for(var3 = 0; var3 < 16; ++var3) {
-                this.func_996_c(var2, var3);
+        field_1532_i = i;
+        for (int k = 0; k < 16; k++) {
+            for (int i1 = 0; i1 < 16; i1++) {
+                func_996_c(k, i1);
             }
+
         }
 
-        this.isModified = true;
+        isModified = true;
     }
 
     public void func_4143_d() {
-        byte var1 = 32;
-
-        for(int var2 = 0; var2 < 16; ++var2) {
-            for(int var3 = 0; var3 < 16; ++var3) {
-                int var4 = var2 << 11 | var3 << 7;
-
-                int var5;
-                int var6;
-                for(var5 = 0; var5 < 128; ++var5) {
-                    var6 = Block.lightValue[this.blocks[var4 + var5]];
-                    if(var6 > 0) {
-                        this.blocklightMap.setNibble(var2, var5, var3, var6);
-                    }
-                }
-
-                var5 = 15;
-
-                for(var6 = var1 - 2; var6 < 128 && var5 > 0; this.blocklightMap.setNibble(var2, var6, var3, var5)) {
-                    ++var6;
-                    byte var7 = this.blocks[var4 + var6];
-                    int var8 = Block.lightOpacity[var7];
-                    int var9 = Block.lightValue[var7];
-                    if(var8 == 0) {
-                        var8 = 1;
-                    }
-
-                    var5 -= var8;
-                    if(var9 > var5) {
-                        var5 = var9;
-                    }
-
-                    if(var5 < 0) {
-                        var5 = 0;
-                    }
-                }
-            }
-        }
-
-        this.worldObj.func_616_a(EnumSkyBlock.Block, this.xPosition * 16, var1 - 1, this.zPosition * 16, this.xPosition * 16 + 16, var1 + 1, this.zPosition * 16 + 16);
-        this.isModified = true;
-    }
-
-    private void func_996_c(int var1, int var2) {
-        int var3 = this.getHeightValue(var1, var2);
-        int var4 = this.xPosition * 16 + var1;
-        int var5 = this.zPosition * 16 + var2;
-        this.func_1020_f(var4 - 1, var5, var3);
-        this.func_1020_f(var4 + 1, var5, var3);
-        this.func_1020_f(var4, var5 - 1, var3);
-        this.func_1020_f(var4, var5 + 1, var3);
-    }
-
-    private void func_1020_f(int var1, int var2, int var3) {
-        int var4 = this.worldObj.getHeightValue(var1, var2);
-        if(var4 > var3) {
-            this.worldObj.func_616_a(EnumSkyBlock.Sky, var1, var3, var2, var1, var4, var2);
-        } else if(var4 < var3) {
-            this.worldObj.func_616_a(EnumSkyBlock.Sky, var1, var4, var2, var1, var3, var2);
-        }
-
-        this.isModified = true;
-    }
-
-    private void func_1003_g(int var1, int var2, int var3) {
-        int var4 = this.heightMap[var3 << 4 | var1] & 255;
-        int var5 = var4;
-        if(var2 > var4) {
-            var5 = var2;
-        }
-
-        for(int var6 = var1 << 11 | var3 << 7; var5 > 0 && Block.lightOpacity[this.blocks[var6 + var5 - 1]] == 0; --var5) {
-        }
-
-        if(var5 != var4) {
-            this.worldObj.func_680_f(var1, var3, var5, var4);
-            this.heightMap[var3 << 4 | var1] = (byte)var5;
-            int var7;
-            int var8;
-            int var9;
-            if(var5 < this.field_1532_i) {
-                this.field_1532_i = var5;
-            } else {
-                var7 = 127;
-
-                for(var8 = 0; var8 < 16; ++var8) {
-                    for(var9 = 0; var9 < 16; ++var9) {
-                        if((this.heightMap[var9 << 4 | var8] & 255) < var7) {
-                            var7 = this.heightMap[var9 << 4 | var8] & 255;
-                        }
-                    }
-                }
-
-                this.field_1532_i = var7;
-            }
-
-            var7 = this.xPosition * 16 + var1;
-            var8 = this.zPosition * 16 + var3;
-            if(var5 < var4) {
-                for(var9 = var5; var9 < var4; ++var9) {
-                    this.skylightMap.setNibble(var1, var9, var3, 15);
-                }
-            } else {
-                this.worldObj.func_616_a(EnumSkyBlock.Sky, var7, var4, var8, var7, var5, var8);
-
-                for(var9 = var4; var9 < var5; ++var9) {
-                    this.skylightMap.setNibble(var1, var9, var3, 0);
-                }
-            }
-
-            var9 = 15;
-
-            int var10;
-            for(var10 = var5; var5 > 0 && var9 > 0; this.skylightMap.setNibble(var1, var5, var3, var9)) {
-                --var5;
-                int var11 = Block.lightOpacity[this.getBlockID(var1, var5, var3)];
-                if(var11 == 0) {
-                    var11 = 1;
-                }
-
-                var9 -= var11;
-                if(var9 < 0) {
-                    var9 = 0;
-                }
-            }
-
-            while(var5 > 0 && Block.lightOpacity[this.getBlockID(var1, var5 - 1, var3)] == 0) {
-                --var5;
-            }
-
-            if(var5 != var10) {
-                this.worldObj.func_616_a(EnumSkyBlock.Sky, var7 - 1, var5, var8 - 1, var7 + 1, var10, var8 + 1);
-            }
-
-            this.isModified = true;
-        }
-    }
-
-    public int getBlockID(int var1, int var2, int var3) {
-        return this.blocks[var1 << 11 | var3 << 7 | var2];
-    }
-
-    public boolean setBlockIDWithMetadata(int var1, int var2, int var3, int var4, int var5) {
-        byte var6 = (byte)var4;
-        int var7 = this.heightMap[var3 << 4 | var1] & 255;
-        int var8 = this.blocks[var1 << 11 | var3 << 7 | var2] & 255;
-        if(var8 == var4 && this.data.getNibble(var1, var2, var3) == var5) {
-            return false;
-        } else {
-            int var9 = this.xPosition * 16 + var1;
-            int var10 = this.zPosition * 16 + var3;
-            this.blocks[var1 << 11 | var3 << 7 | var2] = var6;
-            if(var8 != 0 && !this.worldObj.multiplayerWorld) {
-                Block.blocksList[var8].onBlockRemoval(this.worldObj, var9, var2, var10);
-            }
-
-            this.data.setNibble(var1, var2, var3, var5);
-            if(!this.worldObj.worldProvider.field_6478_e) {
-                if(Block.lightOpacity[var6] != 0) {
-                    if(var2 >= var7) {
-                        this.func_1003_g(var1, var2 + 1, var3);
-                    }
-                } else if(var2 == var7 - 1) {
-                    this.func_1003_g(var1, var2, var3);
-                }
-
-                this.worldObj.func_616_a(EnumSkyBlock.Sky, var9, var2, var10, var9, var2, var10);
-            }
-
-            this.worldObj.func_616_a(EnumSkyBlock.Block, var9, var2, var10, var9, var2, var10);
-            this.func_996_c(var1, var3);
-            if(var4 != 0) {
-                Block.blocksList[var4].onBlockAdded(this.worldObj, var9, var2, var10);
-            }
-
-            this.data.setNibble(var1, var2, var3, var5);
-            this.isModified = true;
-            return true;
-        }
-    }
-
-    public boolean setBlockID(int var1, int var2, int var3, int var4) {
-        byte var5 = (byte)var4;
-        int var6 = this.heightMap[var3 << 4 | var1] & 255;
-        int var7 = this.blocks[var1 << 11 | var3 << 7 | var2] & 255;
-        if(var7 == var4) {
-            return false;
-        } else {
-            int var8 = this.xPosition * 16 + var1;
-            int var9 = this.zPosition * 16 + var3;
-            this.blocks[var1 << 11 | var3 << 7 | var2] = var5;
-            if(var7 != 0) {
-                Block.blocksList[var7].onBlockRemoval(this.worldObj, var8, var2, var9);
-            }
-
-            this.data.setNibble(var1, var2, var3, 0);
-            if(Block.lightOpacity[var5] != 0) {
-                if(var2 >= var6) {
-                    this.func_1003_g(var1, var2 + 1, var3);
-                }
-            } else if(var2 == var6 - 1) {
-                this.func_1003_g(var1, var2, var3);
-            }
-
-            this.worldObj.func_616_a(EnumSkyBlock.Sky, var8, var2, var9, var8, var2, var9);
-            this.worldObj.func_616_a(EnumSkyBlock.Block, var8, var2, var9, var8, var2, var9);
-            this.func_996_c(var1, var3);
-            if(var4 != 0 && !this.worldObj.multiplayerWorld) {
-                Block.blocksList[var4].onBlockAdded(this.worldObj, var8, var2, var9);
-            }
-
-            this.isModified = true;
-            return true;
-        }
-    }
-
-    public int getBlockMetadata(int var1, int var2, int var3) {
-        return this.data.getNibble(var1, var2, var3);
-    }
-
-    public void setBlockMetadata(int var1, int var2, int var3, int var4) {
-        this.isModified = true;
-        this.data.setNibble(var1, var2, var3, var4);
-    }
-
-    public int getSavedLightValue(EnumSkyBlock var1, int var2, int var3, int var4) {
-        return var1 == EnumSkyBlock.Sky ? this.skylightMap.getNibble(var2, var3, var4) : (var1 == EnumSkyBlock.Block ? this.blocklightMap.getNibble(var2, var3, var4) : 0);
-    }
-
-    public void setLightValue(EnumSkyBlock var1, int var2, int var3, int var4, int var5) {
-        this.isModified = true;
-        if(var1 == EnumSkyBlock.Sky) {
-            this.skylightMap.setNibble(var2, var3, var4, var5);
-        } else {
-            if(var1 != EnumSkyBlock.Block) {
-                return;
-            }
-
-            this.blocklightMap.setNibble(var2, var3, var4, var5);
-        }
-
-    }
-
-    public int getBlockLightValue(int var1, int var2, int var3, int var4) {
-        int var5 = this.skylightMap.getNibble(var1, var2, var3);
-        if(var5 > 0) {
+        byte byte0 = 32;
+        for (int i = 0; i < 16; i++) {
+            for (int j = 0; j < 16; j++) {
+                int k = i << 11 | j << 7;
+                for (int l = 0; l < 128; l++) {
+                    int j1 = Block.lightValue[blocks[k + l]];
+                    if (j1 > 0) {
+                        blocklightMap.setNibble(i, l, j, j1);
+                    }
+                }
+
+                int i1 = 15;
+                for (int k1 = byte0 - 2; k1 < 128 && i1 > 0; ) {
+                    k1++;
+                    byte byte1 = blocks[k + k1];
+                    int l1 = Block.lightOpacity[byte1];
+                    int i2 = Block.lightValue[byte1];
+                    if (l1 == 0) {
+                        l1 = 1;
+                    }
+                    i1 -= l1;
+                    if (i2 > i1) {
+                        i1 = i2;
+                    }
+                    if (i1 < 0) {
+                        i1 = 0;
+                    }
+                    blocklightMap.setNibble(i, k1, j, i1);
+                }
+
+            }
+
+        }
+
+        worldObj.func_616_a(EnumSkyBlock.Block, xPosition * 16, byte0 - 1, zPosition * 16, xPosition * 16 + 16, byte0 + 1, zPosition * 16 + 16);
+        isModified = true;
+    }
+
+    private void func_996_c(int i, int j) {
+        int k = getHeightValue(i, j);
+        int l = xPosition * 16 + i;
+        int i1 = zPosition * 16 + j;
+        func_1020_f(l - 1, i1, k);
+        func_1020_f(l + 1, i1, k);
+        func_1020_f(l, i1 - 1, k);
+        func_1020_f(l, i1 + 1, k);
+    }
+
+    private void func_1020_f(int i, int j, int k) {
+        int l = worldObj.getHeightValue(i, j);
+        if (l > k) {
+            worldObj.func_616_a(EnumSkyBlock.Sky, i, k, j, i, l, j);
+        } else if (l < k) {
+            worldObj.func_616_a(EnumSkyBlock.Sky, i, l, j, i, k, j);
+        }
+        isModified = true;
+    }
+
+    private void func_1003_g(int i, int j, int k) {
+        int l = heightMap[k << 4 | i] & 0xff;
+        int i1 = l;
+        if (j > l) {
+            i1 = j;
+        }
+        for (int j1 = i << 11 | k << 7; i1 > 0 && Block.lightOpacity[blocks[(j1 + i1) - 1]] == 0; i1--) {
+        }
+        if (i1 == l) {
+            return;
+        }
+        worldObj.func_680_f(i, k, i1, l);
+        heightMap[k << 4 | i] = (byte) i1;
+        if (i1 < field_1532_i) {
+            field_1532_i = i1;
+        } else {
+            int k1 = 127;
+            for (int i2 = 0; i2 < 16; i2++) {
+                for (int k2 = 0; k2 < 16; k2++) {
+                    if ((heightMap[k2 << 4 | i2] & 0xff) < k1) {
+                        k1 = heightMap[k2 << 4 | i2] & 0xff;
+                    }
+                }
+
+            }
+
+            field_1532_i = k1;
+        }
+        int l1 = xPosition * 16 + i;
+        int j2 = zPosition * 16 + k;
+        if (i1 < l) {
+            for (int l2 = i1; l2 < l; l2++) {
+                skylightMap.setNibble(i, l2, k, 15);
+            }
+
+        } else {
+            worldObj.func_616_a(EnumSkyBlock.Sky, l1, l, j2, l1, i1, j2);
+            for (int i3 = l; i3 < i1; i3++) {
+                skylightMap.setNibble(i, i3, k, 0);
+            }
+
+        }
+        int j3 = 15;
+        int k3 = i1;
+        while (i1 > 0 && j3 > 0) {
+            i1--;
+            int l3 = Block.lightOpacity[getBlockID(i, i1, k)];
+            if (l3 == 0) {
+                l3 = 1;
+            }
+            j3 -= l3;
+            if (j3 < 0) {
+                j3 = 0;
+            }
+            skylightMap.setNibble(i, i1, k, j3);
+        }
+        for (; i1 > 0 && Block.lightOpacity[getBlockID(i, i1 - 1, k)] == 0; i1--) {
+        }
+        if (i1 != k3) {
+            worldObj.func_616_a(EnumSkyBlock.Sky, l1 - 1, i1, j2 - 1, l1 + 1, k3, j2 + 1);
+        }
+        isModified = true;
+    }
+
+    public int getBlockID(int i, int j, int k) {
+        return blocks[i << 11 | k << 7 | j];
+    }
+
+    public boolean setBlockIDWithMetadata(int i, int j, int k, int l, int i1) {
+        byte byte0 = (byte) l;
+        int j1 = heightMap[k << 4 | i] & 0xff;
+        int k1 = blocks[i << 11 | k << 7 | j] & 0xff;
+        if (k1 == l && data.getNibble(i, j, k) == i1) {
+            return false;
+        }
+        int l1 = xPosition * 16 + i;
+        int i2 = zPosition * 16 + k;
+        blocks[i << 11 | k << 7 | j] = byte0;
+        if (k1 != 0 && !worldObj.multiplayerWorld) {
+            Block.blocksList[k1].onBlockRemoval(worldObj, l1, j, i2);
+        }
+        data.setNibble(i, j, k, i1);
+        if (!worldObj.worldProvider.field_6478_e) {
+            if (Block.lightOpacity[byte0] != 0) {
+                if (j >= j1) {
+                    func_1003_g(i, j + 1, k);
+                }
+            } else if (j == j1 - 1) {
+                func_1003_g(i, j, k);
+            }
+            worldObj.func_616_a(EnumSkyBlock.Sky, l1, j, i2, l1, j, i2);
+        }
+        worldObj.func_616_a(EnumSkyBlock.Block, l1, j, i2, l1, j, i2);
+        func_996_c(i, k);
+        if (l != 0) {
+            Block.blocksList[l].onBlockAdded(worldObj, l1, j, i2);
+        }
+        data.setNibble(i, j, k, i1);
+        isModified = true;
+        return true;
+    }
+
+    public boolean setBlockID(int i, int j, int k, int l) {
+        byte byte0 = (byte) l;
+        int i1 = heightMap[k << 4 | i] & 0xff;
+        int j1 = blocks[i << 11 | k << 7 | j] & 0xff;
+        if (j1 == l) {
+            return false;
+        }
+        int k1 = xPosition * 16 + i;
+        int l1 = zPosition * 16 + k;
+        blocks[i << 11 | k << 7 | j] = byte0;
+        if (j1 != 0) {
+            Block.blocksList[j1].onBlockRemoval(worldObj, k1, j, l1);
+        }
+        data.setNibble(i, j, k, 0);
+        if (Block.lightOpacity[byte0] != 0) {
+            if (j >= i1) {
+                func_1003_g(i, j + 1, k);
+            }
+        } else if (j == i1 - 1) {
+            func_1003_g(i, j, k);
+        }
+        worldObj.func_616_a(EnumSkyBlock.Sky, k1, j, l1, k1, j, l1);
+        worldObj.func_616_a(EnumSkyBlock.Block, k1, j, l1, k1, j, l1);
+        func_996_c(i, k);
+        if (l != 0 && !worldObj.multiplayerWorld) {
+            Block.blocksList[l].onBlockAdded(worldObj, k1, j, l1);
+        }
+        isModified = true;
+        return true;
+    }
+
+    public int getBlockMetadata(int i, int j, int k) {
+        return data.getNibble(i, j, k);
+    }
+
+    public void setBlockMetadata(int i, int j, int k, int l) {
+        isModified = true;
+        data.setNibble(i, j, k, l);
+    }
+
+    public int getSavedLightValue(EnumSkyBlock enumskyblock, int i, int j, int k) {
+        if (enumskyblock == EnumSkyBlock.Sky) {
+            return skylightMap.getNibble(i, j, k);
+        }
+        if (enumskyblock == EnumSkyBlock.Block) {
+            return blocklightMap.getNibble(i, j, k);
+        } else {
+            return 0;
+        }
+    }
+
+    public void setLightValue(EnumSkyBlock enumskyblock, int i, int j, int k, int l) {
+        isModified = true;
+        if (enumskyblock == EnumSkyBlock.Sky) {
+            skylightMap.setNibble(i, j, k, l);
+        } else if (enumskyblock == EnumSkyBlock.Block) {
+            blocklightMap.setNibble(i, j, k, l);
+        } else {
+        }
+    }
+
+    public int getBlockLightValue(int i, int j, int k, int l) {
+        int i1 = skylightMap.getNibble(i, j, k);
+        if (i1 > 0) {
             field_1540_a = true;
         }
-
-        var5 -= var4;
-        int var6 = this.blocklightMap.getNibble(var1, var2, var3);
-        if(var6 > var5) {
-            var5 = var6;
-        }
-
-        return var5;
-    }
-
-    public void addEntity(Entity var1) {
-        if(!this.field_1524_q) {
-            this.hasEntities = true;
-            int var2 = MathHelper.floor_double(var1.posX / 16.0D);
-            int var3 = MathHelper.floor_double(var1.posZ / 16.0D);
-            if(var2 != this.xPosition || var3 != this.zPosition) {
-                System.out.println("Wrong location! " + var1);
-                Thread.dumpStack();
-            }
-
-            int var4 = MathHelper.floor_double(var1.posY / 16.0D);
-            if(var4 < 0) {
-                var4 = 0;
-            }
-
-            if(var4 >= this.entities.length) {
-                var4 = this.entities.length - 1;
-            }
-
-            var1.addedToChunk = true;
-            var1.chunkCoordX = this.xPosition;
-            var1.chunkCoordY = var4;
-            var1.chunkCoordZ = this.zPosition;
-            this.entities[var4].add(var1);
-        }
-    }
-
-    public void func_1015_b(Entity var1) {
-        this.func_1016_a(var1, var1.chunkCoordY);
-    }
-
-    public void func_1016_a(Entity var1, int var2) {
-        if(var2 < 0) {
-            var2 = 0;
-        }
-
-        if(var2 >= this.entities.length) {
-            var2 = this.entities.length - 1;
-        }
-
-        this.entities[var2].remove(var1);
-    }
-
-    public boolean canBlockSeeTheSky(int var1, int var2, int var3) {
-        return var2 >= (this.heightMap[var3 << 4 | var1] & 255);
-    }
-
-    public TileEntity getChunkBlockTileEntity(int var1, int var2, int var3) {
-        ChunkPosition var4 = new ChunkPosition(var1, var2, var3);
-        TileEntity var5 = (TileEntity)this.chunkTileEntityMap.get(var4);
-        if(var5 == null) {
-            int var6 = this.getBlockID(var1, var2, var3);
-            if(!Block.isBlockContainer[var6]) {
+        i1 -= l;
+        int j1 = blocklightMap.getNibble(i, j, k);
+        if (j1 > i1) {
+            i1 = j1;
+        }
+        return i1;
+    }
+
+    public void addEntity(Entity entity) {
+        if (field_1524_q) {
+            return;
+        }
+        hasEntities = true;
+        int i = MathHelper.floor_double(entity.posX / 16D);
+        int j = MathHelper.floor_double(entity.posZ / 16D);
+        if (i != xPosition || j != zPosition) {
+            System.out.println("Wrong location! " + entity);
+            Thread.dumpStack();
+        }
+        int k = MathHelper.floor_double(entity.posY / 16D);
+        if (k < 0) {
+            k = 0;
+        }
+        if (k >= entities.length) {
+            k = entities.length - 1;
+        }
+        entity.addedToChunk = true;
+        entity.chunkCoordX = xPosition;
+        entity.chunkCoordY = k;
+        entity.chunkCoordZ = zPosition;
+        entities[k].add(entity);
+    }
+
+    public void func_1015_b(Entity entity) {
+        func_1016_a(entity, entity.chunkCoordY);
+    }
+
+    public void func_1016_a(Entity entity, int i) {
+        if (i < 0) {
+            i = 0;
+        }
+        if (i >= entities.length) {
+            i = entities.length - 1;
+        }
+        entities[i].remove(entity);
+    }
+
+    public boolean canBlockSeeTheSky(int i, int j, int k) {
+        return j >= (heightMap[k << 4 | i] & 0xff);
+    }
+
+    public TileEntity getChunkBlockTileEntity(int i, int j, int k) {
+        ChunkPosition chunkposition = new ChunkPosition(i, j, k);
+        TileEntity tileentity = (TileEntity) chunkTileEntityMap.get(chunkposition);
+        if (tileentity == null) {
+            int l = getBlockID(i, j, k);
+            if (!Block.isBlockContainer[l]) {
                 return null;
             }
-
-            BlockContainer var7 = (BlockContainer)Block.blocksList[var6];
-            var7.onBlockAdded(this.worldObj, this.xPosition * 16 + var1, var2, this.zPosition * 16 + var3);
-            var5 = (TileEntity)this.chunkTileEntityMap.get(var4);
+            BlockContainer blockcontainer = (BlockContainer) Block.blocksList[l];
+            blockcontainer.onBlockAdded(worldObj, xPosition * 16 + i, j, zPosition * 16 + k);
+            tileentity = (TileEntity) chunkTileEntityMap.get(chunkposition);
         }
-
-        return var5;
-    }
-
-    public void func_1001_a(TileEntity var1) {
-        int var2 = var1.xCoord - this.xPosition * 16;
-        int var3 = var1.yCoord;
-        int var4 = var1.zCoord - this.zPosition * 16;
-        this.setChunkBlockTileEntity(var2, var3, var4, var1);
-    }
-
-    public void setChunkBlockTileEntity(int var1, int var2, int var3, TileEntity var4) {
-        ChunkPosition var5 = new ChunkPosition(var1, var2, var3);
-        var4.worldObj = this.worldObj;
-        var4.xCoord = this.xPosition * 16 + var1;
-        var4.yCoord = var2;
-        var4.zCoord = this.zPosition * 16 + var3;
-        if(this.getBlockID(var1, var2, var3) != 0 && Block.blocksList[this.getBlockID(var1, var2, var3)] instanceof BlockContainer) {
-            if(this.isChunkLoaded) {
-                if(this.chunkTileEntityMap.get(var5) != null) {
-                    this.worldObj.loadedTileEntityList.remove(this.chunkTileEntityMap.get(var5));
-                }
-
-                this.worldObj.loadedTileEntityList.add(var4);
-            }
-
-            this.chunkTileEntityMap.put(var5, var4);
-        } else {
+        return tileentity;
+    }
+
+    public void func_1001_a(TileEntity tileentity) {
+        int i = tileentity.xCoord - xPosition * 16;
+        int j = tileentity.yCoord;
+        int k = tileentity.zCoord - zPosition * 16;
+        setChunkBlockTileEntity(i, j, k, tileentity);
+    }
+
+    public void setChunkBlockTileEntity(int i, int j, int k, TileEntity tileentity) {
+        ChunkPosition chunkposition = new ChunkPosition(i, j, k);
+        tileentity.worldObj = worldObj;
+        tileentity.xCoord = xPosition * 16 + i;
+        tileentity.yCoord = j;
+        tileentity.zCoord = zPosition * 16 + k;
+        if (getBlockID(i, j, k) == 0 || !(Block.blocksList[getBlockID(i, j, k)] instanceof BlockContainer)) {
             System.out.println("Attempted to place a tile entity where there was no entity tile!");
-        }
+            return;
+        }
+        if (isChunkLoaded) {
+            if (chunkTileEntityMap.get(chunkposition) != null) {
+                worldObj.loadedTileEntityList.remove(chunkTileEntityMap.get(chunkposition));
+            }
+            worldObj.loadedTileEntityList.add(tileentity);
+        }
+        chunkTileEntityMap.put(chunkposition, tileentity);
     }
 
-    public void removeChunkBlockTileEntity(int var1, int var2, int var3) {
-        ChunkPosition var4 = new ChunkPosition(var1, var2, var3);
-        if(this.isChunkLoaded) {
-            this.worldObj.loadedTileEntityList.remove(this.chunkTileEntityMap.remove(var4));
+    public void removeChunkBlockTileEntity(int i, int j, int k) {
+        ChunkPosition chunkposition = new ChunkPosition(i, j, k);
+        if (isChunkLoaded) {
+            worldObj.loadedTileEntityList.remove(chunkTileEntityMap.remove(chunkposition));
         }
-
     }
 
     public void onChunkLoad() {
-        this.isChunkLoaded = true;
-        this.worldObj.loadedTileEntityList.addAll(this.chunkTileEntityMap.values());
-
-        for(int var1 = 0; var1 < this.entities.length; ++var1) {
-            this.worldObj.func_636_a(this.entities[var1]);
+        isChunkLoaded = true;
+        worldObj.loadedTileEntityList.addAll(chunkTileEntityMap.values());
+        for (int i = 0; i < entities.length; i++) {
+            worldObj.func_636_a(entities[i]);
         }
 
     }
 
     public void onChunkUnload() {
-        this.isChunkLoaded = false;
-        this.worldObj.loadedTileEntityList.removeAll(this.chunkTileEntityMap.values());
-
-        for(int var1 = 0; var1 < this.entities.length; ++var1) {
-            this.worldObj.func_632_b(this.entities[var1]);
+        isChunkLoaded = false;
+        worldObj.loadedTileEntityList.removeAll(chunkTileEntityMap.values());
+        for (int i = 0; i < entities.length; i++) {
+            worldObj.func_632_b(entities[i]);
         }
 
     }
 
     public void setChunkModified() {
-        this.isModified = true;
-    }
-
-    public void getEntitiesWithinAABBForEntity(Entity var1, AxisAlignedBB var2, List var3) {
-        int var4 = MathHelper.floor_double((var2.minY - 2.0D) / 16.0D);
-        int var5 = MathHelper.floor_double((var2.maxY + 2.0D) / 16.0D);
-        if(var4 < 0) {
-            var4 = 0;
-        }
-
-        if(var5 >= this.entities.length) {
-            var5 = this.entities.length - 1;
-        }
-
-        for(int var6 = var4; var6 <= var5; ++var6) {
-            List var7 = this.entities[var6];
-
-            for(int var8 = 0; var8 < var7.size(); ++var8) {
-                Entity var9 = (Entity)var7.get(var8);
-                if(var9 != var1 && var9.boundingBox.intersectsWith(var2)) {
-                    var3.add(var9);
-                }
-            }
-        }
-
-    }
-
-    public void getEntitiesOfTypeWithinAAAB(Class var1, AxisAlignedBB var2, List var3) {
-        int var4 = MathHelper.floor_double((var2.minY - 2.0D) / 16.0D);
-        int var5 = MathHelper.floor_double((var2.maxY + 2.0D) / 16.0D);
-        if(var4 < 0) {
-            var4 = 0;
-        }
-
-        if(var5 >= this.entities.length) {
-            var5 = this.entities.length - 1;
-        }
-
-        for(int var6 = var4; var6 <= var5; ++var6) {
-            List var7 = this.entities[var6];
-
-            for(int var8 = 0; var8 < var7.size(); ++var8) {
-                Entity var9 = (Entity)var7.get(var8);
-                if(var1.isAssignableFrom(var9.getClass()) && var9.boundingBox.intersectsWith(var2)) {
-                    var3.add(var9);
-                }
-            }
-        }
-
-    }
-
-    public boolean needsSaving(boolean var1) {
-        if(this.neverSave) {
+        isModified = true;
+    }
+
+    public void getEntitiesWithinAABBForEntity(Entity entity, AxisAlignedBB axisalignedbb, List list) {
+        int i = MathHelper.floor_double((axisalignedbb.minY - 2D) / 16D);
+        int j = MathHelper.floor_double((axisalignedbb.maxY + 2D) / 16D);
+        if (i < 0) {
+            i = 0;
+        }
+        if (j >= entities.length) {
+            j = entities.length - 1;
+        }
+        for (int k = i; k <= j; k++) {
+            List list1 = entities[k];
+            for (int l = 0; l < list1.size(); l++) {
+                Entity entity1 = (Entity) list1.get(l);
+                if (entity1 != entity && entity1.boundingBox.intersectsWith(axisalignedbb)) {
+                    list.add(entity1);
+                }
+            }
+
+        }
+
+    }
+
+    public void getEntitiesOfTypeWithinAAAB(Class class1, AxisAlignedBB axisalignedbb, List list) {
+        int i = MathHelper.floor_double((axisalignedbb.minY - 2D) / 16D);
+        int j = MathHelper.floor_double((axisalignedbb.maxY + 2D) / 16D);
+        if (i < 0) {
+            i = 0;
+        }
+        if (j >= entities.length) {
+            j = entities.length - 1;
+        }
+        for (int k = i; k <= j; k++) {
+            List list1 = entities[k];
+            for (int l = 0; l < list1.size(); l++) {
+                Entity entity = (Entity) list1.get(l);
+                if (class1.isAssignableFrom(entity.getClass()) && entity.boundingBox.intersectsWith(axisalignedbb)) {
+                    list.add(entity);
+                }
+            }
+
+        }
+
+    }
+
+    public boolean needsSaving(boolean flag) {
+        if (neverSave) {
             return false;
-        } else {
-            if(var1) {
-                if(this.hasEntities && this.worldObj.worldTime != this.lastSaveTime) {
-                    return true;
-                }
-            } else if(this.hasEntities && this.worldObj.worldTime >= this.lastSaveTime + 600L) {
+        }
+        if (flag) {
+            if (hasEntities && worldObj.worldTime != lastSaveTime) {
                 return true;
             }
-
-            return this.isModified;
-        }
-    }
-
-    public int func_1004_a(byte[] var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8) {
-        int var9;
-        int var10;
-        int var11;
-        int var12;
-        for(var9 = var2; var9 < var5; ++var9) {
-            for(var10 = var4; var10 < var7; ++var10) {
-                var11 = var9 << 11 | var10 << 7 | var3;
-                var12 = var6 - var3;
-                System.arraycopy(var1, var8, this.blocks, var11, var12);
-                var8 += var12;
-            }
-        }
-
-        this.generateHeightMap();
-
-        for(var9 = var2; var9 < var5; ++var9) {
-            for(var10 = var4; var10 < var7; ++var10) {
-                var11 = (var9 << 11 | var10 << 7 | var3) >> 1;
-                var12 = (var6 - var3) / 2;
-                System.arraycopy(var1, var8, this.data.data, var11, var12);
-                var8 += var12;
-            }
-        }
-
-        for(var9 = var2; var9 < var5; ++var9) {
-            for(var10 = var4; var10 < var7; ++var10) {
-                var11 = (var9 << 11 | var10 << 7 | var3) >> 1;
-                var12 = (var6 - var3) / 2;
-                System.arraycopy(var1, var8, this.blocklightMap.data, var11, var12);
-                var8 += var12;
-            }
-        }
-
-        for(var9 = var2; var9 < var5; ++var9) {
-            for(var10 = var4; var10 < var7; ++var10) {
-                var11 = (var9 << 11 | var10 << 7 | var3) >> 1;
-                var12 = (var6 - var3) / 2;
-                System.arraycopy(var1, var8, this.skylightMap.data, var11, var12);
-                var8 += var12;
-            }
-        }
-
-        return var8;
-    }
-
-    public Random func_997_a(long var1) {
-        return new Random(this.worldObj.randomSeed + (long)(this.xPosition * this.xPosition * 4987142) + (long)(this.xPosition * 5947611) + (long)(this.zPosition * this.zPosition) * 4392871L + (long)(this.zPosition * 389711) ^ var1);
+        } else if (hasEntities && worldObj.worldTime >= lastSaveTime + 600L) {
+            return true;
+        }
+        return isModified;
+    }
+
+    public int func_1004_a(byte[] abyte0, int i, int j, int k, int l, int i1, int j1,
+                           int k1) {
+        for (int l1 = i; l1 < l; l1++) {
+            for (int l2 = k; l2 < j1; l2++) {
+                int l3 = l1 << 11 | l2 << 7 | j;
+                int l4 = i1 - j;
+                System.arraycopy(abyte0, k1, blocks, l3, l4);
+                k1 += l4;
+            }
+
+        }
+
+        generateHeightMap();
+        for (int i2 = i; i2 < l; i2++) {
+            for (int i3 = k; i3 < j1; i3++) {
+                int i4 = (i2 << 11 | i3 << 7 | j) >> 1;
+                int i5 = (i1 - j) / 2;
+                System.arraycopy(abyte0, k1, data.data, i4, i5);
+                k1 += i5;
+            }
+
+        }
+
+        for (int j2 = i; j2 < l; j2++) {
+            for (int j3 = k; j3 < j1; j3++) {
+                int j4 = (j2 << 11 | j3 << 7 | j) >> 1;
+                int j5 = (i1 - j) / 2;
+                System.arraycopy(abyte0, k1, blocklightMap.data, j4, j5);
+                k1 += j5;
+            }
+
+        }
+
+        for (int k2 = i; k2 < l; k2++) {
+            for (int k3 = k; k3 < j1; k3++) {
+                int k4 = (k2 << 11 | k3 << 7 | j) >> 1;
+                int k5 = (i1 - j) / 2;
+                System.arraycopy(abyte0, k1, skylightMap.data, k4, k5);
+                k1 += k5;
+            }
+
+        }
+
+        return k1;
+    }
+
+    public Random func_997_a(long l) {
+        return new Random(worldObj.randomSeed + (long) ((long) xPosition * xPosition * 0x4c1906) + (long) (xPosition * 0x5ac0dbL) + (long) ((long) zPosition * zPosition) * 0x4307a7L + (long) (zPosition * 0x5f24fL) ^ l);
     }
 }
