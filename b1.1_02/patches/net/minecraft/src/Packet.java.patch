--- net/minecraft/src/Packet.java
+++ net/minecraft/src/Packet.java
@@ -7,64 +7,9 @@
 import java.util.Map;
 
 public abstract class Packet {
-    private static Map packetIdToClassMap = new HashMap();
-    private static Map packetClassToIdMap = new HashMap();
-    public final long field_20018_j = System.currentTimeMillis();
-    public boolean isChunkDataPacket = false;
-
-    static void addIdClassMapping(int var0, Class var1) {
-        if(packetIdToClassMap.containsKey(Integer.valueOf(var0))) {
-            throw new IllegalArgumentException("Duplicate packet id:" + var0);
-        } else if(packetClassToIdMap.containsKey(var1)) {
-            throw new IllegalArgumentException("Duplicate packet class:" + var1);
-        } else {
-            packetIdToClassMap.put(Integer.valueOf(var0), var1);
-            packetClassToIdMap.put(var1, Integer.valueOf(var0));
-        }
-    }
-
-    public static Packet getNewPacket(int var0) {
-        try {
-            Class var1 = (Class)packetIdToClassMap.get(Integer.valueOf(var0));
-            return var1 == null ? null : (Packet)var1.newInstance();
-        } catch (Exception var2) {
-            var2.printStackTrace();
-            System.out.println("Skipping packet with id " + var0);
-            return null;
-        }
-    }
-
-    public final int getPacketId() {
-        return ((Integer)packetClassToIdMap.get(this.getClass())).intValue();
-    }
-
-    public static Packet readPacket(DataInputStream var0) throws IOException {
-        int var1 = var0.read();
-        if(var1 == -1) {
-            return null;
-        } else {
-            Packet var2 = getNewPacket(var1);
-            if(var2 == null) {
-                throw new IOException("Bad packet id " + var1);
-            } else {
-                var2.readPacketData(var0);
-                return var2;
-            }
-        }
-    }
-
-    public static void writePacket(Packet var0, DataOutputStream var1) throws IOException {
-        var1.write(var0.getPacketId());
-        var0.writePacketData(var1);
-    }
-
-    public abstract void readPacketData(DataInputStream var1) throws IOException;
-
-    public abstract void writePacketData(DataOutputStream var1) throws IOException;
-
-    public abstract void processPacket(NetHandler var1);
-
-    public abstract int getPacketSize();
+
+    private static final Map packetIdToClassMap = new HashMap();
+    private static final Map packetClassToIdMap = new HashMap();
 
     static {
         addIdClassMapping(0, Packet0KeepAlive.class);
@@ -114,4 +59,77 @@
         addIdClassMapping(130, Packet130.class);
         addIdClassMapping(255, Packet255KickDisconnect.class);
     }
+
+    public final long field_20018_j = System.currentTimeMillis();
+    public boolean isChunkDataPacket;
+
+    public Packet() {
+        isChunkDataPacket = false;
+    }
+
+    static void addIdClassMapping(int i, Class class1) {
+        if (packetIdToClassMap.containsKey(Integer.valueOf(i))) {
+            throw new IllegalArgumentException("Duplicate packet id:" + i);
+        }
+        if (packetClassToIdMap.containsKey(class1)) {
+            throw new IllegalArgumentException("Duplicate packet class:" + class1);
+        } else {
+            packetIdToClassMap.put(Integer.valueOf(i), class1);
+            packetClassToIdMap.put(class1, Integer.valueOf(i));
+        }
+    }
+
+    public static Packet getNewPacket(int i) {
+        try {
+            Class class1 = (Class) packetIdToClassMap.get(Integer.valueOf(i));
+            if (class1 == null) {
+                return null;
+            } else {
+                return (Packet) class1.newInstance();
+            }
+        } catch (Exception exception) {
+            exception.printStackTrace();
+        }
+        System.out.println("Skipping packet with id " + i);
+        return null;
+    }
+
+    public static Packet readPacket(DataInputStream datainputstream) throws IOException {
+        int i = datainputstream.read();
+        if (i == -1) {
+            return null;
+        }
+        Packet packet = getNewPacket(i);
+        if (packet == null) {
+            throw new IOException("Bad packet id " + i);
+        } else {
+            packet.readPacketData(datainputstream);
+            return packet;
+        }
+    }
+
+    public static void writePacket(Packet packet, DataOutputStream dataoutputstream) throws IOException {
+        dataoutputstream.write(packet.getPacketId());
+        packet.writePacketData(dataoutputstream);
+    }
+
+    static Class _mthclass$(String s) {
+        try {
+            return Class.forName(s);
+        } catch (ClassNotFoundException classnotfoundexception) {
+            throw new NoClassDefFoundError(classnotfoundexception.getMessage());
+        }
+    }
+
+    public final int getPacketId() {
+        return ((Integer) packetClassToIdMap.get(getClass())).intValue();
+    }
+
+    public abstract void readPacketData(DataInputStream datainputstream) throws IOException;
+
+    public abstract void writePacketData(DataOutputStream dataoutputstream) throws IOException;
+
+    public abstract void processPacket(NetHandler nethandler);
+
+    public abstract int getPacketSize();
 }
