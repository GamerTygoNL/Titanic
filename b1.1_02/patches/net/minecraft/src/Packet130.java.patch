--- net/minecraft/src/Packet130.java
+++ net/minecraft/src/Packet130.java
@@ -5,57 +5,55 @@
 import java.io.IOException;
 
 public class Packet130 extends Packet {
+
     public int field_20020_a;
     public int field_20019_b;
     public int field_20022_c;
     public String[] field_20021_d;
 
     public Packet130() {
-        this.isChunkDataPacket = true;
-    }
-
-    public Packet130(int var1, int var2, int var3, String[] var4) {
-        this.isChunkDataPacket = true;
-        this.field_20020_a = var1;
-        this.field_20019_b = var2;
-        this.field_20022_c = var3;
-        this.field_20021_d = var4;
-    }
-
-    public void readPacketData(DataInputStream var1) throws IOException {
-        this.field_20020_a = var1.readInt();
-        this.field_20019_b = var1.readShort();
-        this.field_20022_c = var1.readInt();
-        this.field_20021_d = new String[4];
-
-        for(int var2 = 0; var2 < 4; ++var2) {
-            this.field_20021_d[var2] = var1.readUTF();
-        }
-
-    }
-
-    public void writePacketData(DataOutputStream var1) throws IOException {
-        var1.writeInt(this.field_20020_a);
-        var1.writeShort(this.field_20019_b);
-        var1.writeInt(this.field_20022_c);
-
-        for(int var2 = 0; var2 < 4; ++var2) {
-            var1.writeUTF(this.field_20021_d[var2]);
-        }
-
-    }
-
-    public void processPacket(NetHandler var1) {
-        var1.func_20093_a(this);
+        isChunkDataPacket = true;
+    }
+
+    public Packet130(int i, int j, int k, String[] as) {
+        isChunkDataPacket = true;
+        field_20020_a = i;
+        field_20019_b = j;
+        field_20022_c = k;
+        field_20021_d = as;
+    }
+
+    public void readPacketData(DataInputStream datainputstream) throws IOException {
+        field_20020_a = datainputstream.readInt();
+        field_20019_b = datainputstream.readShort();
+        field_20022_c = datainputstream.readInt();
+        field_20021_d = new String[4];
+        for (int i = 0; i < 4; i++) {
+            field_20021_d[i] = datainputstream.readUTF();
+        }
+
+    }
+
+    public void writePacketData(DataOutputStream dataoutputstream) throws IOException {
+        dataoutputstream.writeInt(field_20020_a);
+        dataoutputstream.writeShort(field_20019_b);
+        dataoutputstream.writeInt(field_20022_c);
+        for (int i = 0; i < 4; i++) {
+            dataoutputstream.writeUTF(field_20021_d[i]);
+        }
+
+    }
+
+    public void processPacket(NetHandler nethandler) {
+        nethandler.func_20093_a(this);
     }
 
     public int getPacketSize() {
-        int var1 = 0;
-
-        for(int var2 = 0; var2 < 4; ++var2) {
-            var1 += this.field_20021_d[var2].length();
+        int i = 0;
+        for (int j = 0; j < 4; j++) {
+            i += field_20021_d[j].length();
         }
 
-        return var1;
+        return i;
     }
 }
