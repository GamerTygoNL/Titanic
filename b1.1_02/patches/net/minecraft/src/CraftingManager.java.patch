--- net/minecraft/src/CraftingManager.java
+++ net/minecraft/src/CraftingManager.java
@@ -6,124 +6,205 @@
 import java.util.List;
 
 public class CraftingManager {
+
     private static final CraftingManager instance = new CraftingManager();
-    private List recipes = new ArrayList();
-
-    public static final CraftingManager getInstance() {
-        return instance;
-    }
+    private final List recipes;
 
     private CraftingManager() {
+        recipes = new ArrayList();
         (new RecipesTools()).addRecipes(this);
         (new RecipesWeapons()).addRecipes(this);
         (new RecipesIngots()).addRecipes(this);
         (new RecipesFood()).addRecipes(this);
         (new RecipesCrafting()).addRecipes(this);
         (new RecipesArmor()).addRecipes(this);
-        this.addRecipe(new ItemStack(Item.paper, 3), new Object[]{"###", Character.valueOf('#'), Item.reed});
-        this.addRecipe(new ItemStack(Item.book, 1), new Object[]{"#", "#", "#", Character.valueOf('#'), Item.paper});
-        this.addRecipe(new ItemStack(Block.fence, 2), new Object[]{"###", "###", Character.valueOf('#'), Item.stick});
-        this.addRecipe(new ItemStack(Block.jukebox, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.diamond});
-        this.addRecipe(new ItemStack(Block.bookShelf, 1), new Object[]{"###", "XXX", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.book});
-        this.addRecipe(new ItemStack(Block.blockSnow, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.snowball});
-        this.addRecipe(new ItemStack(Block.blockClay, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.clay});
-        this.addRecipe(new ItemStack(Block.brick, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.brick});
-        this.addRecipe(new ItemStack(Block.lightStone, 1), new Object[]{"###", "###", "###", Character.valueOf('#'), Item.lightStoneDust});
-        this.addRecipe(new ItemStack(Block.cloth, 1), new Object[]{"###", "###", "###", Character.valueOf('#'), Item.silk});
-        this.addRecipe(new ItemStack(Block.tnt, 1), new Object[]{"X#X", "#X#", "X#X", Character.valueOf('X'), Item.gunpowder, Character.valueOf('#'), Block.sand});
-        this.addRecipe(new ItemStack(Block.stairSingle, 3), new Object[]{"###", Character.valueOf('#'), Block.cobblestone});
-        this.addRecipe(new ItemStack(Block.ladder, 1), new Object[]{"# #", "###", "# #", Character.valueOf('#'), Item.stick});
-        this.addRecipe(new ItemStack(Item.doorWood, 1), new Object[]{"##", "##", "##", Character.valueOf('#'), Block.planks});
-        this.addRecipe(new ItemStack(Item.doorSteel, 1), new Object[]{"##", "##", "##", Character.valueOf('#'), Item.ingotIron});
-        this.addRecipe(new ItemStack(Item.sign, 1), new Object[]{"###", "###", " X ", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.stick});
-        this.addRecipe(new ItemStack(Block.planks, 4), new Object[]{"#", Character.valueOf('#'), Block.wood});
-        this.addRecipe(new ItemStack(Item.stick, 4), new Object[]{"#", "#", Character.valueOf('#'), Block.planks});
-        this.addRecipe(new ItemStack(Block.torchWood, 4), new Object[]{"X", "#", Character.valueOf('X'), Item.coal, Character.valueOf('#'), Item.stick});
-        this.addRecipe(new ItemStack(Item.bowlEmpty, 4), new Object[]{"# #", " # ", Character.valueOf('#'), Block.planks});
-        this.addRecipe(new ItemStack(Block.minecartTrack, 16), new Object[]{"X X", "X#X", "X X", Character.valueOf('X'), Item.ingotIron, Character.valueOf('#'), Item.stick});
-        this.addRecipe(new ItemStack(Item.minecartEmpty, 1), new Object[]{"# #", "###", Character.valueOf('#'), Item.ingotIron});
-        this.addRecipe(new ItemStack(Block.pumpkinLantern, 1), new Object[]{"A", "B", Character.valueOf('A'), Block.pumpkin, Character.valueOf('B'), Block.torchWood});
-        this.addRecipe(new ItemStack(Item.minecartCrate, 1), new Object[]{"A", "B", Character.valueOf('A'), Block.crate, Character.valueOf('B'), Item.minecartEmpty});
-        this.addRecipe(new ItemStack(Item.minecartPowered, 1), new Object[]{"A", "B", Character.valueOf('A'), Block.stoneOvenIdle, Character.valueOf('B'), Item.minecartEmpty});
-        this.addRecipe(new ItemStack(Item.boat, 1), new Object[]{"# #", "###", Character.valueOf('#'), Block.planks});
-        this.addRecipe(new ItemStack(Item.bucketEmpty, 1), new Object[]{"# #", " # ", Character.valueOf('#'), Item.ingotIron});
-        this.addRecipe(new ItemStack(Item.flintAndSteel, 1), new Object[]{"A ", " B", Character.valueOf('A'), Item.ingotIron, Character.valueOf('B'), Item.flint});
-        this.addRecipe(new ItemStack(Item.bread, 1), new Object[]{"###", Character.valueOf('#'), Item.wheat});
-        this.addRecipe(new ItemStack(Block.stairCompactPlanks, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.planks});
-        this.addRecipe(new ItemStack(Item.fishingRod, 1), new Object[]{"  #", " #X", "# X", Character.valueOf('#'), Item.stick, Character.valueOf('X'), Item.silk});
-        this.addRecipe(new ItemStack(Block.stairCompactCobblestone, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.cobblestone});
-        this.addRecipe(new ItemStack(Item.painting, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Item.stick, Character.valueOf('X'), Block.cloth});
-        this.addRecipe(new ItemStack(Item.appleGold, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.blockGold, Character.valueOf('X'), Item.appleRed});
-        this.addRecipe(new ItemStack(Block.lever, 1), new Object[]{"X", "#", Character.valueOf('#'), Block.cobblestone, Character.valueOf('X'), Item.stick});
-        this.addRecipe(new ItemStack(Block.torchRedstoneActive, 1), new Object[]{"X", "#", Character.valueOf('#'), Item.stick, Character.valueOf('X'), Item.redstone});
-        this.addRecipe(new ItemStack(Item.pocketSundial, 1), new Object[]{" # ", "#X#", " # ", Character.valueOf('#'), Item.ingotGold, Character.valueOf('X'), Item.redstone});
-        this.addRecipe(new ItemStack(Item.compass, 1), new Object[]{" # ", "#X#", " # ", Character.valueOf('#'), Item.ingotIron, Character.valueOf('X'), Item.redstone});
-        this.addRecipe(new ItemStack(Block.button, 1), new Object[]{"#", "#", Character.valueOf('#'), Block.stone});
-        this.addRecipe(new ItemStack(Block.pressurePlateStone, 1), new Object[]{"###", Character.valueOf('#'), Block.stone});
-        this.addRecipe(new ItemStack(Block.pressurePlatePlanks, 1), new Object[]{"###", Character.valueOf('#'), Block.planks});
-        Collections.sort(this.recipes, new RecipeSorter(this));
-        System.out.println(this.recipes.size() + " recipes");
-    }
-
-    void addRecipe(ItemStack var1, Object... var2) {
-        String var3 = "";
-        int var4 = 0;
-        int var5 = 0;
-        int var6 = 0;
-        if(var2[var4] instanceof String[]) {
-            String[] var11 = (String[])((String[])var2[var4++]);
-
-            for(int var8 = 0; var8 < var11.length; ++var8) {
-                String var9 = var11[var8];
-                ++var6;
-                var5 = var9.length();
-                var3 = var3 + var9;
+        addRecipe(new ItemStack(Item.paper, 3), new Object[]{
+                "###", Character.valueOf('#'), Item.reed
+        });
+        addRecipe(new ItemStack(Item.book, 1), new Object[]{
+                "#", "#", "#", Character.valueOf('#'), Item.paper
+        });
+        addRecipe(new ItemStack(Block.fence, 2), new Object[]{
+                "###", "###", Character.valueOf('#'), Item.stick
+        });
+        addRecipe(new ItemStack(Block.jukebox, 1), new Object[]{
+                "###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.diamond
+        });
+        addRecipe(new ItemStack(Block.bookShelf, 1), new Object[]{
+                "###", "XXX", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.book
+        });
+        addRecipe(new ItemStack(Block.blockSnow, 1), new Object[]{
+                "##", "##", Character.valueOf('#'), Item.snowball
+        });
+        addRecipe(new ItemStack(Block.blockClay, 1), new Object[]{
+                "##", "##", Character.valueOf('#'), Item.clay
+        });
+        addRecipe(new ItemStack(Block.brick, 1), new Object[]{
+                "##", "##", Character.valueOf('#'), Item.brick
+        });
+        addRecipe(new ItemStack(Block.lightStone, 1), new Object[]{
+                "###", "###", "###", Character.valueOf('#'), Item.lightStoneDust
+        });
+        addRecipe(new ItemStack(Block.cloth, 1), new Object[]{
+                "###", "###", "###", Character.valueOf('#'), Item.silk
+        });
+        addRecipe(new ItemStack(Block.tnt, 1), new Object[]{
+                "X#X", "#X#", "X#X", Character.valueOf('X'), Item.gunpowder, Character.valueOf('#'), Block.sand
+        });
+        addRecipe(new ItemStack(Block.stairSingle, 3), new Object[]{
+                "###", Character.valueOf('#'), Block.cobblestone
+        });
+        addRecipe(new ItemStack(Block.ladder, 1), new Object[]{
+                "# #", "###", "# #", Character.valueOf('#'), Item.stick
+        });
+        addRecipe(new ItemStack(Item.doorWood, 1), new Object[]{
+                "##", "##", "##", Character.valueOf('#'), Block.planks
+        });
+        addRecipe(new ItemStack(Item.doorSteel, 1), new Object[]{
+                "##", "##", "##", Character.valueOf('#'), Item.ingotIron
+        });
+        addRecipe(new ItemStack(Item.sign, 1), new Object[]{
+                "###", "###", " X ", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.stick
+        });
+        addRecipe(new ItemStack(Block.planks, 4), new Object[]{
+                "#", Character.valueOf('#'), Block.wood
+        });
+        addRecipe(new ItemStack(Item.stick, 4), new Object[]{
+                "#", "#", Character.valueOf('#'), Block.planks
+        });
+        addRecipe(new ItemStack(Block.torchWood, 4), new Object[]{
+                "X", "#", Character.valueOf('X'), Item.coal, Character.valueOf('#'), Item.stick
+        });
+        addRecipe(new ItemStack(Item.bowlEmpty, 4), new Object[]{
+                "# #", " # ", Character.valueOf('#'), Block.planks
+        });
+        addRecipe(new ItemStack(Block.minecartTrack, 16), new Object[]{
+                "X X", "X#X", "X X", Character.valueOf('X'), Item.ingotIron, Character.valueOf('#'), Item.stick
+        });
+        addRecipe(new ItemStack(Item.minecartEmpty, 1), new Object[]{
+                "# #", "###", Character.valueOf('#'), Item.ingotIron
+        });
+        addRecipe(new ItemStack(Block.pumpkinLantern, 1), new Object[]{
+                "A", "B", Character.valueOf('A'), Block.pumpkin, Character.valueOf('B'), Block.torchWood
+        });
+        addRecipe(new ItemStack(Item.minecartCrate, 1), new Object[]{
+                "A", "B", Character.valueOf('A'), Block.crate, Character.valueOf('B'), Item.minecartEmpty
+        });
+        addRecipe(new ItemStack(Item.minecartPowered, 1), new Object[]{
+                "A", "B", Character.valueOf('A'), Block.stoneOvenIdle, Character.valueOf('B'), Item.minecartEmpty
+        });
+        addRecipe(new ItemStack(Item.boat, 1), new Object[]{
+                "# #", "###", Character.valueOf('#'), Block.planks
+        });
+        addRecipe(new ItemStack(Item.bucketEmpty, 1), new Object[]{
+                "# #", " # ", Character.valueOf('#'), Item.ingotIron
+        });
+        addRecipe(new ItemStack(Item.flintAndSteel, 1), new Object[]{
+                "A ", " B", Character.valueOf('A'), Item.ingotIron, Character.valueOf('B'), Item.flint
+        });
+        addRecipe(new ItemStack(Item.bread, 1), new Object[]{
+                "###", Character.valueOf('#'), Item.wheat
+        });
+        addRecipe(new ItemStack(Block.stairCompactPlanks, 4), new Object[]{
+                "#  ", "## ", "###", Character.valueOf('#'), Block.planks
+        });
+        addRecipe(new ItemStack(Item.fishingRod, 1), new Object[]{
+                "  #", " #X", "# X", Character.valueOf('#'), Item.stick, Character.valueOf('X'), Item.silk
+        });
+        addRecipe(new ItemStack(Block.stairCompactCobblestone, 4), new Object[]{
+                "#  ", "## ", "###", Character.valueOf('#'), Block.cobblestone
+        });
+        addRecipe(new ItemStack(Item.painting, 1), new Object[]{
+                "###", "#X#", "###", Character.valueOf('#'), Item.stick, Character.valueOf('X'), Block.cloth
+        });
+        addRecipe(new ItemStack(Item.appleGold, 1), new Object[]{
+                "###", "#X#", "###", Character.valueOf('#'), Block.blockGold, Character.valueOf('X'), Item.appleRed
+        });
+        addRecipe(new ItemStack(Block.lever, 1), new Object[]{
+                "X", "#", Character.valueOf('#'), Block.cobblestone, Character.valueOf('X'), Item.stick
+        });
+        addRecipe(new ItemStack(Block.torchRedstoneActive, 1), new Object[]{
+                "X", "#", Character.valueOf('#'), Item.stick, Character.valueOf('X'), Item.redstone
+        });
+        addRecipe(new ItemStack(Item.pocketSundial, 1), new Object[]{
+                " # ", "#X#", " # ", Character.valueOf('#'), Item.ingotGold, Character.valueOf('X'), Item.redstone
+        });
+        addRecipe(new ItemStack(Item.compass, 1), new Object[]{
+                " # ", "#X#", " # ", Character.valueOf('#'), Item.ingotIron, Character.valueOf('X'), Item.redstone
+        });
+        addRecipe(new ItemStack(Block.button, 1), new Object[]{
+                "#", "#", Character.valueOf('#'), Block.stone
+        });
+        addRecipe(new ItemStack(Block.pressurePlateStone, 1), new Object[]{
+                "###", Character.valueOf('#'), Block.stone
+        });
+        addRecipe(new ItemStack(Block.pressurePlatePlanks, 1), new Object[]{
+                "###", Character.valueOf('#'), Block.planks
+        });
+        Collections.sort(recipes, new RecipeSorter(this));
+        System.out.println(recipes.size() + " recipes");
+    }
+
+    public static final CraftingManager getInstance() {
+        return instance;
+    }
+
+    void addRecipe(ItemStack itemstack, Object[] aobj) {
+        String s = "";
+        int i = 0;
+        int j = 0;
+        int k = 0;
+        if (aobj[i] instanceof String[]) {
+            String[] as = (String[]) aobj[i++];
+            for (int l = 0; l < as.length; l++) {
+                String s2 = as[l];
+                k++;
+                j = s2.length();
+                s = s + s2;
             }
+
         } else {
-            while(var2[var4] instanceof String) {
-                String var7 = (String)var2[var4++];
-                ++var6;
-                var5 = var7.length();
-                var3 = var3 + var7;
-            }
-        }
-
-        HashMap var12;
-        int var15;
-        for(var12 = new HashMap(); var4 < var2.length; var4 += 2) {
-            Character var13 = (Character)var2[var4];
-            var15 = 0;
-            if(var2[var4 + 1] instanceof Item) {
-                var15 = ((Item)var2[var4 + 1]).shiftedIndex;
-            } else if(var2[var4 + 1] instanceof Block) {
-                var15 = ((Block)var2[var4 + 1]).blockID;
-            }
-
-            var12.put(var13, Integer.valueOf(var15));
-        }
-
-        int[] var14 = new int[var5 * var6];
-
-        for(var15 = 0; var15 < var5 * var6; ++var15) {
-            char var10 = var3.charAt(var15);
-            if(var12.containsKey(Character.valueOf(var10))) {
-                var14[var15] = ((Integer)var12.get(Character.valueOf(var10))).intValue();
+            while (aobj[i] instanceof String) {
+                String s1 = (String) aobj[i++];
+                k++;
+                j = s1.length();
+                s = s + s1;
+            }
+        }
+        HashMap hashmap = new HashMap();
+        for (; i < aobj.length; i += 2) {
+            Character character = (Character) aobj[i];
+            int i1 = 0;
+            if (aobj[i + 1] instanceof Item) {
+                i1 = ((Item) aobj[i + 1]).shiftedIndex;
+            } else if (aobj[i + 1] instanceof Block) {
+                i1 = ((Block) aobj[i + 1]).blockID;
+            }
+            hashmap.put(character, Integer.valueOf(i1));
+        }
+
+        int[] ai = new int[j * k];
+        for (int j1 = 0; j1 < j * k; j1++) {
+            char c = s.charAt(j1);
+            if (hashmap.containsKey(Character.valueOf(c))) {
+                ai[j1] = ((Integer) hashmap.get(Character.valueOf(c))).intValue();
             } else {
-                var14[var15] = -1;
+                ai[j1] = -1;
             }
         }
 
-        this.recipes.add(new CraftingRecipe(var5, var6, var14, var1));
+        recipes.add(new CraftingRecipe(j, k, ai, itemstack));
     }
 
-    public ItemStack craft(int[] var1) {
-        for(int var2 = 0; var2 < this.recipes.size(); ++var2) {
-            CraftingRecipe var3 = (CraftingRecipe)this.recipes.get(var2);
-            if(var3.matchRecipe(var1)) {
-                return var3.createResult(var1);
+    public ItemStack craft(int[] ai) {
+        for (int i = 0; i < recipes.size(); i++) {
+            CraftingRecipe craftingrecipe = (CraftingRecipe) recipes.get(i);
+            if (craftingrecipe.matchRecipe(ai)) {
+                return craftingrecipe.createResult(ai);
             }
         }
 
         return null;
     }
+
 }
